import "std/path.nov"
import "std/version.nov"

// -- Types

enum Platform =
  Linux   : 1,
  MacOs   : 2,
  Windows : 3

// -- Conversions

fun string(Platform p)
  if p == Platform.Linux    -> "Linux"
  if p == Platform.MacOs    -> "MacOs"
  if p == Platform.Windows  -> "Windows"
  else                      -> "Unknown"

// -- Actions

act getPlatform() Platform(platformCode())

act getRuntimeVersion() -> Version
  versionParser().run(runtimeVersionString()) ?? Version(0, 0, 0)

act getCompilerVersion() -> Version
  versionParser().run(compilerVersionString()) ?? Version(0, 0, 0)

act getPathCurrent() -> PathAbsolute
  pathAbsParser().run(workingDirectoryPathString()) ?? getPathDefaultRoot()

act getPathRuntime() -> PathAbsolute
  pathAbsParser().run(runtimePathString()) ?? getPathDefaultRoot()

act getPathProgram() -> PathAbsolute
  pathAbsParser().run(programPathString()) ?? getPathDefaultRoot()

act atInterupt{T}(action{T} delegate) -> future{T}
  fork invoke(impure lambda () -> T
    if interuptIsRequested() -> delegate()
    else                     -> sleep(milliseconds(100)); self())

// -- Tests

assert(
  p = getPlatform();
  p == Platform.Linux || p == Platform.MacOs || p == Platform.Windows)

assert(getRuntimeVersion() >= Version(0, 5, 0))

assert(getCompilerVersion() >= Version(0, 5, 0))

assert(getPathCurrent().extension() is None)

assert(
  runtimeName = getPathRuntime().stem();
  runtimeName == "novrt" || runtimeName == "nove")

assert(getPathProgram().filename() == "rt.nov")

assert(getPathProgram().stem() == "rt")

assert(getPathProgram().extension() == "nov")
