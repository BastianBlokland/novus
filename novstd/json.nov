import "std/list.nov"
import "std/pair.nov"
import "std/parse.nov"
import "std/utf8.nov"
import "std/writer.nov"

// -- Json (JavaScript Object Notation) parser and writer
// https://www.json.org/json-en.html

// -- Types

union JsonValue =
  JsonNull,
  float,
  bool,
  string,
  JsonObject,
  JsonArray

struct JsonObject =
  List{Pair{string, JsonValue}} fields

struct JsonArray =
  List{JsonValue} entries

struct JsonNull

// -- Utilities

fun toJsonVal{T}(T val)
  JsonValue(val)

fun toJsonObj(List{Pair{string, JsonValue}} fields)
  JsonObject(fields)

fun toJsonObjFields(JsonObject obj)
  obj.fields

fun toJsonArray(List{JsonValue} entries)
  JsonArray(entries)

fun toJsonArrayEntries(JsonArray a)
  a.entries

fun jsonStringEscape(string str)
  str.transform(lambda (char c)
    if c == '"'   -> "\\\""
    if c == '\\'  -> "\\\\"
    if c == '\b'  -> "\\b"
    if c == '\f'  -> "\\f"
    if c == '\n'  -> "\\n"
    if c == '\r'  -> "\\r"
    if c == '\t'  -> "\\t"
    else          -> string(c)
  )

// -- Conversions

fun string(JsonObject o)
  o.string("", WriterNewlineMode.None)

fun string(JsonObject o, string indent, WriterNewlineMode newlineMode)
  w = jsonObjectWriter(jsonValueWriter());
  w(o, indent, newlineMode).string()

fun string(JsonArray a)
  a.string("", WriterNewlineMode.None)

fun string(JsonArray a, string indent, WriterNewlineMode newlineMode)
  w = jsonArrayWriter(jsonValueWriter());
  w(a, indent, newlineMode).string()

fun string(JsonValue v)
  v.string("", WriterNewlineMode.None)

fun string(JsonValue v, string indent, WriterNewlineMode newlineMode)
  w = jsonValueWriter();
  w(v, indent, newlineMode).string()

fun string(JsonNull n)
  "null"

// -- Parsers

fun jsonNullParser()
  matchParser("null") >> retParser(JsonNull())

fun jsonNumberParser()
  txtFloatParser()

fun jsonBoolParser()
  (matchParser("true")  >> retParser(true))  |
  (matchParser("false") >> retParser(false)) !! Error("Invalid json boolean")

fun jsonUtf8EscapedCharParser()
  hexParser = txtHexParser(4);
  Parser(lambda (ParseState s) -> ParseResult{string}
    if s[0] == '"'  -> (s + 1).success("\"")
    if s[0] == '\\' -> (s + 1).success("\\")
    if s[0] == '/'  -> (s + 1).success("/")
    if s[0] == 'b'  -> (s + 1).success("\b")
    if s[0] == 'f'  -> (s + 1).success("\f")
    if s[0] == 'n'  -> (s + 1).success("\n")
    if s[0] == 'r'  -> (s + 1).success("\r")
    if s[0] == 't'  -> (s + 1).success("\t")
    if s[0] == 'u'  -> hexParser(s + 1).map(lambda (int unicode) toUtf8(UnicodePoint(unicode)))
    else            -> s.failure(Error("Invalid json character escape sequence"))
  )

fun jsonUtf8CharParser()
  escapedChar = jsonUtf8EscapedCharParser();
  Parser(lambda (ParseState s)
    if s[0].isControl()                   -> s.failure(Error("Unexpected character: '" + s[0].escapeForPrinting() + "'"))
    if s[0] == '"'                        -> s.failure(Error("Unexpected end of string"))
    if s[0] == '\\'                       -> escapedChar(s + 1)
    if utf8Validate(s.str, s.pos, false)  -> cc = s[0].utf8GetCharCount();
                                             (s + cc).success(s.str[s.pos, s.pos + cc])
    else                                  -> s.failure(Error("Invalid utf8 character"))
  )

fun jsonStringParser()
  quote = matchParser('"');
  (
    quote >> manyUntilParser(jsonUtf8CharParser(), quote).map(sum{string}) << quote
  ) ! Error("Invalid json string")

fun jsonObjectParser(Parser{JsonValue} valParser)
  open      = matchParser('{')    << whitespaceParser();
  key       = jsonStringParser()  << whitespaceParser() ! Error("Invalid object key");
  colon     = matchParser(':')    << whitespaceParser();
  value     = valParser           << whitespaceParser();
  comma     = matchParser(',')    << whitespaceParser() !! Error("Expected comma or end of object");
  close     = matchParser('}')    << whitespaceParser();
  keyValue  = (key << colon) & value;
  (open >> manyUntilParser(keyValue, comma, close) << close).map(toJsonObj)

fun jsonArrayParser(Parser{JsonValue} valParser)
  open  = matchParser('[')    << whitespaceParser();
  value = valParser           << whitespaceParser();
  comma = matchParser(',')    << whitespaceParser() !! Error("Expected comma or end of array");
  close = matchParser(']')    << whitespaceParser();
  (open >> manyUntilParser(value, comma, close) << close).map(toJsonArray)

fun jsonValueParser()
  objectP = jsonObjectParser(lazyParser(lazy jsonValueParser()));
  arrayP  = jsonArrayParser(lazyParser(lazy jsonValueParser()));
  stringP = jsonStringParser();
  nullP   = jsonNullParser();
  boolP   = jsonBoolParser();
  numberP = jsonNumberParser();
  Parser(lambda (ParseState s)
    if s[0] == '{'    -> objectP(s) .map(toJsonVal{JsonObject})
    if s[0] == '['    -> arrayP(s)  .map(toJsonVal{JsonArray})
    if s[0] == '"'    -> stringP(s) .map(toJsonVal{string})
    if s[0] == 'n'    -> nullP(s)   .map(toJsonVal{JsonNull})
    if s[0] == 't'    -> boolP(s)   .map(toJsonVal{bool})
    if s[0] == 'f'    -> boolP(s)   .map(toJsonVal{bool})
    if s[0].isDigit() -> numberP(s) .map(toJsonVal{float})
    if s[0] == '-'    -> numberP(s) .map(toJsonVal{float})
    if s[0] == '\0'   -> s.failure(Error("Missing json value"))
    else              -> s.failure(
      Error("Invalid start of json value: '" + s[0].escapeForPrinting() + "'"))
  )

fun jsonParser()
  jsonValueParser()

// -- Writers

fun jsonStringWriter()
  litWriter('"') & stringWriter().map(jsonStringEscape) & litWriter('"')

fun jsonObjectWriter(Writer{JsonValue} valWriter)
  keyValue = jsonStringWriter() & litWriter(": ") & valWriter;
  (
    litWriter('{')                                &
    newlineWriter()                               &
    indentedListWriter(keyValue, litWriter(','))  &
    indentWriter() & litWriter('}')
  ).map(toJsonObjFields)

fun jsonArrayWriter(Writer{JsonValue} valWriter)
  (
    litWriter('[')                                &
    newlineWriter()                               &
    indentedListWriter(valWriter, litWriter(',')) &
    indentWriter() & litWriter(']')
  ).map(toJsonArrayEntries)

fun jsonValueWriter()
  numWriter   = txtFloatWriter();
  boolWriter  = txtBoolWriter();
  strWriter   = jsonStringWriter();
  objWriter   = jsonObjectWriter(lazyWriter(lazy jsonValueWriter()));
  arrayWriter = jsonArrayWriter(lazyWriter(lazy jsonValueWriter()));
  Writer(lambda (WriterState s, JsonValue v)
    if v is JsonNull      -> s.write("null")
    if v as float f       -> numWriter(s, f)
    if v as bool b        -> boolWriter(s, b)
    if v as string str    -> strWriter(s, str)
    if v as JsonObject o  -> objWriter(s, o)
    if v as JsonArray a   -> arrayWriter(s, a)
  )

fun jsonWriter()
  jsonValueWriter()

// -- Parser Tests

assert(
  jsonStringEscape("\"Hello\nWorld\"") == "\\\"Hello\\nWorld\\\"" &&
  jsonStringEscape("\"\\\b\f\n\r\t") == "\\\"\\\\\\b\\f\\n\\r\\t" &&
  jsonStringEscape("ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ") == "ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ")

assert(
  p = jsonNullParser();
  p("")     is ParseFailure &&
  p("null") == JsonNull() &&
  p("NULL") is ParseFailure)

assert(
  p = jsonNumberParser();
  p("")             is ParseFailure &&
  p("123")          == 123.0 &&
  p("123.123")      == 123.123 &&
  p("-1")           == -1.0 &&
  p("-123.123")     == -123.123 &&
  p("0.123")        == .123 &&
  p("0E1")          == 0.0 &&
  p("0e1")          == 0.0 &&
  p("1E1")          == 10.0 &&
  p("1e1")          == 10.0 &&
  p("1E-3")         == .001 &&
  p("1e-3")         == .001 &&
  p("-123.123e-2")  == -1.23123 &&
  p("-123.123e+2")  == -12312.3 &&
  p("-123.123e2")   == -12312.3)

assert(
  p = jsonBoolParser();
  p("")       is ParseFailure &&
  p("true")   == true &&
  p("false")  == false &&
  p("TRUE")   is ParseFailure &&
  p("FALSE")  is ParseFailure)

assert(
  p = jsonUtf8EscapedCharParser();
  p("\"") == "\"" &&
  p("\\") == "\\" &&
  p("/")  == "/" &&
  p("b")  == "\b" &&
  p("f")  == "\f" &&
  p("n")  == "\n" &&
  p("r")  == "\r" &&
  p("t")  == "\t" &&
  p("u0026")  == "&" &&
  p("u039B")  == "Λ" &&
  p("u0E3F")  == "฿" &&
  p("u1D459") == "𝑙")

assert(
  p = jsonUtf8EscapedCharParser();
  p("a")      is ParseFailure &&
  p("ug")     is ParseFailure &&
  p("u123")   is ParseFailure &&
  p("u123G")  is ParseFailure &&
  p("u")      is ParseFailure)

assert(
  p = jsonUtf8CharParser();
  p("a")        == "a"  &&
  p("\\\"")     == "\"" &&
  p("\\u039B")  == "Λ"  &&
  p("\\u039b")  == "Λ"  &&
  p("฿")        == "฿"  &&
  p("𝑙") == "𝑙")

assert(
  p = jsonUtf8CharParser();
  p("\n")                       is ParseFailure &&
  p("\0")                       is ParseFailure &&
  p("")                         is ParseFailure &&
  p("\\u123G")                  is ParseFailure &&
  p(string(char(0b1000_0000)))  is ParseFailure)

assert(
  p = jsonStringParser();
  p("\"\"")                   == "" &&
  p("\"hello world\"")        == "hello world" &&
  p("\"hello\\nworld\"")      == "hello\nworld" &&
  p("\"hello\\u000Aworld\"")  == "hello\nworld")

assert(
  p = jsonStringParser();
  testStr = "STARGΛ̊TE,Hello world,Καλημέρα κόσμε,コンニチハ,⡌⠁⠧⠑ ⠼⠁⠒,ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ,ሰማይ አይታረስ ንጉሥ አይከሰስ።,แผ่นดินฮั่นเสื่อมโทรมแสนสังเวช,Зарегистрируйтесь,გთხოვთ ახლავე გაიაროთ⎪⎢⎜ ⎳aⁱ-bⁱ⎟⎥⎪▁▂▃▄▅▆▇█∀∂∈ℝ∧∪≡∞";
  p("\"" + testStr + "\"") == testStr)

assert(
  p = jsonStringParser();
  p("")         is ParseFailure &&
  p("\"")       is ParseFailure &&
  p("\"\n\"")   is ParseFailure &&
  p("hello\\a") is ParseFailure)

assert(
  p = jsonArrayParser(jsonValueParser());
  p("[]")           == toJsonArray(List{JsonValue}()) &&
  p("[    ]")       == toJsonArray(List{JsonValue}()) &&
  p("[1]")          == toJsonArray(toJsonVal(1.0)   :: List{JsonValue}()) &&
  p("[ 1]")         == toJsonArray(toJsonVal(1.0)   :: List{JsonValue}()) &&
  p("[ 1 ]")        == toJsonArray(toJsonVal(1.0)   :: List{JsonValue}()) &&
  p("[1,2]")        == toJsonArray(toJsonVal(1.0)   :: toJsonVal(2.0)) &&
  p("[ 1 , 2 ]")    == toJsonArray(toJsonVal(1.0)   :: toJsonVal(2.0)) &&
  p("[ true, 2 ]")  == toJsonArray(toJsonVal(true)  :: toJsonVal(2.0)) &&
  p("[ \"true\" , false, 2 ]") ==
    toJsonArray(
      toJsonVal("true") ::
      toJsonVal(false)  ::
      toJsonVal(2.0)    :: List{JsonValue}()) &&
  p("[ [1, 2], 2 ]") ==
    toJsonArray(
      toJsonVal(toJsonArray(toJsonVal(1.0) :: toJsonVal(2.0))) ::
      toJsonVal(2.0) :: List{JsonValue}()))

assert(
  p = jsonArrayParser(jsonValueParser());
  p("")             is ParseFailure &&
  p("[")            is ParseFailure &&
  p("[,")           is ParseFailure &&
  p("[,]")          is ParseFailure &&
  p("[233 123]")    is ParseFailure &&
  p("[233,]")       is ParseFailure &&
  p("[233 ,  ]")    is ParseFailure &&
  p("[233, 123 ,]") is ParseFailure)

assert(
  p = jsonObjectParser(jsonValueParser());
  p("{}")           == toJsonObj(List{Pair{string, JsonValue}}()) &&
  p("{\"key\":32}") == toJsonObj(Pair("key", toJsonVal(32.0)) :: List{Pair{string, JsonValue}}()) &&
  p("{ \"key\" : 32 }") == toJsonObj(Pair("key", toJsonVal(32.0)) :: List{Pair{string, JsonValue}}()))

assert(
  p = jsonObjectParser(jsonValueParser());
  p("{\"key1\":32,\"key2\":true}") ==
    toJsonObj(
      Pair("key1", toJsonVal(32.0)) ::
      Pair("key2", toJsonVal(true)) :: List{Pair{string, JsonValue}}()))

assert(
  p = jsonObjectParser(jsonValueParser());
  p("{\n\"key1\"\n:\n32\n,\n\"key2\"\n:\ntrue\n}") ==
    toJsonObj(
      Pair("key1", toJsonVal(32.0)) ::
      Pair("key2", toJsonVal(true)) :: List{Pair{string, JsonValue}}()))

assert(
  p = jsonObjectParser(jsonValueParser());
  p("{\"obj\":{\"k\":true}}") ==
    toJsonObj(
      Pair("obj", toJsonVal(toJsonObj(Pair("k", toJsonVal(true)) :: List{Pair{string, JsonValue}}()))) ::
      List{Pair{string, JsonValue}}()))

assert(
  p = jsonArrayParser(jsonValueParser());
  p("")               is ParseFailure &&
  p("{")              is ParseFailure &&
  p("{,")             is ParseFailure &&
  p("{,}")            is ParseFailure &&
  p("{\"key\" 123}")  is ParseFailure &&
  p("{\"key\":}")     is ParseFailure &&
  p("{\"key\":123,}") is ParseFailure)

// -- Writer Tests

assert(
  w = jsonStringWriter();
  w("hello world") == "\"hello world\"" &&
  w("hello\nworld") == "\"hello\\nworld\"")

assert(
  w = jsonObjectWriter(jsonValueWriter());
  w(toJsonObj(
      Pair("key1", toJsonVal(32.0)) ::
      Pair("key2", toJsonVal(true)) :: List{Pair{string, JsonValue}}())) ==
  "{\n  \"key1\": 32,\n  \"key2\": true\n}")

assert(
  w = jsonObjectWriter(jsonValueWriter());
  w(toJsonObj(
      Pair("obj", toJsonVal(toJsonObj(Pair("k", toJsonVal(true)) :: List{Pair{string, JsonValue}}()))) ::
      List{Pair{string, JsonValue}}())) ==
  "{\n  \"obj\": {\n    \"k\": true\n  }\n}")

assert(
  w = jsonArrayWriter(jsonValueWriter());
  w(toJsonArray(List{JsonValue}())) == "[\n]" &&
  w(toJsonArray(toJsonVal(1.0) :: List{JsonValue}())) == "[\n  1\n]" &&
  w(toJsonArray(toJsonVal(1.0) :: toJsonVal(true))) == "[\n  1,\n  true\n]")

assert(
  w = jsonValueWriter();
  w(toJsonVal(JsonNull()))    == "null"   &&
  w(toJsonVal(1.0))           == "1"      &&
  w(toJsonVal(1.1337))        == "1.1337" &&
  w(toJsonVal(true))          == "true"   &&
  w(toJsonVal("hello world")) == "\"hello world\"")

// -- Combination Tests

assert(
  str       = "{\n  \"files.encoding\": \"utf8\",\n  \"files.autoGuessEncoding\": false,\n  \"files.trimTrailingWhitespace\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.renderWhitespace\": \"all\",\n  \"editor.detectIndentation\": false,\n  \"editor.tabSize\": 2,\n  \"editor.rulers\": [\n    100\n  ],\n  \"clangd.semanticHighlighting\": true\n}";
  jParser   = jsonParser();
  jWriter   = jsonWriter();
  parseRes  = jParser(str);
  parseRes as ParseSuccess{JsonValue} suc &&
    ( writtenStr = jWriter(suc.val).string();
      writtenStr == str &&
      jParser(writtenStr) == suc.val))
