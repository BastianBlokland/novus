import "std/color.nov"
import "std/console.nov"
import "std/math.nov"
import "std/rt.nov"

// -- Utilities for interacting with a tty terminal using ANSI escape codes:
// https://en.wikipedia.org/wiki/ANSI_escape_code
//
// This does require your terminal to support ansi escape sequences and support utf8.
// On unix this means almost any terminal, on windows this means the new
// 'Windows Terminal': https://github.com/microsoft/terminal and configuring your system to use
// utf8: https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal

enum TermStyle =
  Reset           : 0,
  Bold            : 1,
  Underline       : 4,
  Reversed        : 7,
  FgBlack         : 30,
  FgRed           : 31,
  FgGreen         : 32,
  FgYellow        : 33,
  FgBlue          : 34,
  FgMagenta       : 35,
  FgCyan          : 36,
  FgWhite         : 37,
  BgBlack         : 40,
  BgRed           : 41,
  BgGreen         : 42,
  BgYellow        : 43,
  BgBlue          : 44,
  BgMagenta       : 45,
  BgCyan          : 46,
  BgWhite         : 47,
  FgBrightBlack   : 90,
  FgBrightRed     : 91,
  FgBrightGreen   : 92,
  FgBrightYellow  : 93,
  FgBrightBlue    : 94,
  FgBrightMagenta : 95,
  FgBrightCyan    : 96,
  FgBrightWhite   : 97,
  BgBrightBlack   : 100,
  BgBrightRed     : 101,
  BgBrightGreen   : 102,
  BgBrightYellow  : 103,
  BgBrightBlue    : 104,
  BgBrightMagenta : 105,
  BgBrightCyan    : 106,
  BgBrightWhite   : 107

enum TermDir = Up, Down, Right, Left

enum TermClearMode =
  CursorToEnd   : 0,
  CursorToStart : 1,
  All           : 2

enum TermOptions =
  NoEcho    : 0b01,
  NoBuffer  : 0b10

fun termEsc() char(27)

// -- Conversions

fun string(TermOptions o)
  ((o & TermOptions.NoEcho)   != 0 ? "[NoEcho]"   : "") +
  ((o & TermOptions.NoBuffer) != 0 ? "[NoBuffer]" : "")

// -- Get terminal size

act termGetWidth(Console c) -> Either{int, Error}
  w = intrinsic{term_getwidth}(c.stdOut);
  w >= 0 ? w : getPlatformError("Failed to get the terminal width")

act termGetHeight(Console c) -> Either{int, Error}
  h = intrinsic{term_getheight}(c.stdOut);
  h >= 0 ? h : getPlatformError("Failed to get the terminal height")

// -- Update the current style on the terminal.

act termStyle(TermStyle style) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termStyle(style))

act termStyle(Console c, TermStyle style) -> Option{Error}
  c.stdOut.termStyle(style)

act termStyle(sys_stream s, TermStyle style) -> Option{Error}
  actSeq(
    lazy s.write(termEsc()),
    lazy s.write('['),
    lazy s.write(string(style)),
    lazy s.write('m')
  ) ! Error("Failed to set terminal style")

// -- Set 8-bit color (if terminal supports it).

act termColor(Color color, bool background = false) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.stdOut.termColor(color, background))

act termColor(Console c, Color color, bool background = false) -> Option{Error}
  c.stdOut.termColor(color, background)

act termColor(sys_stream s, Color color, bool background = false) -> Option{Error}
  toDiscrete = ( lambda (float v)
    int(clamp(v, 0.0, 1.0) * 5.0 + 0.5)
  );
  col = 16 + 36 * toDiscrete(color.r) + 6 * toDiscrete(color.g) + toDiscrete(color.b);
  actSeq(
    lazy s.write(termEsc()),
    lazy s.write('['),
    lazy s.write(background ? "48" : "38"),
    lazy s.write(";5;"),
    lazy s.write(string(col)),
    lazy s.write('m')
  ) ! Error("Failed to set terminal color")

// -- Control the terminal cursor.

act termCursorMove(TermStyle s, TermDir dir, int amount) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termCursorMove(dir, amount))

act termCursorMove(Console c, TermDir dir, int amount) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('['),
    lazy c.stdOut.write(string(amount)),
    lazy c.stdOut.write(
      if dir == TermDir.Up    -> 'A'
      if dir == TermDir.Down  -> 'B'
      if dir == TermDir.Right -> 'C'
      else                    -> 'D')
  ) ! Error("Failed to move terminal cursor")

act termCursorCol(int column) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termCursorCol(column))

act termCursorCol(Console c, int column) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('['),
    lazy c.stdOut.write(string(column)),
    lazy c.stdOut.write('G')
  ) ! Error("Failed to set terminal cursor column")

act termCursorPos(int row, int column) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termCursorPos(row, column))

act termCursorPos(Console c, int row, int column) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('['),
    lazy c.stdOut.write(string(row)),
    lazy c.stdOut.write(';'),
    lazy c.stdOut.write(string(column)),
    lazy c.stdOut.write('H')
  ) ! Error("Failed to set terminal cursor position")

act termCursorShow(bool show) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termCursorShow(show))

act termCursorShow(Console c, bool show) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write("[?25"),
    lazy c.stdOut.write(show ? 'h' : 'l')
  ) ! Error(show ? "Failed to show terminal cursor" : "Failed to hide terminal cursor")

// -- Control alternate screen-buffer.

act termAltScreen(bool active) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termAltScreen(active))

act termAltScreen(Console c, bool active) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write("[?1049"),
    lazy c.stdOut.write(active ? 'h' : 'l')
  ) ! Error(active  ? "Failed to activate terminal alternative-screen"
                    : "Failed to disable terminal alternative-screen")

// -- Clear the terminal.

act termClearScreen(TermClearMode mode = TermClearMode.All) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termClearScreen(mode))

act termClearScreen(Console c, TermClearMode mode = TermClearMode.All) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('['),
    lazy c.stdOut.write(string(mode)),
    lazy c.stdOut.write('J')
  ) ! Error("Failed to clear the terminal screen")

act termClearLine(TermClearMode mode = TermClearMode.All) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termClearLine(mode))

act termClearLine(Console c, TermClearMode mode = TermClearMode.All) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('['),
    lazy c.stdOut.write(string(mode)),
    lazy c.stdOut.write('K')
  ) ! Error("Failed to clear the terminal line")

// -- Reset the terminal.

act termReset() -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termReset())

act termReset(Console c) -> Option{Error}
  actSeq(
    lazy c.stdOut.write(termEsc()),
    lazy c.stdOut.write('c')
  ) ! Error("Failed to reset the terminal")

// -- Set terminal control options

act termSetOptions(TermOptions opts) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termSetOptions(opts))

act termSetOptions(Console c, TermOptions opts) -> Option{Error}
  intrinsic{term_setoptions}(c.stdIn, int(opts))
    ? None()
    : getPlatformError("Failed to set terminal options: " + opts.string())

act termUnsetOptions(TermOptions opts) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) c.termUnsetOptions(opts))

act termUnsetOptions(Console c, TermOptions opts) -> Option{Error}
  intrinsic{term_unsetoptions}(c.stdIn, int(opts))
    ? None()
    : getPlatformError("Failed to unset terminal options: " + opts.string())

// -- Convenience overloads for print that set a style before and reset after printing.

act print{T}(T x, TermStyle style) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) -> Option{Error}
    actSeq(
      lazy c.stdOut.termStyle(style),
      lazy c.stdOut.write(x.string() + '\n'),
      lazy c.stdOut.termStyle(TermStyle.Reset),
      lazy c.stdOut.flush()
    )
  ) ! Error("Failed to write to the stdOut stream of the console")

act printErr{T}(T x, TermStyle style) -> Option{Error}
  consoleOpen().map(impure lambda (Console c) -> Option{Error}
    actSeq(
      lazy c.stdErr.termStyle(style),
      lazy c.stdErr.write(x.string() + '\n'),
      lazy c.stdErr.termStyle(TermStyle.Reset),
      lazy c.stdErr.flush()
    )
  ) ! Error("Failed to write to the stdErr stream of the console")
