import "std/console.nov"
import "std/math.nov"

// -- Utilities for interacting with a tty terminal using ANSI escape codes:
// https://en.wikipedia.org/wiki/ANSI_escape_code
//
// This does require your terminal to support ansi escape sequences and support utf8.
// On unix this means almost any terminal, on windows this means the new
// 'Windows Terminal': https://github.com/microsoft/terminal and configuring your system to use
// utf8: https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal

enum TermStyle =
  Reset           : 0,
  Bold            : 1,
  Underline       : 4,
  Reversed        : 7,
  FgBlack         : 30,
  FgRed           : 31,
  FgGreen         : 32,
  FgYellow        : 33,
  FgBlue          : 34,
  FgMagenta       : 35,
  FgCyan          : 36,
  FgWhite         : 37,
  BgBlack         : 40,
  BgRed           : 41,
  BgGreen         : 42,
  BgYellow        : 43,
  BgBlue          : 44,
  BgMagenta       : 45,
  BgCyan          : 46,
  BgWhite         : 47,
  FgBrightBlack   : 90,
  FgBrightRed     : 91,
  FgBrightGreen   : 92,
  FgBrightYellow  : 93,
  FgBrightBlue    : 94,
  FgBrightMagenta : 95,
  FgBrightCyan    : 96,
  FgBrightWhite   : 97,
  BgBrightBlack   : 100,
  BgBrightRed     : 101,
  BgBrightGreen   : 102,
  BgBrightYellow  : 103,
  BgBrightBlue    : 104,
  BgBrightMagenta : 105,
  BgBrightCyan    : 106,
  BgBrightWhite   : 107

enum TermDir = Up, Down, Right, Left

enum TermClearMode =
  CursorToEnd   : 0,
  CursorToStart : 1,
  All           : 2

enum TermOptions =
  NoEcho    : 0b01,
  NoBuffer  : 0b10

fun termEsc() char(27)

// -- Conversions

fun string(TermOptions o)
  ((o & TermOptions.NoEcho)   != 0 ? "[NoEcho]"   : "") +
  ((o & TermOptions.NoBuffer) != 0 ? "[NoBuffer]" : "")

// -- Update the current style on the terminal.

act termStyle(TermStyle style) -> Option{Error}
  consoleOpen().failOnError().termStyle(style)

act termStyle(Console c, TermStyle style) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())      &&
            c.stdOut.streamWrite('[')            &&
            c.stdOut.streamWrite(string(style))  &&
            c.stdOut.streamWrite('m');
  success ? none() : Error("Failed to set terminal style")


// -- Set 8-bit color (if terminal supports it).

act termColor(float r, float g, float b) -> Option{Error}
  termColor(r, g, b, false)

act termColor(float r, float g, float b, bool background) -> Option{Error}
  consoleOpen().failOnError().termColor(r, g, b, background)

act termColor(Console c, float r, float g, float b) -> Option{Error}
  c.termColor(r, g, b, false)

act termColor(Console c, float r, float g, float b, bool background) -> Option{Error}
  toDiscrete = ( lambda (float v)
    int(clamp(v, 0.0, 1.0) * 5.0 + 0.5)
  );
  col = 16 + 36 * toDiscrete(r) + 6 * toDiscrete(g) + toDiscrete(b);
  success = c.stdOut.streamWrite(termEsc())                  &&
            c.stdOut.streamWrite('[')                        &&
            c.stdOut.streamWrite(background ? "48" : "38")   &&
            c.stdOut.streamWrite(";5;")                      &&
            c.stdOut.streamWrite(string(col))                &&
            c.stdOut.streamWrite('m');
  success ? none() : Error("Failed to set terminal color")

// -- Control the terminal cursor.

act termCursorMove(TermStyle s, TermDir dir, int amount) -> Option{Error}
  consoleOpen().failOnError().termCursorMove(dir, amount)

act termCursorMove(Console c, TermDir dir, int amount) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())       &&
            c.stdOut.streamWrite('[')             &&
            c.stdOut.streamWrite(string(amount))  &&
            c.stdOut.streamWrite(
              if dir == TermDir.Up    -> 'A'
              if dir == TermDir.Down  -> 'B'
              if dir == TermDir.Right -> 'C'
              else                    -> 'D');
  success ? none() : Error("Failed to move terminal cursor")

act termCursorCol(int column) -> Option{Error}
  consoleOpen().failOnError().termCursorCol(column)

act termCursorCol(Console c, int column) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())      &&
            c.stdOut.streamWrite('[')            &&
            c.stdOut.streamWrite(string(column)) &&
            c.stdOut.streamWrite('G');
  success ? none() : Error("Failed to set terminal cursor column")

act termCursorPos(int row, int column) -> Option{Error}
  consoleOpen().failOnError().termCursorPos(row, column)

act termCursorPos(Console c, int row, int column) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())       &&
            c.stdOut.streamWrite('[')             &&
            c.stdOut.streamWrite(string(row))     &&
            c.stdOut.streamWrite(';')             &&
            c.stdOut.streamWrite(string(column))  &&
            c.stdOut.streamWrite('H');
  success ? none() : Error("Failed to set terminal cursor position")

act termCursorShow(bool show) -> Option{Error}
  consoleOpen().failOnError().termCursorShow(show)

act termCursorShow(Console c, bool show) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())         &&
            c.stdOut.streamWrite("[?25")            &&
            c.stdOut.streamWrite(show ? 'h' : 'l');
  success ? none() : Error(show ? "Failed to show terminal cursor" : "Failed to hide terminal cursor")

// -- Control alternate screen-buffer.

act termAltScreen(bool active) -> Option{Error}
  consoleOpen().failOnError().termAltScreen(active)

act termAltScreen(Console c, bool active) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())          &&
            c.stdOut.streamWrite("[?1049")           &&
            c.stdOut.streamWrite(active ? 'h' : 'l');
  success ? none() : Error(active ? "Failed to activate terminal alternative-screen"
                                  : "Failed to disable terminal alternative-screen")

// -- Clear the terminal.

act termClearScreen() -> Option{Error}
  termClearScreen(TermClearMode.All)

act termClearScreen(Console c) -> Option{Error}
  termClearScreen(c, TermClearMode.All)

act termClearScreen(TermClearMode mode) -> Option{Error}
  consoleOpen().failOnError().termClearScreen(mode)

act termClearScreen(Console c, TermClearMode mode) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())      &&
            c.stdOut.streamWrite('[')            &&
            c.stdOut.streamWrite(string(mode))   &&
            c.stdOut.streamWrite('J');
  success ? none() : Error("Failed to clear the terminal screen")

act termClearLine(TermClearMode mode) -> Option{Error}
  consoleOpen().failOnError().termClearLine(mode)

act termClearLine(Console c, TermClearMode mode) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc())      &&
            c.stdOut.streamWrite('[')            &&
            c.stdOut.streamWrite(string(mode))   &&
            c.stdOut.streamWrite('K');
  success ? none() : Error("Failed to clear the terminal line")

// -- Reset the terminal.

act termReset() -> Option{Error}
  consoleOpen().failOnError().termReset()

act termReset(Console c) -> Option{Error}
  success = c.stdOut.streamWrite(termEsc()) &&
            c.stdOut.streamWrite('c');
  success ? none() : Error("Failed to reset the terminal")

// -- Set terminal control options

act termSetOptions(TermOptions opts) -> Option{Error}
  consoleOpen().failOnError().termSetOptions(opts)

act termSetOptions(Console c, TermOptions opts) -> Option{Error}
  success = termSetOptions(int(opts));
  success ? none() : Error("Failed to set terminal options: " + opts.string())

act termUnsetOptions(TermOptions opts) -> Option{Error}
  consoleOpen().failOnError().termUnsetOptions(opts)

act termUnsetOptions(Console c, TermOptions opts) -> Option{Error}
  success = termUnsetOptions(int(opts));
  success ? none() : Error("Failed to clear terminal options: " + opts.string())

// -- Convenience overloads for print that set a style before and reset after printing.

act print{T}(T x, TermStyle style) -> Option{Error}
  c       = consoleOpen().failOnError();
  success =   c.stdOut.termStyle(style)            &&
              c.stdOut.streamWrite(x.string())     &&
              c.stdOut.termStyle(TermStyle.Reset)  &&
              c.stdOut.streamWrite('\n')           &&
              c.stdOut.streamFlush();
  success ? none() : Error("Failed to write to the stdOut stream of the console")

act printErr{T}(T x, TermStyle style) -> Option{Error}
  c       = consoleOpen().failOnError();
  success =   c.stdErr.termStyle(style)            &&
              c.stdErr.streamWrite(x.string())     &&
              c.stdErr.termStyle(TermStyle.Reset)  &&
              c.stdErr.streamWrite('\n')           &&
              c.stdErr.streamFlush();
  success ? none() : Error("Failed to write to the stdErr stream of the console")
