import "future.nov"
import "option.nov"
import "parallel.nov"

// -- Types

struct TcpConnection =
  sys_stream socket

struct TcpServer =
  sys_stream  socket,
  int         port

struct TcpServerLoopContext =
  action{TcpConnection, Option{Error}}  clientHandler,
  action{bool}                          predicate

// -- Constructors

fun TcpServerLoopContext(action{TcpConnection, Option{Error}} clientHandler)
  TcpServerLoopContext(
    clientHandler,
    impure lambda () !interuptIsRequested()
  )

// -- Connection

act write(TcpConnection c, string str) -> Option{Error}
  c.socket.write(str)
    ? none()
    : Error("Failed to write to the socket")

act write(TcpConnection c, char ch) -> Option{Error}
  c.socket.write(ch)
    ? none()
    : Error("Failed to write to the socket")

act write{T}(TcpConnection c, Writer{T} writer, T val) -> Option{Error}
  c.write(writer(val).string())

// -- Client

act tcpConnection(string host) -> Either{TcpConnection, Error}
  tcpConnection(host, 8080)

act tcpConnectionAsync(string host) -> future{Either{TcpConnection, Error}}
  fork tcpConnection(host)

act tcpConnection(string host, int port) -> Either{TcpConnection, Error}
  ipAddr = ipLookupAddress(host);
  socket = tcpOpenConnection(ipAddr, port);
  if socket.streamCheckValid()  -> TcpConnection(socket)
  else                          -> Error("Failed to open connection to: '" + host + ":" + port + "'")

act tcpConnectionAsync(string host, int port) -> future{Either{TcpConnection, Error}}
  fork tcpConnection(host, port)

// -- Server

act tcpServer() -> Either{TcpServer, Error}
  tcpServer(8080)

act tcpServer(int port) -> Either{TcpServer, Error}
  socket = tcpStartServer(port, -1);
  if socket.streamCheckValid() -> TcpServer(socket, port)
  else                         -> Error("Failed to start tcp-server")

act tcpAcceptConnection(TcpServer server) -> Either{TcpConnection, Error}
  socket = tcpAcceptConnection(server.socket);
  if socket.streamCheckValid()  -> TcpConnection(socket)
  else                          -> Error("Failed to accept new connection")

act tcpAcceptConnectionAsync(TcpServer server) -> future{Either{TcpConnection, Error}}
  fork server.tcpAcceptConnection()

act tcpServerLoop(int port, TcpServerLoopContext ctx) -> Option{Error}
  tcpServer(port).map(impure lambda (TcpServer svr) svr.tcpServerLoop(ctx))

act tcpServerLoop(TcpServer svr, TcpServerLoopContext ctx) -> Option{Error}
  loop = (impure lambda (
    future{Either{TcpConnection, Error}} futureConnection,
    List{future{Option{Error}}}          connections)

      if futureConnection.get(milliseconds(100)) as Either{TcpConnection, Error} newConnection ->
      (
        if newConnection as Error          err  -> err
        if newConnection as TcpConnection  c    ->
          self(svr.tcpAcceptConnectionAsync(), fork ctx.clientHandler(c) :: connections)
      )
      else ->
      (
        conErrOpt = connections.map(    impure lambda (future{Option{Error}} c) c.poll().unwrap()).combine();
        remCons   = connections.filter( impure lambda (future{Option{Error}} c) c.poll() is None);
        if conErrOpt as Error conErr  -> conErr
        if ctx.predicate()            -> self(futureConnection, remCons)
        else                          -> none()
      )
  );
  loop(
    svr.tcpAcceptConnectionAsync(),
    List{future{Option{Error}}}())

// -- Tests

assert(
  server    = tcpServer(5000).failOnError();
  client    = tcpConnection("127.0.0.1", 5000).failOnError();
  serverCon = server.tcpAcceptConnection().failOnError();

  serverCon.write("Hello world\n").failOnError();
  client.socket.readLine() == "Hello world"
)

assert(
  tcpServer(-1) is Error &&
  tcpServer(65536) is Error
)

assert(
  fork tcpServerLoop(5001, TcpServerLoopContext(impure lambda(TcpConnection c)
    c.write(c.socket.readLine() + '\n')
  ));
  client = (impure lambda(string message)
    c = tcpConnection("127.0.0.1", 5001).failOnError();
    c.write(message + '\n').failOnError();
    c.socket.readLine()
  );
  parallelFor(100, impure lambda (int i)
    msg = string("Hello from the network", i);
    client(msg) == msg
  ).all()
)

assert(
  server = tcpServer(5002).failOnError();
  client = tcpConnection("127.0.0.1", 5002).failOnError();

  res = tcpServerLoop(server, TcpServerLoopContext(impure lambda(TcpConnection c)
    some(Error("Did not go well"))
  ));
  res == Error("Did not go well")
)

assert(
  server = tcpServer(5003).failOnError();
  client = tcpConnection("127.0.0.1", 5003).failOnError();

  clientHandler = (impure lambda (TcpConnection c)
    c.write("hello")
  );
  predicate = (impure lambda () false
  );
  tcpServerLoop(server, TcpServerLoopContext(clientHandler, predicate)) is None
)
