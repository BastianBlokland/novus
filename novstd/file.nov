import "std/path.nov"
import "std/stream.nov"

// -- Actions

enum FileMode = Create : 0, Open, Append

enum FileFlags = None : 0, AutoRemove : 1

act fileOpen(Path p, FileMode m)
  fileOpen(p, m, FileFlags.None)

act fileOpen(Path p, FileMode m, FileFlags flags)
  fileOpenStream(p.string(), int(m) | flags << 8)

act fileExists(Path p)
  fileOpen(p, FileMode.Open).streamCheckValid()

act fileRemove(Path p)
  fileRemove(p.string())

act fileRead(Path p)
  fileOpen(p, FileMode.Open).readToEnd()

act fileWrite(Path p, string str)
  f = fileOpen(p, FileMode.Create);
  f.streamWrite(str);
  f.streamFlush()

act fileAppend(Path p, string str)
  f = fileOpen(p, FileMode.Append);
  f.streamWrite(str);
  f.streamFlush()

// -- Tests

assert(
  p = getPathCurrent() / "file-test1.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove);
  f.streamWrite("hello world");
  f.streamFlush();
  fileRead(p) == "hello world")

assert(
  p = getPathCurrent() / "file-test2.tmp";
  f = fileOpen(p, FileMode.Append, FileFlags.AutoRemove);
  f.streamWrite("hello world");
  f.streamWrite("hello world");
  f.streamWrite("hello world");
  f.streamFlush();
  fileRead(p) == "hello worldhello worldhello world")

assert(
  p = getPathCurrent() / "file-test3.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove);
  fileExists(p))

assert(!fileRemove(getPathCurrent() / "non-existing-file"))
