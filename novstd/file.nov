import "std/json.nov"
import "std/path.nov"
import "std/stream.nov"

// -- Types

enum FileMode =
  Create : 0,
  Open,
  Append

enum FileFlags =
  None       : 0b0,
  AutoRemove : 0b1

struct File =
  Path        path,
  FileMode    mode,
  FileFlags   flags,
  sys_stream  stream

// -- Actions

act fileOpen(Path p, FileMode m) -> Either{File, Error}
  fileOpen(p, m, FileFlags.None)

act fileOpen(Path p, FileMode m, FileFlags flags) -> Either{File, Error}
  absPath     = p.getPathAbsolute();
  absPathStr  = absPath.string();
  stream      = fileOpenStream(absPathStr, int(m) | flags << 8);
  if stream.streamCheckValid()  -> File(absPath, m, flags, stream)
  else                          -> Error("Failed to open file: '" + absPathStr + "'")

act readToEnd(File f) -> string
  f.stream.readToEnd()

act readToEnd{T}(File f, Parser{T} parser) -> Either{T, Error}
  parser.run(f.readToEnd())

act write(File f, string str) -> Option{Error}
  f.stream.streamWrite(str) && f.stream.streamFlush()
    ? none()
    : some(Error("Failed to write to file"))

act write{T}(File f, Writer{T} writer, T val) -> Option{Error}
  f.write(writer(val).string())

act fileRead(Path p) -> Either{string, Error}
  p.fileOpen(FileMode.Open).map(impure lambda (File f) f.readToEnd())

act fileRead{T}(Path p, Parser{T} parser) -> Either{T, Error}
  p.fileOpen(FileMode.Open).map(impure lambda (File f) f.readToEnd(parser))

act fileWrite(Path p, string str) -> Option{Error}
  p.fileOpen(FileMode.Create).map(impure lambda (File f) f.write(str))

act fileWrite{T}(Path p, Writer{T} writer, T val) -> Option{Error}
  p.fileOpen(FileMode.Create).map(impure lambda (File f) f.write(writer, val))

act fileAppend(Path p, string str) -> Option{Error}
  p.fileOpen(FileMode.Append).map(impure lambda (File f) f.write(str))

act fileAppend{T}(Path p, Writer{T} writer, T val) -> Option{Error}
  p.fileOpen(FileMode.Append).map(impure lambda (File f) f.write(writer, val))

act fileRemove(Path p) -> Option{Error}
  absPath     = p.getPathAbsolute();
  absPathStr  = absPath.string();
  fileRemove(absPathStr)
    ? none()
    : some(Error("Failed to remove file: '" + absPathStr + "'"))

// -- Tests

assert(
  p = getPathCurrent() / "file-test1.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write("hello world")
  );
  fileRead(p) == "hello world")

assert(
  p = getPathCurrent() / "file-test2.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write("hello world");
      f.write("hello world");
      f.write("hello world")
  );
  fileRead(p) == "hello worldhello worldhello world")

assert(
  json  = JsonValue(toJsonArray(toJsonVal(true) :: toJsonVal(2.0)));
  p     = getPathCurrent() / "file-test3.tmp";
  f     = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write(jsonWriter(), json)
  );
  fileRead(p, jsonParser()) == json)

assert(
  p = getPathCurrent() / "file-test4.tmp";
  fileOpen(p, FileMode.Create, FileFlags.AutoRemove) is File)

assert(
  p = getPathCurrent() / "file-test5.tmp";
  fileOpen(p, FileMode.Open) is Error)

assert(
  p = getPathCurrent() / "file-test6.tmp";
  fileOpen(p, FileMode.Append, FileFlags.AutoRemove) is File)

assert(fileRemove(getPathCurrent() / "non-existing-file") is Error)
