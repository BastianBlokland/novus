import "stream.nov"

// -- Path
// Represents a path on the filesystem.

struct Path = string str

fun +(Path p1, Path p2)   Path(p1.str + p2.str)
fun ::(Path p1, Path p2)  Path(p1.str + "/" + p2.str)

fun isEmpty(Path p) p.str.length() == 0

fun string(Path p) p.str

// -- Actions

enum FileMode = Create : 0, Open, Append

enum FileFlags = None : 0, AutoRemove : 1

act fileOpen(Path p, FileMode m)
  fileOpen(p, m, FileFlags.None)

act fileOpen(Path p, FileMode m, FileFlags flags)
  fileOpenStream(p.str, int(m) | flags << 8)

act fileExists(Path p)
  fileOpen(p, FileMode.Open).streamCheckValid()

act fileRemove(Path p)
  fileRemove(p.str)

act readFile(Path p)
  fileOpen(p, FileMode.Open).read()

act writeFile(Path p, string str)
  f = fileOpen(p, FileMode.Create);
  f.streamWrite(str);
  f.streamFlush()

act appendFile(Path p, string str)
  f = fileOpen(p, FileMode.Append);
  f.streamWrite(str);
  f.streamFlush()

// -- Tests

assert(Path("").isEmpty())

assert(
  p = Path("file-test1.tmp");
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove);
  f.streamWrite("hello world");
  f.streamFlush();
  readFile(p) == "hello world")

assert(
  p = Path("file-test2.tmp");
  f = fileOpen(p, FileMode.Append, FileFlags.AutoRemove);
  f.streamWrite("hello world");
  f.streamWrite("hello world");
  f.streamWrite("hello world");
  f.streamFlush();
  readFile(p) == "hello worldhello worldhello world")

assert(
  p = Path("file-test3.tmp");
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove);
  fileExists(p))

assert(
  p = Path("file-test4.tmp");
  f = fileOpen(p, FileMode.Create);
  fileRemove(p);
  !fileExists(p))

