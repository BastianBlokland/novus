import "option.nov"

// Types

union List{T} = LNode{T},  LEnd

struct LNode{T} = T val, List{T} next
struct LEnd

// Constructors

fun List{T}() -> List{T}
  LEnd()

fun List{T}(T val) -> List{T}
  LNode(val, List{T}())

fun List{T}(T val, List{T} next) -> List{T}
  LNode(val, next)

// Operators

fun ::{T}(T val, List{T} l)
  l.pushFront(val)

fun ::{T}(List{T} l1, List{T} l2)
  l2.pushFront(l1)

fun ::{T}(Option{T} opt, List{T} l)
  if opt as T val -> l.pushFront(val)
  if opt is None  -> l

fun []{T}(List{T} l, int idx) -> Option{T}
  l.popFront(idx).front()

fun []{T}(List{T} l, int startIdx, int endIdx) -> List{T}
  l.popFront(startIdx).take(endIdx - startIdx + 1)

// Conversions

fun string{T}(List{T} l)
  l.string("[", ",", "]")

fun string{T}(List{T} l, string start, string sep, string end)
  start + l.fold(lambda (string prefix, T v) prefix == "" ?
    v.string() :
    prefix + sep + v.string()) + end

// Functions

fun isEmpty{T}(List{T} l)
  l is LEnd

fun front{T}(List{T} l) -> Option{T}
  l as LNode{T} n ? n.val : None()

fun back{T}(List{T} l) -> Option{T}
  if l as LNode{T} n  -> n.next is LEnd ? n.val : back(n.next)
  if l is LEnd        -> None()

fun pushFront{T}(List{T} l, T val)
  List(val, l)

fun pushFront{T}(List{T} l, List{T} l2)
  if l2 as LNode{T} n -> List{T}(n.val, pushFront(l, n.next))
  if l2 is LEnd       -> l

fun pushFrontRange{T}(List{T} l, T start, T end)
  if start >= end   -> List(start, l)
  else              -> pushFrontRange(end :: l, start, --end)

fun pushBack{T}(List{T} l, T val)
  if l as LNode{T} n  -> List(n.val, n.next.pushBack(val))
  if l is LEnd        -> List(val)

fun popFront{T}(List{T} l)
  popFront(l, 1)

fun popFront{T}(List{T} l, int amount)
  if l as LNode{T} n  -> amount > 0 ? popFront(n.next, --amount) : l
  if l is LEnd        -> l

fun popFront{T}(List{T} l, delegate{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) ? popFront(n.next, pred) : l
  if l is LEnd        -> l

fun popBack{T}(List{T} l)
  popBack(l, 1)

fun popBack{T}(List{T} l, int amount)
  l.take(l.length() - amount)

fun take{T}(List{T} l, int amount)
  if l as LNode{T} n  -> amount > 0 ? List{T}(n.val, take(n.next, --amount)) : List{T}()
  if l is LEnd        -> l

fun take{T}(List{T} l, delegate{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) ? List{T}(n.val, take(n.next, pred)) : List{T}()
  if l is LEnd        -> l

fun insert{T}(List{T} l, int idx, T val)
  l.take(idx) :: val :: l.popFront(idx)

fun insertOrdered{T}(List{T} l, T val)
  if l as LNode{T} n -> val < n.val ? List(val, l) : List(n.val, insertOrdered(n.next, val))
  if l is LEnd       -> List(val)

fun rangeList{T}(T start, T end)
  List{T}().pushFrontRange(start, end)

fun fold{T, TResult}(List{T} l, delegate{TResult, T, TResult} del)
  l.fold(del, TResult())

fun fold{T, TResult}(List{T} l, delegate{TResult, T, TResult} del, TResult val)
  if l as LNode{T} n -> n.next.fold(del, del(val, n.val))
  if l is LEnd       -> val

fun foldRight{T, TResult}(List{T} l, delegate{TResult, T, TResult} del)
  l.foldRight(del, TResult())

fun foldRight{T, TResult}(List{T} l, delegate{TResult, T, TResult} del, TResult val)
  if l as LNode{T} n -> del(n.next.foldRight(del, val), n.val)
  if l is LEnd       -> val

fun filter{T}(List{T} l, delegate{T, bool} pred)
  l.foldRight(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun filterReverse{T}(List{T} l, delegate{T, bool} pred)
  l.fold(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun map{T, TResult}(List{T} l, delegate{T, TResult} del)
  l.foldRight(lambda (List{TResult} newList, T val) del(val) :: newList)

fun mapReverse{T, TResult}(List{T} l, delegate{T, TResult} del)
  l.fold(lambda (List{TResult} newList, T val) del(val) :: newList)

fun length{T}(List{T} l)
  l.fold(lambda (int c, T val) c + 1)

fun sum{T}(List{T} l)
  l.fold(lambda (T s, T val) s + val)

fun reverse{T}(List{T} l)
  l.fold(lambda (List{T} newList, T val) val :: newList)

fun sort{T}(List{T} l)
  l.fold(insertOrdered{T})

fun contains{T}(List{T} l, T val)
  if l as LNode{T} n  -> n.val == val || n.next.contains(val)
  if l is LEnd        -> false

fun count{T}(List{T} l, delegate{T, bool} pred)
  l.fold(lambda (int c, T val) pred(val) ? ++c : c)

fun any{T}(List{T} l, delegate{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) || n.next.any(pred)
  if l is LEnd        -> false

fun all{T}(List{T} l, delegate{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) && n.next.any(pred)
  if l is LEnd        -> true

fun none{T}(List{T} l, delegate{T, bool} pred)
  if l as LNode{T} n  -> !pred(n.val) && n.next.none(pred)
  if l is LEnd        -> true

// Tests

assert(List(42) == List(42))
assert(List(42) != List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l == 1 :: 2 :: List(3) &&
  l != 3 :: 2 :: 1 :: List{int}() &&
  l != List(42))

assert(Option(42) :: List{int}() == List(42))
assert(Option{int}() :: List{int}() == List{int}())

assert(
  l1 = 1 :: 2 :: 3 :: List{int}();
  l2 = 10 :: 9 :: 8 :: List{int}();
  l1 :: l2 :: l1 == 1 :: 2 :: 3 :: 10 :: 9 :: 8 :: 1 :: 2 :: 3 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l[-1] == 1 && l[0] == 1 && l[1] == 2 && l[2] == 3 && l[4] == None())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l[0, -1] == List{int}() &&
  l[0, 0] == 1 :: List{int}() &&
  l[0, 1] == 1 :: 2 :: List{int}() &&
  l[0, 2] == 1 :: 2 :: 3 :: List{int}() &&
  l[0, 2] == 1 :: 2 :: 3 :: List{int}() &&
  l[1, 2] == 2 :: 3 :: List{int}() &&
  l[2, 1] == List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.string() == "[1,2,3]" && l.string("", "", "") == "123")
assert(
  l = "hello" :: "world" :: List{string}();
  l.string() == "[hello,world]" && l.string("", "", "") == "helloworld")
assert(string(List{int}()) == "[]")

assert(List{int}().isEmpty() && !List{int}(42).isEmpty() && List{int}(42).popFront().isEmpty())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.front() ?? -1 == 1 && l.back() ?? -1 == 3)
assert(
  l = List{int}();
  l.front() is None && l.back() is None)

assert(pushFront(List{int}(), 42) == List(42))
assert(pushFront(2 :: 3 :: List{int}(), 1) == 1 :: 2 :: 3 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.pushFront(List(42)) == 42 :: 1 :: 2 :: 3 :: List{int}() &&
  l.pushFront(42 :: 1337 :: List{int}()) == 42 :: 1337 :: 1 :: 2 :: 3 :: List{int}() &&
  l.pushFront(3 :: 2 :: 1 :: List{int}()) == 3 :: 2 :: 1 :: 1 :: 2 :: 3 :: List{int}())

assert(
  l = 42 :: 1337 :: List{int}();
  l.pushFrontRange(1, 3) == 1 :: 2 :: 3 :: 42 :: 1337 :: List{int}())

assert(pushBack(List{int}(), 42) == List(42))
assert(pushBack(1 :: 2 :: List{int}(), 3) == 1 :: 2 :: 3 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: List{int}();
  l.popFront() == 2 :: 3 :: 4 :: List{int}() &&
  l.popFront(-1) == l &&
  l.popFront(0) == l &&
  l.popFront(1) == 2 :: 3 :: 4 :: List{int}() &&
  l.popFront(2) == 3 :: 4 :: List{int}() &&
  l.popFront(3) == 4 :: List{int}() &&
  l.popFront(4) == List{int}() &&
  l.popFront(5) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: List{int}();
  l.popFront(lambda (int i) i == 0) == l &&
  l.popFront(lambda (int i) i > 0) == List{int}() &&
  l.popFront(lambda (int i) i == 1) == 2 :: 3 :: 4 :: List{int}() &&
  l.popFront(lambda (int i) i < 3) == 3 :: 4 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.take(-1) == List{int}() &&
  l.take(0) == List{int}() &&
  l.take(1) == 1 :: List{int}() &&
  l.take(2) == 1 :: 2 :: List{int}() &&
  l.take(3) == 1 :: 2 :: 3 :: List{int}() &&
  l.take(4) == 1 :: 2 :: 3 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.take(lambda (int i) i == 0) == List{int}() &&
  l.take(lambda (int i) i > 0) == l &&
  l.take(lambda (int i) i < 3) == 1 :: 2 :: List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: List{int}();
  l.popBack() == 1 :: 2 :: 3 :: List{int}() &&
  l.popBack(-1) == l &&
  l.popBack(0) == l &&
  l.popBack(1) == 1 :: 2 :: 3 :: List{int}() &&
  l.popBack(2) == 1 :: 2 :: List{int}() &&
  l.popBack(3) == 1 :: List{int}() &&
  l.popBack(4) == List{int}() &&
  l.popBack(5) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.insert(-1, 42) == 42 :: 1 :: 2 :: 3 :: List{int}() &&
  l.insert(0, 42) == 42 :: 1 :: 2 :: 3 :: List{int}() &&
  l.insert(1, 42) == 1 :: 42 :: 2 :: 3 :: List{int}() &&
  l.insert(2, 42) == 1 :: 2 :: 42 :: 3 :: List{int}() &&
  l.insert(3, 42) == 1 :: 2 :: 3 :: 42 :: List{int}() &&
  l.insert(4, 42) == 1 :: 2 :: 3 :: 42 :: List{int}())

assert(
  l = 1 :: 4 :: 5 :: List{int}();
  l.insertOrdered(0) == 0 :: 1 :: 4 :: 5 :: List{int}() &&
  l.insertOrdered(1) == 1 :: 1 :: 4 :: 5 :: List{int}() &&
  l.insertOrdered(2) == 1 :: 2 :: 4 :: 5 :: List{int}() &&
  l.insertOrdered(6) == 1 :: 4 :: 5 :: 6 :: List{int}() &&
  l.insertOrdered(99) == 1 :: 4 :: 5 :: 99 :: List{int}())

assert(rangeList(1, 3) == 1 :: 2 :: 3 :: List{int}())
assert(rangeList('a', 'c') == 'a' :: 'b' :: 'c' :: List{char}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: List{int}();
  l.filter(lambda (int v) v > 2) == 3 :: 4 :: List{int}() &&
  l.filter(lambda (int v) v < 0) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: 5 :: List{int}();
  l.filterReverse(lambda (int v) v > 2) == 5 :: 4 :: 3 :: List{int}() &&
  l.filterReverse(lambda (int v) v < 0) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.map(lambda (int v) v * 2) == 2 :: 4 :: 6 :: List{int}() &&
  l.map(lambda (int v) v.string()) == "1" :: "2" :: "3" :: List{string}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.mapReverse(lambda (int v) v * 2) == 6 :: 4 :: 2 :: List{int}() &&
  l.mapReverse(lambda (int v) v.string()) == "3" :: "2" :: "1" :: List{string}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.length() == 3)
assert(length(List{int}()) == 0)

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.sum() == 6)
assert(
  l = 0.1 :: 1.0 :: 1.1 :: List{float}();
  l.sum() == 2.2)
assert(
  l = "hello" :: " " :: "world" :: List{string}();
  l.sum() == "hello world")
assert(List{int}().sum() == 0)

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.reverse() == 3 :: 2 :: 1 :: List{int}())
assert(List{int}().reverse() == List{int}())

assert(
  l = 42 :: 1337 :: -42 :: -5 :: List{int}();
  l.sort() == -42 :: -5 :: 42 :: 1337 :: List{int}())
assert(List{int}().sort() == List{int}())

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.contains(1) && l.contains(2) && l.contains(3) && !l.contains(4))

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.count(lambda (int v) v > 2) == 1 &&
  l.count(lambda (int v) v == 0) == 0 &&
  l.count(lambda (int v) v > 0) == 3)

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.any(lambda (int v) v > 2) && !l.any(lambda (int v) v < 0))

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.all(lambda (int v) v > 0) && !l.all(lambda (int v) v > 1))

assert(
  l = 1 :: 2 :: 3 :: List{int}();
  l.none(lambda (int v) v < 0) && !l.none(lambda (int v) v > 1))
