import "std/either.nov"
import "std/option.nov"
import "std/pair.nov"

// -- Types

union List{T} = LNode{T},  LEnd

struct LNode{T} = T val, List{T} next
struct LEnd

// -- Constructors

fun List{T}() -> List{T}
  LEnd()

fun List{T}(T val) -> List{T}
  LNode(val, List{T}())

fun List{T}(T val, List{T} next) -> List{T}
  LNode(val, next)

// -- Operators

fun ::{T}(T val1, T val2)
 val1 :: List{T}(val2)

fun ::{T}(List{T} l1, T val)
  List{T}(val).push(l1)

fun ::{T}(T val, List{T} l)
  l.push(val)

fun ::{T}(List{T} l1, List{T} l2)
  l2.push(l1)

fun ::{T}(Option{T} opt, List{T} l)
  if opt as T val -> l.push(val)
  if opt is None  -> l

fun []{T}(List{T} l, int idx) -> Option{T}
  l.pop(idx).front()

fun []{T}(List{T} l, int startIdx, int endIdx) -> List{T}
  l.pop(startIdx).take(endIdx - startIdx)

// -- Conversions

fun string{T}(List{T} l)
  l.string("[", ",", "]")

fun string{T}(List{T} l, string start, string sep, string end)
  start + l.fold(lambda (string prefix, bool last, T v)
    last ? prefix + v.string() : prefix + v.string() + sep) + end

// -- Functions

fun isEmpty{T}(List{T} l)
  l is LEnd

fun front{T}(List{T} l) -> Option{T}
  l as LNode{T} n ? n.val : None()

fun back{T}(List{T} l) -> Option{T}
  if l as LNode{T} n  -> n.next is LEnd ? n.val : back(n.next)
  if l is LEnd        -> None()

fun push{T}(List{T} l, T val)
  List(val, l)

fun push{T}(List{T} l, List{T} l2)
  if l2 as LNode{T} n -> List{T}(n.val, push(l, n.next))
  if l2 is LEnd       -> l

fun pushUnique{T}(List{T} l, T val)
  l.contains(val) ? l : l.push(val)

fun pushRange{T}(List{T} l, T start, T end)
  if start >= end -> l
  else            -> pushRange(--end :: l, start, --end)

fun pushRangeReverse{T}(List{T} l, T start, T end)
  if start >= end -> l
  else            -> pushRangeReverse(start :: l, ++start, end)

fun pushBack{T}(List{T} l, T val)
  if l as LNode{T} n  -> List(n.val, n.next.pushBack(val))
  if l is LEnd        -> List(val)

fun pop{T}(List{T} l)
  pop(l, 1)

fun pop{T}(List{T} l, int amount)
  if l as LNode{T} n  -> amount > 0 ? pop(n.next, --amount) : l
  if l is LEnd        -> l

fun pop{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) ? pop(n.next, pred) : l
  if l is LEnd        -> l

fun popBack{T}(List{T} l)
  popBack(l, 1)

fun popBack{T}(List{T} l, int amount)
  l.take(l.length() - amount)

fun take{T}(List{T} l, int amount)
  if l as LNode{T} n  -> amount > 0 ? List{T}(n.val, take(n.next, --amount)) : List{T}()
  if l is LEnd        -> l

fun take{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) ? List{T}(n.val, take(n.next, pred)) : List{T}()
  if l is LEnd        -> l

fun insert{T}(List{T} l, int idx, T val)
  l.take(idx) :: val :: l.pop(idx)

fun insertOrdered{T}(List{T} l, T val)
  if l as LNode{T} n -> val < n.val ? List(val, l) : List(n.val, insertOrdered(n.next, val))
  if l is LEnd       -> List(val)

fun rangeList{T}(T start, T end)
  List{T}().pushRange(start, end)

fun rangeListReverse{T}(T start, T end)
  List{T}().pushRangeReverse(start, end)

fun gridList{T}(T width, T height)
  makeGrid = (lambda (T x, T y, List{Pair{T, T}} result)
      if y < T()  -> result
      if x < T()  -> self(--width, --y, result)
      else        -> self(--x, y, Pair(x, y) :: result)
  );
  makeGrid(--width, --height, List{Pair{T, T}}())

fun gridListReverse{T}(T width, T height)
  makeGrid = (lambda (T x, T y, List{Pair{T, T}} result)
      if y >= height  -> result
      if x >= width   -> self(T(), ++y, result)
      else            -> self(++x, y, Pair(x, y) :: result)
  );
  makeGrid(T(), T(), List{Pair{T, T}}())

fun fold{T, TResult}(List{T} l, function{TResult, T, TResult} func)
  fold(l, func, TResult())

fun fold{T, TResult}(List{T} l, function{TResult, T, TResult} func, TResult result)
  if l as LNode{T} n -> fold(n.next, func, func(result, n.val))
  if l is LEnd       -> result

fun fold{T, TResult}(List{T} l, function{TResult, bool, T, TResult} func)
  fold(l, func, TResult())

fun fold{T, TResult}(List{T} l, function{TResult, bool, T, TResult} func, TResult result)
  if l as LNode{T} n -> fold(n.next, func, func(result, n.next is LEnd, n.val))
  if l is LEnd       -> result

fun foldRight{T, TResult}(List{T} l, function{TResult, T, TResult} func)
  foldRight(l, func, TResult())

fun foldRight{T, TResult}(List{T} l, function{TResult, T, TResult} func, TResult result)
  if l as LNode{T} n -> func(foldRight(n.next, func, result), n.val)
  if l is LEnd       -> result

fun filter{T}(List{T} l, function{T, bool} pred)
  l.foldRight(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun filterReverse{T}(List{T} l, function{T, bool} pred)
  l.fold(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun filterNone{T}(List{Option{T}} l)
  l.foldRight(lambda (List{T} newList, Option{T} val) val as T t ? t :: newList : newList)

fun filterNoneReverse{T}(List{Option{T}} l)
  l.fold(lambda (List{T} newList, Option{T} val) val as T t ? t :: newList : newList)

fun map{T, TResult}(List{T} l, function{T, TResult} func)
  l.foldRight(lambda (List{TResult} newList, T val) func(val) :: newList)

fun mapReverse{T, TResult}(List{T} l, function{T, TResult} func)
  l.fold(lambda (List{TResult} newList, T val) func(val) :: newList)

fun map{T, TResult}(List{T} l, function{T, Option{TResult}} a)
  l.foldRight(lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

fun mapReverse{T, TResult}(List{T} l, function{T, Option{TResult}} a)
  l.fold(lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

fun length{T}(List{T} l)
  l.fold(lambda (int c, T val) c + 1)

fun sum{T}(List{T} l)
  l.fold(lambda (T s, T val) s + val)

fun reverse{T}(List{T} l)
  l.fold(lambda (List{T} newList, T val) val :: newList)

fun sort{T}(List{T} l)
  l.fold(insertOrdered{T})

fun distinct{T}(List{T} l)
  l.fold(pushUnique{T}).reverse()

fun distinctReverse{T}(List{T} l)
  l.fold(pushUnique{T})

fun count{T}(List{T} l, function{T, bool} pred)
  l.fold(lambda (int c, T val) pred(val) ? ++c : c)

fun any{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) || n.next.any(pred)
  if l is LEnd        -> false

fun any(List{bool} l)
  if l as LNode{bool} n -> n.val || n.next.any()
  if l is LEnd          -> false

fun all{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) && n.next.all(pred)
  if l is LEnd        -> true

fun all(List{bool} l)
  if l as LNode{bool} n -> n.val && n.next.all()
  if l is LEnd          -> true

fun none{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> !pred(n.val) && n.next.none(pred)
  if l is LEnd        -> true

fun contains{T}(List{T} l, T item)
  if l as LNode{T} n  -> n.val == item || n.next.contains(item)
  if l is LEnd        -> false

fun for{T, TResult}(T from, T to, function{T, TResult} func)
  rangeList(from, to).map(func)

fun for{T, TResult}(T to, function{T, TResult} func)
  rangeList(T(), to).map(func)

fun zip{T1, T2, TResult}(List{T1} a, List{T2} b, function{TResult, T1, T2, TResult} func)
  zip(a, b, func, TResult())

fun zip{T1, T2, TResult}(
  List{T1} a, List{T2} b, function{TResult, T1, T2, TResult} func, TResult result)
  if a as LNode{T1} nA && b as LNode{T2} nB ->
    zip(nA.next, nB.next, func, func(result, nA.val, nB.val))
  else -> result

fun zip{T, TResult}(List{List{T}} l, function{TResult, List{T}, TResult} func)
  l.zip(func, TResult())

fun zip{T, TResult}(List{List{T}} l, function{TResult, List{T}, TResult} func, TResult result)
  getFronts = (lambda (List{List{T}} l, List{T} result)
    if l as LNode{List{T}} n -> n.val as LNode{T} f ? self(n.next, f.val :: result) : List{T}()
    if l is LEnd             -> result
  );
  fronts = getFronts(l, List{T}());
  if fronts.isEmpty() -> result
  else                -> nexts = l.map(lambda (List{T} cur) cur.pop(1));
                         zip(nexts, func, func(result, fronts))

fun split{T1, T2}(List{Either{T1, T2}} l)
  l.reverse().splitReverse()

fun splitReverse{T1, T2}(List{Either{T1, T2}} l)
  l.fold(
    lambda (Pair{List{T1}, List{T2}} res, Either{T1, T2} elem)
      makePair(
        elem as T1 t1 ? (t1 :: res.first)   : res.first,
        elem as T2 t2 ? (t2 :: res.second)  : res.second
      )
    , makePair(List{T1}(), List{T2}()))

// The default equality uses stack size linear with the list length, so for large lists its
// ineffiecient / impossible to use the default equality. This is an alternative that uses
// constant stack space.
fun listEqual{T}(List{T} l1, List{T} l2)
  if l1 as LNode{T} n1 && l2 as LNode{T} n2 && n1.val == n2.val   -> self(n1.next, n2.next)
  if l1 is LEnd && l2 is LEnd                                     -> true
  else                                                            -> false

// -- Impure

act fold{T, TResult}(List{T} l, action{TResult, T, TResult} a)
  fold(l, a, TResult())

act fold{T, TResult}(List{T} l, action{TResult, T, TResult} a, TResult result)
  if l as LNode{T} n -> fold(n.next, a, a(result, n.val))
  if l is LEnd       -> result

act foldRight{T, TResult}(List{T} l, action{TResult, T, TResult} a)
  foldRight(l, a, TResult())

act foldRight{T, TResult}(List{T} l, action{TResult, T, TResult} a, TResult result)
  if l as LNode{T} n -> a(foldRight(n.next, a, result), n.val)
  if l is LEnd       -> result

act filter{T}(List{T} l, action{T, bool} pred)
  l.foldRight(impure lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

act filterReverse{T}(List{T} l, action{T, bool} pred)
  l.fold(impure lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

act map{T, TResult}(List{T} l, action{T, TResult} a)
  l.foldRight(impure lambda (List{TResult} newList, T val) a(val) :: newList)

act mapReverse{T, TResult}(List{T} l, action{T, TResult} a)
  l.fold(impure lambda (List{TResult} newList, T val) a(val) :: newList)

act map{T, TResult}(List{T} l, action{T, Option{TResult}} a)
  l.foldRight(impure lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

act mapReverse{T, TResult}(List{T} l, action{T, Option{TResult}} a)
  l.fold(impure lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

act for{T, TResult}(T from, T to, action{T, TResult} a)
  rangeList(from, to).map(a)

act for{T, TResult}(T to, action{T, TResult} a)
  rangeList(T(), to).map(a)

// -- Tests

assert(List(42) == List(42))
assert(List(42) != List{int}())

assert(
  l = 1 :: 2 :: 3;
  l == 1 :: 2 :: List(3) &&
  l != 3 :: 2 :: 1 &&
  l != List(42))

assert(Option(42) :: List{int}() == List(42))
assert(Option{int}() :: List{int}() == List{int}())

assert(
  l1 = 1 :: 2 :: 3;
  l2 = 10 :: 9 :: 8;
  l1 :: l2 :: l1 == 1 :: 2 :: 3 :: 10 :: 9 :: 8 :: 1 :: 2 :: 3)

assert(
  l = 1 :: 2 :: 3;
  l[-1] == 1 && l[0] == 1 && l[1] == 2 && l[2] == 3 && l[4] == None())

assert(
  l = 1 :: 2 :: 3;
  l[0, -1] == List{int}() &&
  l[0, 0] == List{int}() &&
  l[0, 1] == 1 :: List{int}() &&
  l[0, 2] == 1 :: 2 &&
  l[0, 3] == 1 :: 2 :: 3 &&
  l[0, 4] == 1 :: 2 :: 3 &&
  l[1, 4] == 2 :: 3 &&
  l[3, 3] == List{int}() &&
  l[3, 4] == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.string() == "[1,2,3]" && l.string("", "", "") == "123")
assert(
  l = "hello" :: "world";
  l.string() == "[hello,world]" && l.string("", "", "") == "helloworld")
assert(string(List{int}()) == "[]")

assert(List{int}().isEmpty() && !List{int}(42).isEmpty() && List{int}(42).pop().isEmpty())

assert(
  l = 1 :: 2 :: 3;
  l.front() ?? -1 == 1 && l.back() ?? -1 == 3)
assert(
  l = List{int}();
  l.front() is None && l.back() is None)

assert(push(List{int}(), 42) == List(42))
assert(push(2 :: 3, 1) == 1 :: 2 :: 3)

assert(
  l = 1 :: 2 :: 3;
  l.push(List(42)) == 42 :: 1 :: 2 :: 3 &&
  l.push(42 :: 1337) == 42 :: 1337 :: 1 :: 2 :: 3 &&
  l.push(3 :: 2 :: 1) == 3 :: 2 :: 1 :: 1 :: 2 :: 3)

assert(
  l = 1 :: 2 :: 3;
  l.pushUnique(1) == l &&
  l.pushUnique(2) == l &&
  l.pushUnique(3) == l &&
  l.pushUnique(4) == 4 :: l &&
  l.pushUnique(-1).pushUnique(2).pushUnique(4) == 4 :: -1 :: l)

assert(
  l = 42 :: 1337;
  l.pushRange(1, 4) == 1 :: 2 :: 3 :: 42 :: 1337)

assert(
  l = 42 :: 1337;
  l.pushRangeReverse(1, 4) == 3 :: 2 :: 1 :: 42 :: 1337)

assert(pushBack(List{int}(), 42) == List(42))
assert(pushBack(1 :: 2, 3) == 1 :: 2 :: 3)

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.pop() == 2 :: 3 :: 4 &&
  l.pop(-1) == l &&
  l.pop(0) == l &&
  l.pop(1) == 2 :: 3 :: 4 &&
  l.pop(2) == 3 :: 4 &&
  l.pop(3) == 4 :: List{int}() &&
  l.pop(4) == List{int}() &&
  l.pop(5) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.pop(lambda (int i) i == 0) == l &&
  l.pop(lambda (int i) i > 0) == List{int}() &&
  l.pop(lambda (int i) i == 1) == 2 :: 3 :: 4 &&
  l.pop(lambda (int i) i < 3) == 3 :: 4)

assert(
  l = 1 :: 2 :: 3;
  l.take(-1) == List{int}() &&
  l.take(0) == List{int}() &&
  l.take(1) == 1 :: List{int}() &&
  l.take(2) == 1 :: 2  &&
  l.take(3) == 1 :: 2 :: 3  &&
  l.take(4) == 1 :: 2 :: 3 )

assert(
  l = 1 :: 2 :: 3 ;
  l.take(lambda (int i) i == 0) == List{int}() &&
  l.take(lambda (int i) i > 0) == l &&
  l.take(lambda (int i) i < 3) == 1 :: 2 )

assert(
  l = 1 :: 2 :: 3 :: 4 ;
  l.popBack() == 1 :: 2 :: 3  &&
  l.popBack(-1) == l &&
  l.popBack(0) == l &&
  l.popBack(1) == 1 :: 2 :: 3  &&
  l.popBack(2) == 1 :: 2  &&
  l.popBack(3) == 1 :: List{int}() &&
  l.popBack(4) == List{int}() &&
  l.popBack(5) == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.insert(-1, 42) == 42 :: 1 :: 2 :: 3 &&
  l.insert(0, 42) == 42 :: 1 :: 2 :: 3 &&
  l.insert(1, 42) == 1 :: 42 :: 2 :: 3 &&
  l.insert(2, 42) == 1 :: 2 :: 42 :: 3 &&
  l.insert(3, 42) == 1 :: 2 :: 3 :: 42 &&
  l.insert(4, 42) == 1 :: 2 :: 3 :: 42)

assert(
  l = 1 :: 4 :: 5;
  l.insertOrdered(0) == 0 :: 1 :: 4 :: 5 &&
  l.insertOrdered(1) == 1 :: 1 :: 4 :: 5 &&
  l.insertOrdered(2) == 1 :: 2 :: 4 :: 5 &&
  l.insertOrdered(6) == 1 :: 4 :: 5 :: 6 &&
  l.insertOrdered(99) == 1 :: 4 :: 5 :: 99)

assert(rangeList(1, 4) == 1 :: 2 :: 3)
assert(rangeList('a', 'd') == 'a' :: 'b' :: 'c')

assert(rangeListReverse(1, 4) == 3 :: 2 :: 1)
assert(rangeListReverse('a', 'd') == 'c' :: 'b' :: 'a')

assert(gridList(2, 2) == Pair(0, 0) :: Pair(1, 0) ::
                         Pair(0, 1) :: Pair(1, 1))

assert(gridList(3, 3) == Pair(0, 0) :: Pair(1, 0) :: Pair(2, 0) ::
                         Pair(0, 1) :: Pair(1, 1) :: Pair(2, 1) ::
                         Pair(0, 2) :: Pair(1, 2) :: Pair(2, 2))

assert(
  gridList(1, 1) == Pair(0, 0) :: List{Pair{int, int}}() &&
  gridList(0, 0) == List{Pair{int, int}}())

assert(gridListReverse(2, 2) == Pair(1, 1) :: Pair(0, 1) ::
                                Pair(1, 0) :: Pair(0, 0))

assert(gridListReverse(3, 3) == Pair(2, 2) :: Pair(1, 2) :: Pair(0, 2) ::
                                Pair(2, 1) :: Pair(1, 1) :: Pair(0, 1) ::
                                Pair(2, 0) :: Pair(1, 0) :: Pair(0, 0))

assert(
  gridListReverse(1, 1) == Pair(0, 0) :: List{Pair{int, int}}() &&
  gridListReverse(0, 0) == List{Pair{int, int}}())

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.filter(lambda (int v) v > 2) == 3 :: 4 &&
  l.filter(lambda (int v) v < 0) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: 5;
  l.filterReverse(lambda (int v) v > 2) == 5 :: 4 :: 3 &&
  l.filterReverse(lambda (int v) v < 0) == List{int}())

assert(
  l = Option(1) :: Option{int}() :: Option(2) :: Option{int}();
  l.filterNone() == 1 :: 2)

assert(
  l = Option(1) :: Option{int}() :: Option(2) :: Option{int}();
  l.filterNoneReverse() == 2 :: 1)

assert(
  l = 1 :: 2 :: 3;
  l.map(lambda (int v) v * 2) == 2 :: 4 :: 6 &&
  l.map(lambda (int v) v.string()) == "1" :: "2" :: "3")

assert(
  l = 1 :: 2 :: 3;
  l.mapReverse(lambda (int v) v * 2) == 6 :: 4 :: 2 &&
  l.mapReverse(lambda (int v) v.string()) == "3" :: "2" :: "1")

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.map(lambda (int v) Option(v * 2))                   == 2 :: 4 :: 6 :: 8   &&
  l.map(lambda (int v) Option{int}())                   == List{int}()        &&
  l.map(lambda (int v) v > 2 ? Option(v * 2) : None())  == 6 :: 8)

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.mapReverse(lambda (int v) Option(v * 2))                   == 8 :: 6 :: 4 :: 2   &&
  l.mapReverse(lambda (int v) Option{int}())                   == List{int}()        &&
  l.mapReverse(lambda (int v) v > 2 ? Option(v * 2) : None())  == 8 :: 6)

assert(
  l = 1 :: 2 :: 3;
  l.length() == 3)
assert(length(List{int}()) == 0)

assert(
  l = 1 :: 2 :: 3;
  l.sum() == 6)
assert(
  l = 0.1 :: 1.0 :: 1.1;
  l.sum() == 2.2)
assert(
  l = "hello" :: " " :: "world";
  l.sum() == "hello world")
assert(List{int}().sum() == 0)

assert(
  l = 1 :: 2 :: 3;
  l.reverse() == 3 :: 2 :: 1)
assert(List{int}().reverse() == List{int}())

assert(
  l = 42 :: 1337 :: -42 :: -5;
  l.sort() == -42 :: -5 :: 42 :: 1337)
assert(List{int}().sort() == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.distinct() == l)
assert(
  l = 1 :: 2 :: 2 :: 3;
  l.distinct() == 1 :: 2 :: 3)
assert(
  l = 3 :: 1 :: 2 :: 3 :: 2 :: 3 :: 3;
  l.distinct() == 3 :: 1 :: 2)
assert(List{int}().distinct() == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.distinctReverse() == 3 :: 2 :: 1)
assert(
  l = 1 :: 2 :: 2 :: 3;
  l.distinctReverse() == 3 :: 2 :: 1)
assert(
  l = 1 :: 1 :: 2 :: 2 :: 3 :: 3 :: 3;
  l.distinctReverse() == 3 :: 2 :: 1)
assert(List{int}().distinctReverse() == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.count(lambda (int v) v > 2) == 1 &&
  l.count(lambda (int v) v == 0) == 0 &&
  l.count(lambda (int v) v > 0) == 3)

assert(
  l = 1 :: 2 :: 3;
  l.any(lambda (int v) v > 2) && !l.any(lambda (int v) v < 0))

assert(
  !(false :: false :: false).any()  &&
  (true :: false :: true)   .any()  &&
  (true :: true :: true)    .any()  &&
  !List{bool}()             .any())

assert(
  l = 1 :: 2 :: 3;
  l.all(lambda (int v) v > 0) && !l.all(lambda (int v) v > 1))

assert(
  !(true :: false :: true)  .all()  &&
  (true :: true :: true)    .all()  &&
  List{bool}()              .all())

assert(
  l = 1 :: 2 :: 3;
  l.none(lambda (int v) v < 0) && !l.none(lambda (int v) v > 1))

assert(
  l = 1 :: 2 :: 3;
  l.contains(1) &&
  l.contains(2) &&
  l.contains(3) &&
  !l.contains(0) &&
  !l.contains(4))

assert(for(1, 4, lambda (int i) i * i) == 1 :: 4 :: 9)

assert(for(4, lambda (int i) i * i) == 0 :: 1 :: 4 :: 9)

assert(
  l1  = "hello" :: "good" :: "world";
  l2  = 42 :: 1337 :: 1 :: 2 :: 3;
  z   = zip(l1, l2, lambda (List{string} result, string s, int i) (s + i.string()) :: result);
  z == "world1" :: "good1337" :: "hello42")

assert(
  l1  = List{string}();
  l2  = List{int}();
  z   = zip(l1, l2, lambda (List{string} result, string s, int i) (s + i.string()) :: result);
  z == List{string}())

assert(
  l =
    ("a1" :: "a2" :: "a3" :: "a4") ::
    ("b1" :: "b2" :: "b3"        ) ::
    ("c1" :: "c2" :: "c3" :: "d4") :: List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()) == " c1b1a1 c2b2a2 c3b3a3")

assert(
  l =
    ("a1" ::  List{string}()) ::
    (         List{string}()) ::
    ("c1" ::  List{string}()) :: List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()) == "")

assert(
  l = List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()) == "")

assert(
  l = List{Either{int, string}}();
  r = split(l);
  r.first.isEmpty() && r.second.isEmpty())

assert(
  eS = (lambda (string s) Either{int, string}(s));
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eS("hello") :: eI(2) :: eS("world") :: eI(3) :: eI(4);
  split(l) == makePair(1 :: 2 :: 3 :: 4, "hello" :: "world"))

assert(
  eS = (lambda (string s) Either{int, string}(s));
  l = eS("hello") :: eS("good") :: eS("world");
  split(l) == makePair(List{int}(), "hello" :: "good" :: "world"))

assert(
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eI(2) :: eI(3);
  split(l) == makePair(1 :: 2 :: 3, List{string}()))

assert(
  l = List{Either{int, string}}();
  r = splitReverse(l);
  r.first.isEmpty() && r.second.isEmpty())

assert(
  eS = (lambda (string s) Either{int, string}(s));
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eS("hello") :: eI(2) :: eS("world") :: eI(3) :: eI(4);
  splitReverse(l) == makePair(4 :: 3 :: 2 :: 1, "world" :: "hello"))

assert(
  l = 0 :: 1 :: 4 :: 9;
  listEqual(l, l) &&
  listEqual(l, 0 :: 1 :: 4 :: 9) &&
  !listEqual(l, 0 :: 1 :: 5 :: 9) &&
  !listEqual(l, 0 :: 1) &&
  !listEqual(l, List{int}()) &&
  listEqual(List{int}(), List{int}()))

// -- Impure Tests

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.filter(impure lambda (int v) v > 2) == 3 :: 4 &&
  l.filter(impure lambda (int v) v < 0) == List{int}())

assert(
  l = 1 :: 2 :: 3 :: 4 :: 5;
  l.filterReverse(impure lambda (int v) v > 2) == 5 :: 4 :: 3 &&
  l.filterReverse(impure lambda (int v) v < 0) == List{int}())

assert(
  l = 1 :: 2 :: 3;
  l.map(impure lambda (int v) v * 2) == 2 :: 4 :: 6 &&
  l.map(impure lambda (int v) v.string()) == "1" :: "2" :: "3")

assert(
  l = 1 :: 2 :: 3;
  l.mapReverse(impure lambda (int v) v * 2) == 6 :: 4 :: 2 &&
  l.mapReverse(impure lambda (int v) v.string()) == "3" :: "2" :: "1")

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.map(impure lambda (int v) Option(v * 2))                   == 2 :: 4 :: 6 :: 8   &&
  l.map(impure lambda (int v) Option{int}())                   == List{int}()        &&
  l.map(impure lambda (int v) v > 2 ? Option(v * 2) : None())  == 6 :: 8)

assert(
  l = 1 :: 2 :: 3 :: 4;
  l.mapReverse(impure lambda (int v) Option(v * 2))                   == 8 :: 6 :: 4 :: 2   &&
  l.mapReverse(impure lambda (int v) Option{int}())                   == List{int}()        &&
  l.mapReverse(impure lambda (int v) v > 2 ? Option(v * 2) : None())  == 8 :: 6)

assert(for(1, 4, impure lambda (int i) i * i) == 1 :: 4 :: 9)

assert(for(4, impure lambda (int i) i * i) == 0 :: 1 :: 4 :: 9)
