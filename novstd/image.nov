import "std/math.nov"
import "std/text.nov"
import "std/list.nov"
import "std/writer.nov"

// -- Types

struct Color  = float r, float g, float b
struct Image  = int width, int height, List{Color} pixels

// -- Color presets

fun red()     Color(1.0, 0.0, 0.0)
fun green()   Color(0.0, 1.0, 0.0)
fun blue()    Color(0.0, 0.0, 1.0)
fun yellow()  Color(1.0, 1.0, 0.0)
fun white()   Color(1.0, 1.0, 1.0)
fun black()   Color(0.0, 0.0, 0.0)

// -- Functions

fun lerp(Color x, Color y, float t)
  Color(
    lerp(x.r, y.r, t),
    lerp(x.g, y.g, t),
    lerp(x.b, y.b, t))

fun makeImage(int width, int height, function{int, int, Color} getCol)
  Image(width, height, makeColorGrid(width, height, getCol))

fun makeColorGrid(int width, int height, function{int, int, Color} getCol)
  makeGrid = (lambda (int x, int y, List{Color} result)
      if y < 0  -> result
      if x < 0  -> self(width - 1, --y, result)
      else      -> self(--x, y, getCol(x, y) :: result)
  );
  makeGrid(width - 1, height - 1, List{Color}())

// -- Conversions

fun string(Color c)
  "(" + c.r.string() + ',' + c.g.string() + ',' + c.b.string() + ')'

fun string(Image i)
  "(" + i.width + "x" + i.height + ')'

// -- Portable Pixmap Format
// https://en.wikipedia.org/wiki/Netpbm
// Support writing ascii and binary ppm images.

fun ppmAsciiWriter()
  sizeWriter  = txtIntWriter() & litWriter(' ') & txtIntWriter();
  colorWriter = Writer(lambda (WriterState s, Color c)
    s.write(
      int(char(c.r * 255)).string() + ' ' +
      int(char(c.g * 255)).string() + ' '+
      int(char(c.b * 255)).string())
  );
  ( litWriter("P3") & newlineWriter()   &
    sizeWriter & newlineWriter()        &
    litWriter("255") & newlineWriter()  &
    listWriter(colorWriter, newlineWriter())
  ).map(lambda (Image i) Pair(Pair(i.width, i.height), i.pixels))

fun ppmBinaryWriter()
  sizeWriter  = txtIntWriter() & litWriter(' ') & txtIntWriter();
  colorWriter = Writer(lambda (WriterState s, Color c)
    s.write(char(c.r * 255) + char(c.g * 255) + char(c.b * 255))
  );
  ( litWriter("P6") & newlineWriter()   &
    sizeWriter & newlineWriter()        &
    litWriter("255") & newlineWriter()  &
    listWriter(colorWriter)
  ).map(lambda (Image i) Pair(Pair(i.width, i.height), i.pixels))

// -- Truevision TGA
// https://en.wikipedia.org/wiki/Truevision_TGA
// Support writing 24 bit uncompressed tga files.

fun tgaWriter()
  headerWriter = Writer(lambda (WriterState s, Image i)
    s.write(
      string(char(0), 2) +
      char(2) +
      string(char(0), 9) +
      char(i.width) + char(i.width >> 8) +
      char(i.height) + char(i.height >> 8) +
      char(24) +
      char(0b10_0000))
  );
  colorWriter = Writer(lambda (WriterState s, Color c)
    s.write(char(c.b * 255) + char(c.g * 255) + char(c.r * 255))
  );
  (headerWriter & listWriter(colorWriter)).map(lambda (Image i) Pair(i, i.pixels))

// -- Tests

assert(
  red().string() == "(1,0,0)" &&
  white().string() == "(1,1,1)")

assert(
  g = makeColorGrid(2, 2, lambda (int x, int y) y == 0 ? red() : blue());
  g == red() :: red() :: blue() :: blue() :: List{Color}())
