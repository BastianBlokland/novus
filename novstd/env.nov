import "std/either.nov"
import "std/error.nov"
import "std/list.nov"
import "std/option.nov"
import "std/parser.nov"
import "std/text.nov"

// -- Types

struct EnvOpt = string id, List{string} args

// -- Conversions

fun string(EnvOpt eo)
  if eo.args.isEmpty()  -> eo.id
  else                  -> eo.id + eo.args.string()

// -- Functions

fun findEnvOpt(List{string} args, string name) -> Option{EnvOpt}
  shortOpt  = name.length() == 1;
  longOpt   = name.length() > 1;
  if args.front() as string s ->
    if shortOpt && s.isShortOpt() && s.contains(name) -> EnvOpt(name, args.pop().takeNonOpts())
    if longOpt && s == "--" + name                    -> EnvOpt(name, args.pop().takeNonOpts())
    else                                              -> findEnvOpt(args.pop(), name)
  else -> None()

fun isShortOpt(string s)
  s[0] == '-' && s[1] != '-'

fun isLongOpt(string s)
  s[0] == '-' && s[1] == '-'

fun takeNonOpts(List{string} l)
  l.take(lambda (string str) str[0] != '-' || str[1].isDigit())

fun findEnvOpt{T}(List{string} args, string n, Parser{T} p) -> Either{T, Error}
  if findEnvOpt(args, n) as EnvOpt o  ->
    if o.args.front() as string str   -> p(str) ?? Error("Failed to parse argument")
    else                              -> Error(2, "Option has no arguments")
  else                                -> Error(1, "Option not found")

// -- Actions

act hasEnvOpt(string name)
  findEnvOpt(envGetArgs(), name) is EnvOpt

act getEnvOpt{T}(string name, Parser{T} p)
  findEnvOpt(envGetArgs(), name, p)

act getEnvOpt(string name)
  findEnvOpt(envGetArgs(), name)

act envGetArgs()
  invoke(
    impure lambda (int idx, List{string} result)
      if idx < 0  -> result
      else        -> self(--idx, envGetArg(idx) :: result)
    , --envGetArgCount(), List{string}())

// -- Tests

assert(
  findEnvOpt("-f" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("-d" :: List{string}(), "f") is None &&
  findEnvOpt("-df" :: List{string}(), "d") is EnvOpt &&
  findEnvOpt("-df" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("a" :: "-b" :: "-df" :: "-c", "f") is EnvOpt &&
  findEnvOpt("-f" :: List{string}(), "") is None)

assert(
  args = "b" :: "-1" :: "c" :: "d";
  in = "a" :: "-dfz" :: args :: "-t";
  findEnvOpt(in, "f") as EnvOpt o && o.args == args)

assert(
  findEnvOpt("--file" :: List{string}(), "file") is EnvOpt &&
  findEnvOpt("--files" :: List{string}(), "file") is None &&
  findEnvOpt("--hello" ::  "a" :: "--file" :: "--world", "file") is EnvOpt)

assert(
  args = "b" :: "c" :: "d";
  in = "a" :: "--file" :: args :: "-t";
  findEnvOpt(in, "file") as EnvOpt o && o.args == args)

assert(
  findEnvOpt("--test" :: "42", "test", txtIntParser()) == 42 &&
  findEnvOpt("--test" :: List{string}(), "test", txtIntParser()) is Error &&
  findEnvOpt("--test" :: "hello", "test", txtIntParser()) is Error &&
  findEnvOpt(List{string}(), "test", txtIntParser()) is Error)
