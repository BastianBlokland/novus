import "func.nov"
import "list.nov"
import "text.nov"
import "option.nov"

// Types

struct EnvOpt = string id, List{string} args

// Conversions

fun string(EnvOpt eo)
  if eo.args.isEmpty()  -> eo.id
  else                  -> eo.id + eo.args.string()

// Functions

fun findEnvOpt(List{string} args, string name) -> Option{EnvOpt}
  short  = name.length() == 1;
  long   = name.length() > 1;
  if args.front() as string s ->
    if short && s.isShortOpt() && s.contains(name)  -> EnvOpt(name, args.pop().takeNonOpts())
    if long && s == "--" + name                     -> EnvOpt(name, args.pop().takeNonOpts())
    else                                            -> findEnvOpt(args.pop(), name)
  else -> None()

fun isShortOpt(string s)
  s[0] == '-' && s[1] != '-'

fun isLongOpt(string s)
  s[0] == '-' && s[1] == '-'

fun takeNonOpts(List{string} l)
  l.take(!startsWith["-"])

// Actions

action getEnvOpt(string name)
  findEnvOpt(getEnvArgs(), name)

action getEnvArgs()
  getEnvArgsImpl(--getEnvArgCount(), List{string}())

action getEnvArgsImpl(int idx, List{string} result)
  if idx < 0  -> result
  else        -> getEnvArgsImpl(--idx, getEnvArg(idx) :: result)

// Tests

assert(
  findEnvOpt("-f" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("-d" :: List{string}(), "f") is None &&
  findEnvOpt("-df" :: List{string}(), "d") is EnvOpt &&
  findEnvOpt("-df" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("a" :: "-b" :: "-df" :: "-c" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("-f" :: List{string}(), "") is None)

assert(
  args = "b" :: "c" :: "d" :: List{string}();
  in = "a" :: "-dfz" :: args :: "-t" :: List{string}();
  findEnvOpt(in, "f") as EnvOpt o && o.args == args)

assert(
  findEnvOpt("--file" :: List{string}(), "file") is EnvOpt &&
  findEnvOpt("--files" :: List{string}(), "file") is None &&
  findEnvOpt("--hello" ::  "a" :: "--file" :: "--world" :: List{string}(), "file") is EnvOpt)

assert(
  args = "b" :: "c" :: "d" :: List{string}();
  in = "a" :: "--file" :: args :: "-t" :: List{string}();
  findEnvOpt(in, "file") as EnvOpt o && o.args == args)
