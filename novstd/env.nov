import "list.nov"
import "text.nov"
import "option.nov"

// Types

struct EnvOpt = string id, List{string} args

// Conversions

fun string(EnvOpt eo)
  if eo.args.isEmpty()  -> eo.id
  else                  -> eo.id + eo.args.string()

// Functions

fun findEnvOpt(List{string} envArgs, string name) -> Option{EnvOpt}
  shortOpt  = name.length() == 1;
  longOpt   = name.length() > 1;
  makeOpt   = (lambda () EnvOpt(name, envArgs.pop().take(lambda (string s) s[0] != '-')));
  if envArgs.front() as string s  ->
    if shortOpt && s[0] == '-' && s[1] != '-' &&  s.contains(name)  -> makeOpt()
    if longOpt && s == "--" + name                                  -> makeOpt()
    else -> findEnvOpt(envArgs.pop(), name)
  else -> None()

// Actions

action getEnvOpt(string name)
  findEnvOpt(getEnvArgs(), name)

action getEnvArgs()
  getEnvArgs(--getEnvArgCount(), List{string}())

action getEnvArgs(int idx, List{string} result)
  if idx < 0  -> result
  else        -> getEnvArgs(--idx, getEnvArg(idx) :: result)

// Tests

assert(
  findEnvOpt("-f" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("-d" :: List{string}(), "f") is None &&
  findEnvOpt("-df" :: List{string}(), "d") is EnvOpt &&
  findEnvOpt("-df" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("a" :: "-b" :: "-df" :: "-c" :: List{string}(), "f") is EnvOpt &&
  findEnvOpt("-f" :: List{string}(), "") is None)

assert(
  args = "b" :: "c" :: "d" :: List{string}();
  in = "a" :: "-dfz" :: args :: "-t" :: List{string}();
  findEnvOpt(in, "f") as EnvOpt o && o.args == args)

assert(
  findEnvOpt("--file" :: List{string}(), "file") is EnvOpt &&
  findEnvOpt("--files" :: List{string}(), "file") is None &&
  findEnvOpt("--hello" ::  "a" :: "--file" :: "--world" :: List{string}(), "file") is EnvOpt)

assert(
  args = "b" :: "c" :: "d" :: List{string}();
  in = "a" :: "--file" :: args :: "-t" :: List{string}();
  findEnvOpt(in, "file") as EnvOpt o && o.args == args)
