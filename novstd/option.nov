import "std/func.nov"
import "std/lazy.nov"

// -- Types

union Option{T} = T, None

struct None

// -- Constructors

fun Option{T}()
  Option{T}(None())

// -- Operators

fun ??{T}(Option{T} opt, T def) -> T
  opt as T val ? val : def

fun ??{T}(Option{T} opt, lazy{T} def) -> T
  opt as T val ? val : def.get()

// -- Conversions

fun string{T}(Option{T} opt)
  opt as T val ? val.string() : "none"

// -- Functions

fun map{T, TResult}(Option{T} opt, function{T, TResult} func) -> Option{TResult}
  opt as T val ? func(val) : None()

fun map{T, TResult}(Option{T} opt, function{T, Option{TResult}} func) -> Option{TResult}
  opt as T val ? func(val) : None()

fun unwrap{T}(Option{Option{T}} opt) -> Option{T}
  opt as Option{T} o ? o : None()

// -- Actions

act map{T, TResult}(Option{T} opt, action{T, TResult} func) -> Option{TResult}
  opt as T val ? func(val) : None()

act map{T, TResult}(Option{T} opt, action{T, Option{TResult}} func) -> Option{TResult}
  opt as T val ? func(val) : None()

// -- Tests

assert(
  o = Option(42);
  o == 42 && o != 43 && o != Option{int}())
assert(Option{int}() == Option{int}())

assert(Option{int}() ?? 42 == 42)
assert(Option(1337) ?? 42 == 1337)

assert(Option{int}() ?? lazy invoke(lambda () 42) == 42)
assert(Option(1337) ?? lazy invoke(lambda () 42) == 1337)

assert(Option(42).string() == "42")
assert(Option{int}().string() == "none")

assert(Option(42).map(lambda (int val) val * 2) == 84)
assert(Option{int}().map(lambda (int val) val * 2) is None)

assert(
  func = (lambda (int val) val > 0 ? Option(val) : None());
  Option(42).map(func) == 42 &&
  Option(-42).map(func) is None &&
  Option(-42).map(func) == Option{int}() &&
  Option{int}().map(func) is None)

assert(Option{Option{int}}().unwrap() == Option{int}())
assert(Option(Option(42)).unwrap() == Option(42))

// -- Impure Tests

assert(Option(42).map(impure lambda (int val) val * 2) == 84)
assert(Option{int}().map(impure lambda (int val) val * 2) == None())

assert(
  func = (impure lambda (int val) val > 0 ? Option(val) : None());
  Option(42).map(func) == 42 &&
  Option(-42).map(func) is None &&
  Option(-42).map(func) == Option{int}() &&
  Option{int}().map(func) is None)
