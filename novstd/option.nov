// -- Types

union Option{T} = T, None

struct None

// -- Constructors

fun Option{T}()
  Option{T}(None())

// -- Operators

fun ??{T}(Option{T} opt, T def)
  opt as T val ? val : def

fun ??{T}(Option{T} opt, function{T} defFactory)
  opt as T val ? val : defFactory()

// -- Conversions

fun string{T}(Option{T} opt)
  opt as T val ? val.string() : "none"

// -- Functions

fun some{T}(T t) Option(t)

fun none() None()

fun map{T, TResult}(Option{T} opt, function{T, TResult} func)
  opt as T val ? func(val) : None()

fun map{T, TResult}(Option{T} opt, function{T, Option{TResult}} func)
  opt as T val ? func(val) : None()

// -- Tests

assert(
  o = Option(42);
  o == 42 && o != 43 && o != Option{int}())
assert(Option{int}() == Option{int}())

assert(Option{int}() ?? 42 == 42)
assert(Option(1337) ?? 42 == 1337)

assert(Option{int}() ?? (lambda () 42) == 42)
assert(Option(1337) ?? (lambda () 42) == 1337)

assert(Option(42).string() == "42")
assert(Option{int}().string() == "none")

assert(Option(42).map(lambda (int val) val * 2) == 84)
assert(Option{int}().map(lambda (int val) val * 2) is None)

assert(
  func = (lambda (int val) val > 0 ? Option(val) : None());
  Option(42).map(func) == 42 &&
  Option(-42).map(func) is None &&
  Option{int}().map(func) is None)
