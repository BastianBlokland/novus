import "std/math.nov"

// -- Functions

// 3d perlin noise.
// Returns float in the -1 to 1 range.
// Port of the Java implementation by Ken Perlin:
// https://mrl.nyu.edu/~perlin/noise/
//
fun perlinNoise3d(float x, float y, float z) -> float
  fade = (
    lambda (float t)
      t * t * t * (t * (t * 6 - 15) + 10)
  );
  grad = (
    lambda (int hash, float x, float y, float z)
      h   = hash & 15;
      u   = h < 8 ? x : y;
      v   = h < 4 ? y : h == 12 || h == 14 ? x : z;
      ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v)
  );
  p   = perlinPermutation();
  ix  = x.floor().int() & 255;  iy  = y.floor().int() & 255;  iz  = z.floor().int() & 255;
  rx  = x - x.floor();          ry  = y - y.floor();          rz  = z - z.floor();
  u   = fade(rx);               v   = fade(ry);               w   = fade(rz);
  a   = p[ix] + iy;             aa  = p[a] + iz;              ab  = p[a + 1] + iz;
  b   = p[ix + 1] + iy;         ba  = p[b] + iz;              bb  = p[b + 1] + iz;
  lerp( lerp( lerp( grad(p[aa],     rx,      ry,      rz     ),
                    grad(p[ba],     rx - 1,  ry,      rz     ), u),
              lerp( grad(p[ab],     rx,      ry - 1,  rz     ),
                    grad(p[bb],     rx - 1,  ry - 1,  rz     ), u), v),
        lerp( lerp( grad(p[aa + 1], rx,      ry,      rz - 1 ),
                    grad(p[ba + 1], rx - 1,  ry,      rz - 1 ), u),
              lerp( grad(p[ab + 1], rx,      ry - 1,  rz - 1 ),
                    grad(p[bb + 1], rx - 1,  ry - 1,  rz - 1 ), u), v), w)

fun perlinPermutation() -> string
  p = "" +
    char(151) + char(160) + char(137) + char(91)  + char(90)  + char(15)  + char(131) + char(13)  +
    char(201) + char(95)  + char(96)  + char(53)  + char(194) + char(233) + char(7)   + char(225) +
    char(140) + char(36)  + char(103) + char(30)  + char(69)  + char(142) + char(8)   + char(99)  +
    char(37)  + char(240) + char(21)  + char(10)  + char(23)  + char(190) + char(6)   + char(148) +
    char(247) + char(120) + char(234) + char(75)  + char(0)   + char(26)  + char(197) + char(62)  +
    char(94)  + char(252) + char(219) + char(203) + char(117) + char(35)  + char(11)  + char(32)  +
    char(57)  + char(177) + char(33)  + char(88)  + char(237) + char(149) + char(56)  + char(87)  +
    char(174) + char(20)  + char(125) + char(136) + char(171) + char(168) + char(68)  + char(175) +
    char(74)  + char(165) + char(71)  + char(134) + char(139) + char(48)  + char(27)  + char(166) +
    char(77)  + char(146) + char(158) + char(231) + char(83)  + char(111) + char(229) + char(122) +
    char(60)  + char(211) + char(133) + char(230) + char(220) + char(105) + char(92)  + char(41)  +
    char(55)  + char(46)  + char(245) + char(40)  + char(244) + char(102) + char(143) + char(54)  +
    char(65)  + char(25)  + char(63)  + char(161) + char(1)   + char(216) + char(80)  + char(73)  +
    char(209) + char(76)  + char(132) + char(187) + char(208) + char(89)  + char(18)  + char(169) +
    char(200) + char(196) + char(135) + char(130) + char(116) + char(188) + char(159) + char(86)  +
    char(164) + char(100) + char(109) + char(198) + char(173) + char(186) + char(3)   + char(64)  +
    char(52)  + char(217) + char(226) + char(250) + char(124) + char(123) + char(5)   + char(202) +
    char(38)  + char(147) + char(118) + char(126) + char(255) + char(82)  + char(85)  + char(212) +
    char(207) + char(206) + char(59)  + char(227) + char(47)  + char(16)  + char(58)  + char(17)  +
    char(182) + char(189) + char(28)  + char(42)  + char(223) + char(183) + char(170) + char(213) +
    char(119) + char(248) + char(152) + char(2)   + char(44)  + char(154) + char(163) + char(70)  +
    char(221) + char(153) + char(101) + char(155) + char(167) + char(43)  + char(172) + char(9)   +
    char(129) + char(22)  + char(39)  + char(253) + char(19)  + char(98)  + char(108) + char(110) +
    char(79)  + char(113) + char(224) + char(232) + char(178) + char(185) + char(112) + char(104) +
    char(218) + char(246) + char(97)  + char(228) + char(251) + char(34)  + char(242) + char(193) +
    char(238) + char(210) + char(144) + char(12)  + char(191) + char(179) + char(162) + char(241) +
    char(81)  + char(51)  + char(145) + char(235) + char(249) + char(14)  + char(239) + char(107) +
    char(49)  + char(192) + char(214) + char(31)  + char(181) + char(199) + char(106) + char(157) +
    char(184) + char(84)  + char(204) + char(176) + char(115) + char(121) + char(50)  + char(45)  +
    char(127) + char(4)   + char(150) + char(254) + char(138) + char(236) + char(205) + char(93)  +
    char(222) + char(114) + char(67)  + char(29)  + char(24)  + char(72)  + char(243) + char(141) +
    char(128) + char(195) + char(78)  + char(66)  + char(215) + char(61)  + char(156) + char(180);
  p + p

// -- Tests

assert(approx(perlinNoise3d(.1, .2, .3),          +.351229250))
assert(approx(perlinNoise3d(-.1, -.2, -.3),       -.41573518))
assert(approx(perlinNoise3d(.2, -.2, 10.6),       -.09902167))
assert(approx(perlinNoise3d(1000, -1000, .1337),  +.14788535237))
assert(approx(perlinNoise3d(3.14, 42, 7),         .1369200497))
