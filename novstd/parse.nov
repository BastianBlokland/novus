import "ascii.nov"
import "text.nov"
import "math.nov"
import "pair.nov"
import "either.nov"
import "error.nov"

// -- Types

struct  ParseState      = string str, int pos
struct  ParseSuccess{T} = T val, ParseState state
struct  ParseFailure    = Error err, ParseState state
union   ParseResult{T}  = ParseSuccess{T}, ParseFailure
struct  Parser{T}       = function{ParseState, ParseResult{T}} func

// -- Operators

fun (){T}(Parser{T} p, string str)
  p(ParseState(str, 0))

fun (){T}(Parser{T} p, ParseState s)
  p.func(s)

fun ??{T}(ParseResult{T} res, T def)
  res as ParseSuccess{T} suc ? suc.val : def

fun ??{T1, T2}(ParseResult{T1} res, T2 def) -> Either{T1, T2}
  res as ParseSuccess{T1} suc ? suc.val : def

fun ==(ParseState s, char c)
  s.str[s.pos] == c

fun ==(ParseState s, string text)
  startsWithOffset(s.str, s.pos, text)

fun !=(ParseState s, char c)
  s.str[s.pos] != c

fun !=(ParseState s, string text)
  !startsWithOffset(s.str, s.pos, text)

fun +(ParseState s, int amount)
  ParseState(s.str, s.pos + amount)

fun -(ParseState s, int amount)
  ParseState(s.str, max(s.pos - amount, 0))

fun ++(ParseState s)
  s + 1

fun --(ParseState s)
  s - 1

fun &{T1, T2}(Parser{T1} p1, Parser{T2} p2)
  Parser(lambda (ParseState s) -> ParseResult{Pair{T1, T2}}
    r1 = p1(s);
    if r1 as ParseFailure     f1    -> f1
    if r1 as ParseSuccess{T1} suc1  ->
      r2 = p2(suc1.state);
      if r2 as ParseFailure     f2    -> f2
      if r2 as ParseSuccess{T2} suc2  -> suc2.state.success(Pair(suc1.val, suc2.val))
  )

fun |{T}(Parser{T} p1, Parser{T} p2)
  Parser(lambda (ParseState s) -> ParseResult{T}
    r1 = p1(s);
    if r1 is ParseSuccess{T} -> r1
    if r1 is ParseFailure    -> p2(s)
  )

fun |{T1, T2}(Parser{T1} p1, Parser{T2} p2)
  Parser(lambda (ParseState s) -> ParseResult{Either{T1, T2}}
    r1 = p1(s);
    if r1 as ParseSuccess{T1} suc1  -> suc1.state.success(         Either{T1, T2}(suc1.val))
    if r1 is ParseFailure           -> p2(s).map(lambda (T2 val2)  Either{T1, T2}(val2))
  )

fun >>{T1, T2}(Parser{T1} p1, Parser{T2} p2)
  Parser(lambda (ParseState s) -> ParseResult{T2}
    r1 = p1(s);
    if r1 as ParseFailure     f1    -> f1
    if r1 as ParseSuccess{T1} suc1  -> p2(suc1.state)
  )

fun <<{T1, T2}(Parser{T1} p1, Parser{T2} p2)
  Parser(lambda (ParseState s) -> ParseResult{T1}
    r1 = p1(s);
    if r1 as ParseFailure     f1    -> f1
    if r1 as ParseSuccess{T1} suc1  ->
      r2 = p2(suc1.state);
      if r2 as ParseFailure     f2    -> f2
      if r2 as ParseSuccess{T2} suc2  -> suc2.state.success(suc1.val)
  )

fun ::{T}(Parser{T} p1, Parser{T} p2)
  (p1 & p2).map(lambda (Pair{T, T} p) p.first :: p.second :: List{T}())

fun ::{T}(Parser{T} p1, Parser{List{T}} p2)
 (p1 & p2).map(lambda (Pair{T, List{T}} p) p.first :: p.second)

fun =={T}(ParseResult{T} result, T val)
  result as ParseSuccess{T} suc && suc.val == val

fun =={T1, T2}(ParseResult{Either{T1, T2}} result, T1 val)
  result as ParseSuccess{Either{T1, T2}} suc && suc.val == val

fun =={T1, T2}(ParseResult{Either{T1, T2}} result, T2 val)
  result as ParseSuccess{Either{T1, T2}} suc && suc.val == val

// -- Conversions

fun string(ParseState s)
  s.pos.string()

fun string{T}(ParseResult{T} res)
  if res as ParseSuccess{T} suc   -> suc.string()
  if res as ParseFailure    fail  -> fail.string()

fun string{T}(ParseSuccess{T} suc)
  suc.val.string()

fun string(ParseFailure fail)
  "[" + fail.state.pos.string() + "] " + fail.err.string()

fun char(ParseState s)
  s.str[s.pos]

// -- Utilities

fun isEnd(ParseState s)                   s.pos >= s.str.length()

fun success{T}(ParseState s, T val)       ParseSuccess(val, s)
fun failure(ParseState s, Error err)      ParseFailure(err, s)

fun map{T, TResult}(ParseResult{T} res, function{T, TResult} func)
  if res as ParseSuccess{T} suc   -> suc.state.success(func(suc.val))
  if res as ParseFailure    fail  -> fail

fun map{T, TResult}(Parser{T} p, function{T, TResult} func)
  Parser(lambda (ParseState s) -> ParseResult{TResult}
    res = p(s);
    if res as ParseSuccess{T} suc   -> suc.state.success(func(suc.val))
    if res as ParseFailure    fail  -> fail
  )

fun unwrap{T1, T2, TResult}(Parser{Pair{T1, T2}} p, function{T1, T2, TResult} f)
  p.map(lambda (Pair{T1, T2} pair) f(pair.first, pair.second))

fun unwrap{T1, T2, T3, TResult}(Parser{Pair{Pair{T1, T2}, T3}} p, function{T1, T2, T3, TResult} f)
  p.map(lambda (Pair{Pair{T1, T2}, T3} pair) f(pair.first.first, pair.first.second, pair.second))

// -- Basic parsers

fun retParser{T}(T val)
  Parser(lambda (ParseState s) -> ParseResult{T}
    s.success(val)
  )

fun matchParser(char c)
  Parser(lambda (ParseState s) -> ParseResult{char}
    if s == c -> (s + 1).success(c)
    else      -> s.failure(Error("Expected: '" + c + "', got: '" + char(s) + "'"))
  )

fun matchParser(string str)
  Parser(lambda (ParseState s) -> ParseResult{string}
    if s == str -> (s + str.length()).success(str)
    else        -> s.failure(Error("Expected: '" + str + "', got: '" + char(s) + "'"))
  )

fun whileParser(function{ParseState, bool} pred)
  whileParser(pred, false)

fun whileParser(function{ParseState, bool} pred, bool allowEmpty)
  Parser(lambda (ParseState begin)
    impl =
    (
      lambda (ParseState cur, bool valid) -> ParseResult{string}
        if !cur.isEnd() && pred(cur) -> self(++cur, true)
        else                         -> valid  ? cur.success(begin.str[begin.pos, cur.pos])
                                               : cur.failure(Error(
                                                  "Unexpected character: '" + char(cur) + "'"))
    );
    impl(begin, allowEmpty)
  )

fun whileParser(function{char, bool} pred)
  whileParser(pred, false)

fun whileParser(function{char, bool} pred, bool allowEmpty)
  whileParser(lambda (ParseState s) pred(char(s)), allowEmpty)

fun whitespaceParser()
  whileParser(isWhitespace, true)

fun whitespaceParser(bool optional)
  whileParser(isWhitespace, optional)

fun lineParser()
  whileParser(lambda (ParseState s) (s - 1) != '\n', false)

fun quotedStringParser()
  matchParser('"') >>
    whileParser(lambda (char c) c != '"' && !c.isNewline(), true) << matchParser('"')

fun txtBoolParser()
  Parser(lambda (ParseState s) -> ParseResult{bool}
    if s == "true"  -> (s + 4).success(true)
    if s == "TRUE"  -> (s + 4).success(true)
    if s == "True"  -> (s + 4).success(true)
    if s == "false" -> (s + 5).success(false)
    if s == "FALSE" -> (s + 5).success(false)
    if s == "False" -> (s + 5).success(false)
    else            -> s.failure(Error("Expected boolean, got: '" + char(s) + "'"))
  )

fun txtIntParser()
  Parser(lambda (ParseState s)
    impl =
    (
      lambda (ParseState s, int res, bool valid) -> ParseResult{int}
        if char(s).isDigit()  -> self(++s, res * 10 + char(s) - '0', true)
        else                  -> valid ?  s.success(res) :
                                          s.failure(Error(
                                            "Expected integer, got: '" + char(s) + "'"))
    );
    if s.isEnd() -> s.failure(Error("Expected int, got: end of input"))
    if s == '-'  -> impl(++s, 0, false).map(negate{int})
    if s == '+'  -> impl(++s, 0, false)
    else         -> impl(s, 0, false)
  )

fun txtFloatParser()
  intParser = txtIntParser();
  Parser(lambda (ParseState s)
    impl =
    (
      lambda (ParseState s, float raw, float div, bool dec, bool valid) -> ParseResult{float}
        if s == '.' && !dec     -> self(++s, raw, div, true, false)
        if char(s).isDigit()    -> newRaw = raw * 10.0 + int(char(s)) - int('0');
                                   newDiv = dec ? div * 10.0 : div;
                                   self(++s, newRaw, newDiv, dec, true)
        if s == 'e' || s == 'E' -> intParser(s + 1).map(
                                                      lambda (int exp) raw / (div / pow(10.0, exp)))
        else                    -> valid ?  s.success(raw / div) :
                                            s.failure(Error(
                                              "Expected float, got: '" + char(s) + "'"))
    );
    if s.isEnd() -> s.failure(Error("Expected float, got: end of input"))
    if s == '-'  -> impl(++s, 0.0, 1.0, false, false).map(negate{float})
    if s == '+'  -> impl(++s, 0.0, 1.0, false, false)
    else         -> impl(s,   0.0, 1.0, false, false)
  )

// -- Combination parsers

fun manyParser{T}(Parser{T} p)
  manyParser(p, false)

fun manyParser{T}(Parser{T} p, bool toEnd)
  Parser(lambda (ParseState begin)
    impl =
    (
      lambda (ParseState cur, List{T} result) -> ParseResult{List{T}}
        if cur.isEnd() -> cur.success(result)
        else ->
          res = p(cur);
          if res as ParseSuccess{T} suc   -> self(suc.state, suc.val :: result)
          if res as ParseFailure    fail  -> toEnd ? fail : cur.success(result)
    );
    impl(begin, List{T}()).map(reverse{T})
  )

fun manyParser{T1, T2}(Parser{T1} p, Parser{T2} seperator)
  Parser(lambda (ParseState begin)
    impl =
    (
      lambda (ParseState cur, List{T1} result) -> ParseResult{List{T1}}
        res1 = p(cur);
        if res1 as ParseFailure     fail1  -> cur.success(result)
        if res1 as ParseSuccess{T1} suc1   ->
          res2 = seperator(suc1.state);
          if res2 as ParseSuccess{T2} suc2  -> self(suc2.state, suc1.val :: result)
          if res2 is ParseFailure           -> suc1.state.success(suc1.val :: result)
    );
    impl(begin, List{T1}()).map(reverse{T1})
  )

// -- Tests

assert(retParser(42)("") == 42)

assert(
  matchParser('a')("a") == 'a' &&
  matchParser('a')("b") is ParseFailure)

assert(
  matchParser("hello")("hello world") == "hello" &&
  matchParser("hello")("world") is ParseFailure)

assert(
  whileParser(isDigit, false)("123 123") == "123" &&
  whileParser(isDigit, false)("12345")   == "12345" &&
  whileParser(isDigit, false)("1")       == "1" &&
  whileParser(isDigit, false)("1abc")    == "1" &&
  whileParser(isDigit, false)("abc")   is ParseFailure &&
  whileParser(isDigit, false)("")      is ParseFailure)

assert(
  whitespaceParser()("  123")   == "  " &&
  whitespaceParser()(" a")      == " " &&
  whitespaceParser()(" \n\t ")  == " \n\t " &&
  whitespaceParser()("")        == "" &&
  whitespaceParser()("abc")     == "")

assert(
  lineParser()("abc sdf hello world")   == "abc sdf hello world" &&
  lineParser()("abc sdf\nhello world")  == "abc sdf\n" &&
  lineParser()("") is ParseFailure)

assert(
  quotedStringParser()("\"Hello World\"")     == "Hello World" &&
  quotedStringParser()("\"Hello\" \"World\"") == "Hello" &&
  quotedStringParser()("Hello world")         is ParseFailure &&
  quotedStringParser()("\"Hello world")       is ParseFailure &&
  quotedStringParser()("\"Hello world\n\"")   is ParseFailure)

assert(
  txtIntParser()("1")                == 1 &&
  txtIntParser()("-1")               == -1 &&
  txtIntParser()("+1")               == 1 &&
  txtIntParser()("1337")             == 1337 &&
  txtIntParser()(intMax().string())  == intMax() &&
  txtIntParser()(intMin().string())  == intMin() &&
  txtIntParser()("2147483648")       == -2147483647 - 1)

assert(
  txtIntParser()("")         is ParseFailure &&
  txtIntParser()("a")        is ParseFailure &&
  txtIntParser()(" 123")     is ParseFailure)

assert(
  txtFloatParser()("0")            == 0.0 &&
  txtFloatParser()("1")            == 1.0 &&
  txtFloatParser()("0001")         == 1.0 &&
  txtFloatParser()("0e10")         == 0.0 &&
  txtFloatParser()("0e-10")        == 0.0 &&
  txtFloatParser()("-1")           == -1.0 &&
  txtFloatParser()("+1")           == 1.0 &&
  txtFloatParser()("-1.1")         == -1.1 &&
  txtFloatParser()("+1.1")         == 1.1 &&
  txtFloatParser()("-.1")          == -0.1 &&
  txtFloatParser()("+.1")          == 0.1 &&
  txtFloatParser()("42e0")         == 42.0 &&
  txtFloatParser()("42e1")         == 420.0 &&
  txtFloatParser()("42e2")         == 4200.0 &&
  txtFloatParser()("42e+0")        == 42.0 &&
  txtFloatParser()("42e+1")        == 420.0 &&
  txtFloatParser()("42e+2")        == 4200.0 &&
  txtFloatParser()("42e-0")        == 42.0 &&
  txtFloatParser()("42e-1")        == 4.2 &&
  txtFloatParser()("42e-2")        == .42 &&
  txtFloatParser()("42.1337")      == 42.1337 &&
  txtFloatParser()("42.1337e4")    == 421337.0 &&
  txtFloatParser()("+42.1337E-2")  == .421337 &&
  txtFloatParser()("-42.1337E-2")  == -.421337 &&
  (txtFloatParser()("4000000000") ?? -1.0).approx(4000000000.0))

assert(
  txtFloatParser()("")       is ParseFailure &&
  txtFloatParser()("--1")    is ParseFailure &&
  txtFloatParser()("-+1")    is ParseFailure &&
  txtFloatParser()(" 1.0")   is ParseFailure &&
  txtFloatParser()("1. 0 ")  is ParseFailure)

assert(
  txtBoolParser()("true")  == true &&
  txtBoolParser()("TRUE")  == true &&
  txtBoolParser()("True")  == true &&
  txtBoolParser()("false") == false &&
  txtBoolParser()("FALSE") == false &&
  txtBoolParser()("False") == false)

assert(
  txtBoolParser()("")      is ParseFailure &&
  txtBoolParser()("tRuE")  is ParseFailure &&
  txtBoolParser()("fAlSe") is ParseFailure &&
  txtBoolParser()("abc")   is ParseFailure)

assert(
  p = (matchParser("Hello ") | matchParser("Greetings ")) & matchParser("World");
  p("Hello World")      == Pair("Hello ", "World") &&
  p("Greetings World")  == Pair("Greetings ", "World") &&
  p("HelloWorld") is ParseFailure)

assert(
  p = txtBoolParser() | txtIntParser();
  p("42")   == 42 &&
  p("true") == true &&
  p("hello") is ParseFailure)

assert(
  p = matchParser("Hello ") >> matchParser("World");
  p("Hello World") == "World" &&
  p("Hello ") is ParseFailure &&
  p("World")  is ParseFailure &&
  p("abc")    is ParseFailure)

assert(
  p = matchParser("Hello") << matchParser(" World");
  p("Hello World") == "Hello" &&
  p("Hello")  is ParseFailure &&
  p(" World") is ParseFailure &&
  p("abc")    is ParseFailure)

assert(
  p = txtIntParser().map(lambda (int i) i * i);
  p("123") == 123 * 123 &&
  p("") is ParseFailure)

assert(
  p = txtIntParser().map(lambda (int i) i == 42);
  p("123")  == false &&
  p("42")   == true &&
  p("") is ParseFailure)

assert(
  p = txtBoolParser() :: txtBoolParser() :: txtBoolParser();
  p("truefalsetrue") == true :: false :: true :: List{bool}() &&
  p("truefalse")  is ParseFailure &&
  p("")           is ParseFailure)

assert(
  p = (txtBoolParser() & txtBoolParser()).unwrap(lambda (bool a, bool b) a && b);
  p("truefalse")  == false &&
  p("truetrue")   == true &&
  p("true")   is ParseFailure &&
  p("")       is ParseFailure)

assert(
  p = (txtBoolParser() & txtBoolParser() & txtBoolParser()).unwrap(
    lambda (bool a, bool b, bool c) a && b && c);
  p("truefalsetrue")  == false &&
  p("truetruetrue")   == true &&
  p("truefalse")  is ParseFailure &&
  p("")           is ParseFailure)

assert(
  p = manyParser(txtBoolParser(), false);
  p("truefalsetruetrue")  == true :: false :: true :: true :: List{bool}() &&
  p("true")               == true :: List{bool}() &&
  p("true1")              == true :: List{bool}() &&
  p("")                   == List{bool}())

assert(
  p = manyParser(txtBoolParser(), true);
  p("true1true") is ParseFailure)

assert(
  p = manyParser(txtIntParser(), matchParser(','));
  p("42,1337,1,2")  == 42 :: 1337 :: 1 :: 2 :: List{int}() &&
  p("42")           == 42 :: List{int}() &&
  p("")             == List{int}())
