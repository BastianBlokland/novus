import "std/console.nov"
import "std/future.nov"
import "std/list.nov"

// -- Types

struct ProcessId  = long id
struct ExitCode   = int code

enum Signal =
  Interupt  : 0,
  Kill      : 1

struct Process =
  string      cmdLine,
  sys_process handle,
  ProcessId   id,
  sys_stream  stdIn,
  sys_stream  stdOut,
  sys_stream  stdErr

struct ProcessResult =
  string    stdOut,
  string    stdErr,
  ExitCode  exitCode

// -- Conversions

fun string(ProcessId p)
  "[" + p.id + "]"

fun string(Signal s)
  if s == Signal.Interupt -> "Interupt"
  if s == Signal.Kill     -> "Kill"
  else                    -> "Unknown signal"

fun string(ExitCode p)
  p.code.string()

fun string(Process p)
  "(" + p.id + ", " + p.cmdLine + ")"

fun string(ProcessResult r)
  "(" + r.exitCode + ")"

// -- Functions

fun toCmdLine(string prog, List{string} args) -> string
  escapeSingleQuotes = (lambda (string s) s.replace("'", "\\'"));
  (prog :: args).map(escapeSingleQuotes).string("'", "' '", "'")

fun isSuccess(ExitCode ec)
  ec.code == 0

fun isSuccess(ProcessResult r)
  r.exitCode.isSuccess()

// -- Actions

act run(string prog, List{string} args) -> Either{Process, Error}
  run(toCmdLine(prog, args))

act run(string cmdLine) -> Either{Process, Error}
  handle  = intrinsic{process_start}(cmdLine);
  pid     = ProcessId(intrinsic{process_getid}(handle));
  if pid.id < 0 -> getPlatformError("Failed to run: '" + cmdLine + "'")
  else          ->
    Process(
      cmdLine, handle, pid,
      intrinsic{process_openstream}(handle, 0),
      intrinsic{process_openstream}(handle, 1),
      intrinsic{process_openstream}(handle, 2))

act sendInterupt(Process p) -> Option{Error}
  p.sendSignal(Signal.Interupt)

act sendSignal(Process p, Signal s) -> Option{Error}
  intrinsic{process_sendsignal}(p.handle, int(s))
    ? None()
    : Error("Failed to send signal: '" + s + "'")

act wait(Either{Process, Error} pOrErr) -> Either{ProcessResult, Error}
  pOrErr.map(impure lambda (Process p) p.wait())

act wait(Process p) -> Either{ProcessResult, Error}
  stdOutRes = p.stdOut.readToEnd();
  stdErrRes = p.stdErr.readToEnd();
  if stdOutRes as Error outErr -> outErr
  if stdErrRes as Error errErr -> errErr
  else ->
    ProcessResult(
      stdOutRes ?? "",
      stdErrRes ?? "",
      ExitCode(intrinsic{process_block}(p.handle)))

act waitAsync(Process p) -> future{Either{ProcessResult, Error}}
  fork p.wait()

act shutdown(Process p) -> Either{ProcessResult, Error}
  result = p.waitAsync();
  if p.sendSignal(Signal.Interupt) as Error interuptErr -> interuptErr
  else ->
  if result.get(seconds(1)) as Either{ProcessResult, Error} processRes -> processRes
  else ->
  if p.sendSignal(Signal.Kill) as Error killErr -> killErr
  else -> result.get()

// -- Tests

assert(
  p = run("cmake", "-E" :: "echo" :: "Hello world" :: List{string}()).failOnError();
  p.id.id > 0 &&
  p.cmdLine == "'cmake' '-E' 'echo' 'Hello world'")

assert(
  r = run("cmake", "-E" :: "echo" :: "Hello world").wait().failOnError();
  r.stdOut.startsWith("Hello world") &&
  r.stdErr.isEmpty() &&
  r.exitCode == ExitCode(0))

assert(
  r = run("cmake", "--version" :: List{string}()).wait().failOnError();
  r.stdOut.startsWith("cmake version") &&
  r.stdErr.isEmpty() &&
  r.exitCode == ExitCode(0))

assert(
  r = run("cmake", "--invalid" :: List{string}()).wait().failOnError();
  r.stdOut.isEmpty() &&
  r.stdErr.startsWith("CMake Error") &&
  r.exitCode == ExitCode(1))
