import "std/bits.nov"
import "std/error.nov"
import "std/parser.nov"
import "std/stream.nov"

// -- Types

struct Console =
  sys_stream  stdIn,
  sys_stream  stdOut,
  sys_stream  stdErr

// -- Actions

act consoleOpen() -> Either{Console, Error}
  stdIn   = consoleOpenStream(0);
  stdOut  = consoleOpenStream(1);
  stdErr  = consoleOpenStream(2);
  if stdIn.streamCheckValid() && stdOut.streamCheckValid() && stdErr.streamCheckValid() ->
    Console(stdIn, stdOut, stdErr)
  else ->
    Error("Failed to open console")

act setNoBlockInput(Console c) -> bool
  c.stdIn.setOptions(StreamOptions.NoBlock)

act unsetNoBlockInput(Console c) -> bool
  c.stdIn.unsetOptions(StreamOptions.NoBlock)

act readChar(Console c) -> char
  c.stdIn.readChar()

act readLine(Console c) -> string
  c.stdIn.readLine()

act readToEnd(Console c) -> string
  c.stdIn.readToEnd()

act readToEnd{T}(Console c, Parser{T} parser) -> Either{T, Error}
  parser.run(c.readToEnd())

act readChar() -> char
  consoleOpen().failOnError().readChar()

act readLine() -> string
  consoleOpen().failOnError().readLine()

act writeOut(Console c, string str) -> Option{Error}
  c.stdOut.write(str)
    ? None()
    : Error("Failed to write to the stdOut stream of the console")

act writeOut(Console c, char ch) -> Option{Error}
  c.stdOut.write(ch)
    ? None()
    : Error("Failed to write to the stdOut stream of the console")

act writeOut{T}(Console c, Writer{T} writer, T val) -> Option{Error}
  c.write(writer.run(val))

act writeErr(Console c, string str) -> Option{Error}
  c.stdErr.write(str)
    ? None()
    : Error("Failed to write to the stdErr stream of the console")

act writeErr(Console c, char ch) -> Option{Error}
  c.stdErr.write(ch)
    ? None()
    : Error("Failed to write to the stdErr stream of the console")

act writeErr{T}(Console c, Writer{T} writer, T val) -> Option{Error}
  c.write(writer.run(val))

act flushOut(Console c)
  c.stdOut.streamFlush()

act flushErr(Console c)
  c.stdErr.streamFlush()

act print{T}(T x) -> Option{Error}
  c       = consoleOpen().failOnError();
  success =   c.stdOut.streamWrite(x.string() + '\n') &&
              c.stdOut.streamFlush();
  success ? None() : Error("Failed to write to the stdOut stream of the console")

act printErr{T}(T x) -> Option{Error}
  c       = consoleOpen().failOnError();
  success =   c.stdOut.streamWrite(x.string() + '\n') &&
              c.stdOut.streamFlush();
  success ? None() : Error("Failed to write to the stdErr stream of the console")

act printBits(int i) -> Option{Error}
  print(toBitString(i, false))

act printBits(float f) -> Option{Error}
  print(toBitString(asInt(f), false))

act printHex(int i) -> Option{Error}
  print(toHexString(i))

act printHex(float f) -> Option{Error}
  print(toHexString(asInt(f)))
