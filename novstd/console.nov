import "std/bits.nov"
import "std/error.nov"
import "std/parser.nov"
import "std/stream.nov"

// -- Types

enum ConsoleKind =
  StdIn : 0,
  StdOut,
  StdErr

struct Console =
  ConsoleKind kind,
  sys_stream  stream

// -- Conversions

fun string(ConsoleKind k)
  if k == ConsoleKind.StdIn   -> "StdIn"
  if k == ConsoleKind.StdOut  -> "StdOut"
  if k == ConsoleKind.StdErr  -> "StdErr"
  else                        -> "Unkown"

// -- Actions

act consoleOpen(ConsoleKind kind) -> Either{Console, Error}
  stream = consoleOpenStream(kind);
  if stream.streamCheckValid()  -> Console(kind, stream)
  else                          -> Error("Failed to open console: '" + kind.string() + "'")

act setOptions(Console c, StreamOptions opts) -> bool
  c.stream.setOptions(opts)

act unsetOptions(Console c, StreamOptions opts) -> bool
  c.stream.unsetOptions(opts)

act readChar(Console c) -> char
  c.stream.readChar()

act readLine(Console c) -> string
  c.stream.readLine()

act readToEnd(Console c) -> string
  c.stream.readToEnd()

act readToEnd{T}(Console c, Parser{T} parser) -> Either{T, Error}
  parser.run(c.readToEnd())

act readChar() -> Either{char, Error}
  consoleOpen(ConsoleKind.StdIn).map(impure lambda (Console c) c.readChar())

act readLine() -> Either{string, Error}
  consoleOpen(ConsoleKind.StdIn).map(impure lambda (Console c) c.readLine())

act write(Console c, string str) -> Option{Error}
  c.stream.write(str)
    ? none()
    : Error("Failed to write to console")

act write(Console c, char ch) -> Option{Error}
  c.stream.write(ch)
    ? none()
    : Error("Failed to write to console")

act write{T}(Console c, Writer{T} writer, T val) -> Option{Error}
  c.write(writer(val).string())

act flush(Console c)
  c.stream.streamFlush()

act writeStdOut(string str) -> Option{Error}
  consoleOpen(ConsoleKind.StdOut).map(impure lambda (Console c) c.write(str))

act writeStdErr(string str) -> Option{Error}
  consoleOpen(ConsoleKind.StdErr).map(impure lambda (Console c) c.write(str))

act print{T}(T x) -> Option{Error}
  consoleOpen(ConsoleKind.StdOut).map(impure lambda (Console c)
    success =   c.stream.streamWrite(x.string()) &&
                c.stream.streamWrite('\n')       &&
                c.stream.streamFlush();
    success ? none() : Error("Failed to write to console")
  )

act printErr{T}(T x) -> Option{Error}
  consoleOpen(ConsoleKind.StdErr).map(impure lambda (Console c)
    success =   c.stream.streamWrite(x.string()) &&
                c.stream.streamWrite('\n')       &&
                c.stream.streamFlush();
    success ? none() : Error("Failed to write to console")
  )

act printBits(int i) -> Option{Error}
  print(toBitString(i, false))

act printBits(float f) -> Option{Error}
  print(toBitString(asInt(f), false))

act printHex(int i) -> Option{Error}
  print(toHexString(i))

act printHex(float f) -> Option{Error}
  print(toHexString(asInt(f)))
