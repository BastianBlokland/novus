// --- Example program that runs a platform specific process.
// In the future we can consider actually replacing 'scripts/test.sh' and 'scripts/test.ps1' by a
// novus program that invokes ctest directly.

import "std.ns"

// -- Types

struct TestRun =
  DateTime  startTime,
  Process   process

struct TestResult =
  bool      success,
  Duration  duration

// -- Actions

act runBash(string file, List{string} args) -> Process
  run("bash", file :: args).failOnError()

act runPowerShell(string file, List{string} args) -> Process
  run("pwsh", "-NoLogo" :: "-NonInteractive" :: file :: args).failOnError()

act startTests()
  process = (
    if platform() == Platform.Windows -> runPowerShell( "scripts/test.ps1", "-Dir"  :: "build")
    else                              -> runBash(       "scripts/test.sh",  "--dir" :: "build")
  );
  TestRun(timeNow(), process)

act getResult(TestRun run)
  res = run.process.wait().failOnError();
  TestResult(res.isSuccess(), timeNow() - run.startTime)

struct Settings

act main(Settings s)
  print("-- Starting tests");
  run = startTests();
  result = run.getResult();
  if result.success -> print(   "-- Tests succeeded in " + result.duration, TtyStyle.FgGreen)
  else              -> printErr("-- Tests failed in "   + result.duration, TtyStyle.FgRed)

fun cliIsInteruptable(Type{Settings} s) false

cli(main)
