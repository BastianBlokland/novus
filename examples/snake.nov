// --- Simple snake-like commandline game
// Demo: https://youtu.be/3JmnKoCtFiY
//
// This does require your terminal to support ansi escape sequences and support utf8.
// On unix this means almost any terminal, on windows this means the new
// 'Windows Terminal': https://github.com/microsoft/terminal and configuring your system to use
// utf8: https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal

import "std.nov"

// --- Config

fun pickupsCount()        5
fun initialPlayerLength() 2
fun growPerPickup()       5
fun simInterval()         milliseconds(75)

// --- Misc types

struct  I2  = int x, int y
struct  Box = I2 origin, I2 size
enum    Dir = up, down, right, left

fun I2(Dir d)
  if d == Dir.up    -> I2(0, -1)
  if d == Dir.down  -> I2(0, +1)
  if d == Dir.right -> I2(+1, 0)
  else              -> I2(-1, 0)

fun +(I2 a, I2 b)   I2(a.x + b.x, a.y + b.y)
fun -(I2 a, I2 b)   I2(a.x - b.x, a.y - b.y)
fun %(I2 a, I2 b)   I2(a.x % b.x, a.y % b.y)
fun *(I2 a, int b)  I2(a.x * b, a.y * b)
fun +(I2 a, int b)  I2(a.x + b, a.y + b)
fun -(I2 a, int b)  I2(a.x - b, a.y - b)
fun +(I2 a, Dir b)  a + I2(b)
fun -(I2 a, Dir b)  a - I2(b)

fun center(Box b)   I2(b.origin.x + b.size.x / 2, b.origin.y + b.size.y / 2)
fun min(Box b)      b.origin
fun max(Box b)      b.origin + b.size

fun toI2(Pair{int, int} p)  I2(p.first, p.second)
fun toDir(int i)            Dir(i)

fun opposite(Dir dir)
  if dir == Dir.up    -> Dir.down
  if dir == Dir.down  -> Dir.up
  if dir == Dir.right -> Dir.left
  else                -> Dir.right

// Wrap inside a box, excludes 'edges' of the box.
fun wrap(Box b, I2 pos)
  d = (pos - b.origin) % (b.size - 2);
  I2(
    d.x <= 0 ? (b.max().x + d.x - 2) : (b.min().x + d.x),
    d.y <= 0 ? (b.max().y + d.y - 2) : (b.min().y + d.y)
  )

fun rngInside(Rng r, Box b)
  r.rngNext(b.min().x + 1, b.max().x - 1).
    rngNext(b.min().y + 1, b.max().y - 1).map(toI2)

fun rngDir(Rng r)
  r.rngNext(0, 4).map(toDir)

// --- Game state

struct PlayerState = I2 pos, Dir dir, List{I2} segments, int grow
struct PickupState = I2 pos, int value
struct GameState   =
  Rng               rng,
  PlayerState       player,
  List{PickupState} pickups,
  int               score,
  bool              gameover

fun withPlayer(GameState s, PlayerState p)
  GameState(s.rng, p, s.pickups, s.score, s.gameover)

fun withRng(GameState s, Rng r)
  GameState(r, s.player, s.pickups, s.score, s.gameover)

fun withPickups(GameState s, List{PickupState} l)
  GameState(s.rng, s.player, l, s.score, s.gameover)

fun addScore(GameState s, int additionalScore)
  GameState(s.rng, s.player, s.pickups, s.score + additionalScore, s.gameover)

fun setGameover(GameState s)
  GameState(s.rng, s.player, s.pickups, s.score, true)

fun createGame(Rng r, Box window)
  r1 = createPlayer(r, window);
  r2 = createPickups(r1.rng, window, pickupsCount());
  GameState(r2.rng, r1.val, r2.val, 0, false)

fun createPlayerSegs(I2 pos, Dir dir, int length)
  rangeList(1, length).map(lambda (int i) pos - I2(dir) * i)

fun createPlayer(Rng r, Box window)
  r.rngDir().map(lambda (Dir dir)
    pos = window.center();
    segs = createPlayerSegs(pos, dir, initialPlayerLength());
    PlayerState(pos, dir, segs, 0)
  )

fun createPickup(Rng r, Box window)
  r.rngInside(window).rngNext(1, 4).map(lambda (Pair{I2, int} roll)
    PickupState(roll.first, roll.second))

fun createPickups(Rng r, Box window, int count)
  r.rngList(count, createPickup[window])

fun isSelfColliding(PlayerState player)
  player.segments.contains(player.pos)

fun getPickups(GameState game, I2 pos)
  game.pickups.filter(lambda (PickupState p) p.pos == pos)

// --- Input

union   Input = InputNone, InputQuit, InputRestart, InputTurn
struct  InputNone
struct  InputQuit
struct  InputRestart
struct  InputTurn = Dir dir

fun apply(InputTurn input, Dir cur)
  if input.dir == cur.opposite()  -> cur
  else                            -> input.dir

fun getInput(string str) -> Input
  lastChar = str.last();
  if lastChar == 'q' -> InputQuit()
  if lastChar == 'r' -> InputRestart()
  if lastChar == 'w' -> InputTurn(Dir.up)
  if lastChar == 's' -> InputTurn(Dir.down)
  if lastChar == 'd' -> InputTurn(Dir.right)
  if lastChar == 'a' -> InputTurn(Dir.left)
  else               -> InputNone()

// --- Simulation

fun simulateGame(GameState g, Box win, Input input)
  if g.gameover -> g
  else ->
    g. simulatePlayer(win, input).
       simulatePickups(win).
       simulateGameover()

fun simulatePlayer(GameState g, Box win, Input input)
  newDir          = input as InputTurn turn ? turn.apply(g.player.dir) : g.player.dir;
  newPos          = win.wrap(g.player.pos + newDir);
  hitPickup       = !g.getPickups(newPos).isEmpty();
  grow            = g.player.grow + (hitPickup ? growPerPickup() : 0 );
  newSegments     = g.player.pos :: (grow == 0 ? g.player.segments.popBack() : g.player.segments);
  g.withPlayer(PlayerState(newPos, newDir, newSegments, max(grow - 1, 0)))

fun simulatePickups(GameState g, Box win)
  colPickups      = g.getPickups(g.player.pos);
  remPickups      = g.pickups.filter(lambda (PickupState p) !colPickups.contains(p));
  newPickupsRoll  = createPickups(g.rng, win, colPickups.length());
  score           = colPickups.fold(lambda (int accum, PickupState s) accum + s.value);
  g.  withRng(newPickupsRoll.rng).
      withPickups(newPickupsRoll.val :: remPickups).
      addScore(score)

fun simulateGameover(GameState g)
  g.player.isSelfColliding() ? g.setGameover() : g

// -- Game loop

act loop(Console c)
  loop(c, Duration(0), createGame(rngInit(), getWindow()))

act loop(Console c, Duration prevFrameDur, GameState state)
  t1      = timestamp();
  window  = getWindow();
  input   = getInput(c.readToEnd());
  if input is InputQuit || interuptIsRequested()  -> false
  if input is InputRestart                        -> loop(c)
  else ->
    newState  = simulateGame(state, window, input);
    c.drawGame(newState, window, prevFrameDur);

    frameDur  = timestamp() - t1;
    sleep(simInterval() - frameDur);
    loop(c, frameDur, newState)

// --- Draw game state

act drawGame(Console c, GameState g, Box window, Duration frameDur)
  c.termClearScreen();
  c.drawBackground(g, window, frameDur);
  c.drawPickups(g.pickups);
  c.drawPlayer(g.player);
  c.flushOut()

act drawBackground(Console c, GameState g, Box window, Duration frameDur)
  c.termStyle(TermStyle.FgBrightWhite);
  c.termStyle(g.gameover ? TermStyle.BgBrightRed : TermStyle.BgGreen);
  c.drawBox(window);
  c.drawAt(
    " Score: " + g.score.string(4) + " ─ " +
    "Quit: q ─ " +
    "Restart: r ─ " +
    "Steering: w, a, s, d ─ " +
    "FT: " + frameDur + " ",
    I2(5, 1));
  c.termStyle(TermStyle.Reset)

act drawPickups(Console c, List{PickupState} pickups)
  pickups.mapReverse(impure lambda (PickupState p) c.drawPickup(p))

act drawPickup(Console c, PickupState pickup)
  c.termStyle(
    if pickup.value == 3 -> TermStyle.FgBrightYellow
    if pickup.value == 2 -> TermStyle.FgBrightCyan
    else                 -> TermStyle.FgBrightMagenta
  );
  c.drawAt("●", pickup.pos);
  c.termStyle(TermStyle.Reset)

act drawPlayer(Console c, PlayerState player)
  c.drawAt(
    if player.dir == Dir.up     -> "▲"
    if player.dir == Dir.down   -> "▼"
    if player.dir == Dir.right  -> "►"
    else                        -> "◄", player.pos);
  player.segments.mapReverse(impure lambda (I2 s) c.drawAt("●", s))

// --- Misc drawing

act drawBox(Console c, Box b)
  c.drawAt(   "┌",  b.origin);
  c.drawAt(   "┐",  b.origin + I2(b.size.x - 1, 0));
  c.drawAt(   "└",  b.origin + I2(0,            b.size.y));
  c.drawAt(   "┘",  b.origin + I2(b.size.x - 1, b.size.y));
  c.drawAtHor("─",  b.origin + I2(1,            0),         b.size.x - 2);
  c.drawAtHor("─",  b.origin + I2(1,            b.size.y),  b.size.x - 2);
  c.drawAtVer("│",  b.origin + I2(0,            1),         b.size.y - 2);
  c.drawAtVer("│",  b.origin + I2(b.size.x - 1, 1),         b.size.y - 2)

act drawAtHor(Console c, string str, I2 pos, int times)
  drawTimes = ( impure lambda (int times)
    if times <= 0 -> true
    else          -> c.writeOut(str); self(--times)
  );
  c.termCursorPos(pos.y, pos.x);
  drawTimes(times)

act drawAtVer(Console c, string str, I2 pos, int times)
  drawTimes = ( impure lambda (int i)
    if i >= times -> true
    else          ->
      c.termCursorPos(pos.y + i, pos.x);
      c.writeOut(str);
      self(++i)
  );
  drawTimes(0)

act drawAt(Console c, string str, I2 pos)
  c.termCursorPos(pos.y, pos.x);
  c.writeOut(str)

// --- Entry point

act main()
  console = consoleOpen().failOnError();
  setupTerminal(console);
  loop(console);
  resetTerminal(console)

main()

// --- Terminal setup

act getWindow()
  Box(I2(1, 1), I2(termGetWidth(), termGetHeight()))

act setupTerminal(Console c)
  c.termSetOptions(TermOptions.NoEcho | TermOptions.NoBuffer);
  c.termAltScreen(true);
  c.termCursorShow(false);
  c.setNoBlockInput()

act resetTerminal(Console c)
  c.termCursorShow(true);
  c.termAltScreen(false);
  c.termStyle(TermStyle.Reset);
  c.termUnsetOptions(TermOptions.NoEcho | TermOptions.NoBuffer);
  c.writeOut('\n');
  c.unsetNoBlockInput()
