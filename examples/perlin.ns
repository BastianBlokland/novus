// --- Commandline graphics demo using perlin noise.
// Demo: https://youtu.be/bcD3IsEBXnA

import "std.ns"

struct Settings =
  Duration  drawInterval,
  int       drawIterations,
  float     xyScale,
  float     speed,
  float     intensityScale,
  float     bgCutoff,
  float     redThreshold,
  float     blueShift,
  float     fillThreshold

struct Size = int width, int height

struct CellContent =
  TtyColor  color,
  string    text

struct RowContent =
  int               row,
  List{CellContent} cells

struct ScreenContent =
  List{RowContent} rows

// -- Content

fun getCell(int row, int col, Duration t, Settings s) -> CellContent
  n = perlinNoise3d(col * s.xyScale, row * s.xyScale, float(t) * s.speed) * s.intensityScale;
  CellContent(
    n < s.bgCutoff
      ? TtyColor(black())
      : TtyColor(Color(n < s.redThreshold ? 1 : n, n, s.blueShift + n * (1.0 - s.blueShift))),
    n < s.fillThreshold ? "○" : "●"
  )

fun getRow(int row, Size size, Duration t, Settings s) -> RowContent
  RowContent(
    row,
    for(1, size.width + 1, lambda (int col) getCell(row, col, t, s))
  )

// Can be spread along multiple frames by specifying more then 1 'numItrs'.
fun getContent(Size size, int itr, int numItrs, Duration t, Settings s) -> ScreenContent
  yOffset = itr % numItrs;
  ScreenContent(
    invoke(lambda (int row, List{RowContent} result)
      if row > size.height  -> result
      else                  -> self(row + numItrs, getRow(row, size, t, s) :: result)
    , (itr % numItrs) + 1, List{RowContent}())
  )

// -- Writers

fun cellWriter() -> Writer{CellContent}
  (
    ttyStyleFgColorWriter() & stringWriter()
  ).to(Type{CellContent}())

fun rowWriter() -> Writer{RowContent}
  (
    ttyCursorPosWriter() & listWriter(cellWriter())
  ).map(lambda (RowContent rc) Tuple(TtyCursorPos(rc.row, 0), rc.cells))

fun screenWriter() -> Writer{ScreenContent}
  (
    ttyLitCursorShowWriter(false) &
    listWriter(rowWriter())
  ).map(lambda (ScreenContent sc) sc.rows)

// -- Driver code

act loop( Console               c,
          Settings              s,
          Writer{ScreenContent} writer  = screenWriter(),
          Timestamp             begin   = timestamp(),
          int                   frame   = 0) -> Option{Error}
  if interuptIsRequested() -> None()
  else ->
    now     = timestamp();
    elapsed = now - begin;
    size    = getSize(c);
    content = getContent(size, frame, s.drawIterations, elapsed, s);
    res     = actSeq(
      lazy c.writeOut(writer, content),
      lazy sleep(s.drawInterval)
    );
    if res as Error e -> e.code == PlatformError.ConsoleNoLongerAvailable ? None() : e
    else              -> self(c, s, writer, begin, ++frame)

// --- Entry point

fun cliDefaults(Type{Settings} t)
  CliDefault("draw-interval",   "15ms") ::
  CliDefault("draw-iterations", "4")    ::
  CliDefault("xy-scale",        "0.04") ::
  CliDefault("speed",           "0.1")  ::
  CliDefault("intensity-scale", "1.2")  ::
  CliDefault("bg-cutoff",       "0.03") ::
  CliDefault("red-threshold",   "0.15") ::
  CliDefault("blue-shift",      "0.4")  ::
  CliDefault("fill-threshold",  "0.35")

fun cliCleanupAction(Type{Settings} t) resetTerminal

act driver(Settings s)
  c = consoleOpen().failOnError();
  c.failIfNotTerm();
  setupTerminal().failOnError();
  loop(c, s)

cli(driver)

// --- Terminal setup

act getSize(Console c)
  Size(
    c.termGetWidth().failOnError(),
    c.termGetHeight().failOnError()
  )

act setupTerminal()
  c = consoleOpen().failOnError();
  c.writeOut(
    ttyLitAltScreenWriter(true)           &
    ttyLitClearWriter(TtyClearMode.All)   &
    ttyLitWindowTitleWriter("Novus Perlin Noise"))

act resetTerminal()
  c = consoleOpen().failOnError();
  c.writeOut(
    ttyLitCursorShowWriter(true)          &
    ttyLitClearWriter(TtyClearMode.All)   &
    ttyLitAltScreenWriter(false))
