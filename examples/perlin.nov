// --- Commandline graphics demo using perlin noise.
// Demo: https://youtu.be/bcD3IsEBXnA
//
// This does require your terminal to support ansi escape sequences and support utf8.
// On unix this means almost any terminal, on windows this means the new
// 'Windows Terminal': https://github.com/microsoft/terminal and configuring your system to use
// utf8: https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal

import "std.nov"

struct  I2        = int x, int y
struct  Box       = I2 origin, I2 size
struct  Settings  =
  Duration  drawInterval,
  int       drawIterations,
  float     xyScale,
  float     speed,
  float     intensityScale,
  float     bgCutoff,
  float     redThreshold,
  float     blueShift,
  float     fillThreshold

fun +(I2 a, I2 b)
  I2(a.x + b.x, a.y + b.y)

fun -(I2 a, I2 b)
  I2(a.x - b.x, a.y - b.y)

fun min(Box b)
  b.origin

fun max(Box b)
  b.origin + b.size

act draw(I2 pos, Console c, Settings s, Duration t)
  n = perlinNoise3d(pos.x * s.xyScale, pos.y * s.xyScale, float(t) * s.speed) * s.intensityScale;
  color = n < s.bgCutoff
    ? black()
    : Color(n < s.redThreshold ? 1 : n, n, s.blueShift + n * (1.0 - s.blueShift));
  actSeq(
    lazy c.termCursorPos(pos.y, pos.x),
    lazy c.termColor(color),
    lazy c.writeOut(n < s.fillThreshold ? "○" : "●"),
    lazy c.flushOut()
  )

act loop(Console c, Settings s, Timestamp begin, int frame) -> Option{Error}
  if c.readToEnd().length() != 0 || interuptIsRequested() -> None()
  else ->
    now     = timestamp();
    elapsed = now - begin;
    actSeq(
      lazy forBox(getWindow(), draw[elapsed][s][c], frame, s.drawIterations),
      lazy sleep(s.drawInterval)
    ) as Error e ? e
                 : self(c, s, begin, ++frame)

// Allow overriding tweak values using environment options. (syntax: --[KEY] [VALUE])
act getSettings()
  Settings(
    milliseconds(getEnvOpt("drawInterval", txtIntParser())  ?? 20),
    getEnvOpt("drawIterations", txtIntParser())             ?? 6,
    getEnvOpt("xyScale", txtFloatParser())                  ?? 0.04,
    getEnvOpt("speed", txtFloatParser())                    ?? 0.1,
    getEnvOpt("intensityScale", txtFloatParser())           ?? 1.2,
    getEnvOpt("bgCutoff", txtFloatParser())                 ?? 0.03,
    getEnvOpt("redThreshold", txtFloatParser())             ?? 0.15,
    getEnvOpt("blueShift", txtFloatParser())                ?? 0.4,
    getEnvOpt("fillThreshold", txtFloatParser())            ?? 0.35)

// --- Utilities

// Call the action for each position in the box.
// Can be spread along multiple frames by specifying more then 1 'numItrs'.
act forBox(Box box, action{I2, Option{Error}} a, int itr, int numItrs)
  yOffset = itr % numItrs;
  xMax    = box.max().x;
  yMax    = box.max().y;
  invoke( impure lambda (int x, int y) -> Option{Error}
    if y >= yMax  -> None()
    if x >= xMax  -> self(0, y + numItrs)
    else ->
      a(I2(x, y)) as Error e ? e : self(++x, y)
    , box.min().x, box.min().y + yOffset)

// --- Entry point

act main()
  consoleOpen().map(impure lambda (Console c)
    res = actSeq(
      lazy setupTerminal(c),
      lazy loop(c, getSettings(), timestamp(), 0)
    );
    resetTerminal(c); res
  ).failOnError()

main()

// --- Terminal setup

act getWindow()
  Box(I2(1, 1), I2(termGetWidth(), termGetHeight()))

act setupTerminal(Console c)
  actSeq(
    lazy c.termSetOptions(TermOptions.NoEcho | TermOptions.NoBuffer),
    lazy c.termAltScreen(true),
    lazy c.termCursorShow(false),
    lazy c.setNoBlockInput()
  )

act resetTerminal(Console c)
  actSeq(
    lazy c.termCursorShow(true),
    lazy c.termAltScreen(false),
    lazy c.termStyle(TermStyle.Reset),
    lazy c.termUnsetOptions(TermOptions.NoEcho | TermOptions.NoBuffer),
    lazy c.writeOut('\n'),
    lazy c.unsetNoBlockInput()
  )

