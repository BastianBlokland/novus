// --- Example of a software raytracer.
// Output: https://www.bastian.tech/media/novus_raytracer.png

import "std.ns"
import "scene.ns"
import "cam.ns"

fun render(int width, int height, int threads, int bounces, float degVerFov) -> List{Color}
  scene             = createScene();
  aspect            = width / float(height);
  radVerFov         = degToRad(degVerFov);
  cam               = camFromAspectAndFov(aspect, radVerFov);
  yPixelsPerThread  = height / threads;
  parallelFor(threads, lambda (int i)
  (
    yStart        = yPixelsPerThread * i;
    lastThread    = (i == threads - 1);
    threadHeight  = lastThread ? (height - yPixelsPerThread * i) : yPixelsPerThread;
    makeColorGrid(width, threadHeight, lambda (int x, int y)
    (
      u = float(width - x + .5) / width;
      v = float(yStart + threadHeight - y + .5) / height;
      scene.getColor(cam.getRay(u, v), 0, bounces).gammaEncode()
    ))
  )).foldRight(combinePixels)

fun combinePixels(List{Color} result, List{Color} toAdd) -> List{Color}
  toAdd.fold((lambda (List{Color} result, Color c)
    c :: result
  ), result)

fun constMat(Color albedo, float reflectivity, float specularity, float specularPower) -> function{Vec3, Material}
  mat = Material(albedo, reflectivity, specularity, specularPower);
  lambda (Vec3 uv) mat

fun groundMat() -> function{Vec3, Material}
  lambda (Vec3 uv)
    p1  = perlinNoise3d(uv.x * 5.0, uv.y * 5.0, 1.0);
    p2  = perlinNoise3d(uv.x * 20.0, uv.y * 20.0, 1.0);
    p3  = perlinNoise3d(uv.x * 80.0, uv.y * 80.0, 1.5);
    v   = (p1 + p2 + p3) / 3;
    albedo        = lerp(Color(.015, .015, .015), Color(.18, .18, .1), v * v);
    reflectivity  = 0.15 * v;
    specularity   = v * .4;
    specularPower = 10;
    Material(albedo, reflectivity, specularity, specularPower)

fun createScene()
  matRedBall    = constMat(Color(.18, .01, .01), 0.25, 0.5, 20);
  matBlueBall   = constMat(Color(.01, .01, .18), 0.25, 0.5, 20);
  matGreenBall  = constMat(Color(.01, .18, .01), 0.25, 0.5, 20);
  matWhiteBall  = constMat(Color(.18, .18, .18), 0.25, 0.5, 20);
  matYellowBall = constMat(Color(.18, .18, 0.0), 0.25, 0.5, 20);
  matTealBall   = constMat(Color(0.0, .18, .18), 0.25, 0.5, 20);
  ground        = Object(Plane(Vec3(0.0, -1.0, 0.0), vec3Up(), vec3Right()), groundMat());
  s1            = Object(Sphere(Vec3(0.4, 0.0, -5.0), 1.0), matWhiteBall);
  s2            = Object(Sphere(Vec3(-1.3, -0.45, -2.5), 0.55), matGreenBall);
  s3            = Object(Sphere(Vec3(2.5, -0.2, -6.5), 0.8), matYellowBall);
  s4            = Object(Sphere(Vec3(5.5, -0.2, -7.0), 0.8), matTealBall);
  s5            = Object(Sphere(Vec3(-2, -0.2, -7.0), 0.8), matRedBall);
  s6            = Object(Sphere(Vec3(-.2, -0.6, -2.5), 0.4), matBlueBall);
  s7            = Object(Sphere(Vec3(2.5, -0.7, -3), 0.3), matWhiteBall);
  sun           = Light(DirLight(normalize(Vec3(.3, -.2, -.5)), white() * 2.0));
  redLight      = Light(PointLight(Vec3(3.0, .05, -4), Color(800, 0.0, 0.0)));
  Scene(
    ground :: s1 :: s2 :: s3 :: s4 :: s5 :: s6 :: s7,
    sun :: redLight)

struct Settings =
  int   width,
  int   height,
  int   threads,
  int   bounces,
  float fov,
  Path  outPath

act driver(Settings s)
  print("Begin rendering (" + s.width + "x" + s.height + ", threads: " + s.threads + " bounches: " + s.bounces + ")");
  res = bench(impure lambda () render(s.width, s.height, s.threads, s.bounces, s.fov));
  print("Finished rendering in " + res.dur);
  s.outPath.fileWrite(tgaWriter(), Image(s.width, s.height, res.value)).failOnError();
  print("Wrote result to file: " + s.outPath)

fun cliDefaults(Type{Settings} t)
  CliDefault("width",     "1280") ::
  CliDefault("height",    "720") ::
  CliDefault("threads",   "6") ::
  CliDefault("bounces",   "3") ::
  CliDefault("fov",       "60") ::
  CliDefault("out-path",  "image.tga")

cli(cliCmd("render", driver, "Render an image"),
    cliAppInfo("Novus Raytracer", "Example of a software raytracer writen in Novus.\n" +
                                  "Output: https://www.bastian.tech/media/novus_raytracer.png"))
