// --- Example program that runs a platform specific process.
// In the future we can consider actually replacing 'scripts/test.sh' and 'scripts/test.ps1' by a
// novus program that invokes ctest directly.

import "std.nov"

// -- Types

struct TestRun =
  DateTime  startTime,
  Process   process

struct TestResult =
  bool      success,
  Duration  duration

// -- Actions

act runBash(string file, List{string} args) -> Process
  run("bash", file :: args)

act runPowerShell(string file, List{string} args) -> Process
  run("pwsh", "-NoLogo" :: "-NonInteractive" :: file :: args)

act startTests()
  process = (
    if getPlatform() == Platform.Windows  -> runPowerShell( "scripts/test.ps1", "-Dir"  :: "build")
    else                                  -> runBash(       "scripts/test.sh",  "--dir" :: "build")
  );
  atInterupt(sendInterupt[process]);
  TestRun(timeNow(), process)

act printOutput(TestRun run)
  c   = consoleOpen().failOnError();
  out = fork copy(run.process.stdOut, c.stdOut);
  err = fork copy(run.process.stdErr, c.stdErr);
  waitAll(out :: err)

act getResult(TestRun run)
  res = run.process.wait().failOnError();
  TestResult(res.isSuccess(), timeNow() - run.startTime)

act main()
  print("-- Starting tests");
  run = startTests();
  printOutput(run);
  result = run.getResult();
  if result.success -> print(   "-- Tests succeeded in " + result.duration, TermStyle.FgGreen)
  else              -> printErr("-- Tests failed in "   + result.duration, TermStyle.FgRed)

main()
