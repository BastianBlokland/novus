// --- Simple snake-like commandline game
// Demo: https://youtu.be/3JmnKoCtFiY

import "std.ns"

// --- Config

struct Settings =
  Duration  simInterval,
  int       pickupCount,
  int       initialLength,
  int       growPerPickup

// --- Misc types

struct  I2        = int x, int y
struct  Box       = I2 origin, I2 size
enum    Dir       = up, down, right, left
struct  DrawInst  = I2 pos, string content

fun I2(Dir d)
  if d == Dir.up    -> I2(0, -1)
  if d == Dir.down  -> I2(0, +1)
  if d == Dir.right -> I2(+1, 0)
  else              -> I2(-1, 0)

fun +(I2 a, I2 b)   I2(a.x + b.x, a.y + b.y)
fun -(I2 a, I2 b)   I2(a.x - b.x, a.y - b.y)
fun %(I2 a, I2 b)   I2(a.x % b.x, a.y % b.y)
fun *(I2 a, int b)  I2(a.x * b, a.y * b)
fun +(I2 a, int b)  I2(a.x + b, a.y + b)
fun -(I2 a, int b)  I2(a.x - b, a.y - b)
fun +(I2 a, Dir b)  a + I2(b)
fun -(I2 a, Dir b)  a - I2(b)

fun center(Box b)   I2(b.origin.x + b.size.x / 2, b.origin.y + b.size.y / 2)
fun min(Box b)      b.origin
fun max(Box b)      b.origin + b.size

fun toI2(Tuple{int, int} p) I2(p.f1, p.f2)
fun toDir(int i)            Dir(i)

fun opposite(Dir dir)
  if dir == Dir.up    -> Dir.down
  if dir == Dir.down  -> Dir.up
  if dir == Dir.right -> Dir.left
  else                -> Dir.right

// Wrap inside a box, excludes 'edges' of the box.
fun wrap(Box b, I2 pos)
  d = (pos - b.origin) % (b.size - 2);
  I2(
    d.x <= 0 ? (b.max().x + d.x - 2) : (b.min().x + d.x),
    d.y <= 0 ? (b.max().y + d.y - 2) : (b.min().y + d.y)
  )

fun rngInside(Rng r, Box b)
  r.rngNext(b.min().x + 1, b.max().x - 1).
    rngNext(b.min().y + 1, b.max().y - 1).map(toI2)

fun rngDir(Rng r)
  r.rngNext(0, 4).map(toDir)

// --- Game state

struct PlayerState = I2 pos, Dir dir, List{I2} segments, int grow
struct PickupState = I2 pos, int value
struct GameState   =
  Settings          settings,
  Rng               rng,
  PlayerState       player,
  List{PickupState} pickups,
  int               score,
  bool              gameover

struct State =
  Settings  settings,
  GameState game,
  Box       window,
  Timestamp frameStart,
  Duration  lastFrameTime

fun withPlayer(GameState s, PlayerState p)
  GameState(s.settings, s.rng, p, s.pickups, s.score, s.gameover)

fun withRng(GameState s, Rng r)
  GameState(s.settings, r, s.player, s.pickups, s.score, s.gameover)

fun withPickups(GameState s, List{PickupState} l)
  GameState(s.settings, s.rng, s.player, l, s.score, s.gameover)

fun addScore(GameState s, int additionalScore)
  GameState(s.settings, s.rng, s.player, s.pickups, s.score + additionalScore, s.gameover)

fun setGameover(GameState s)
  GameState(s.settings, s.rng, s.player, s.pickups, s.score, true)

fun createGame(Settings s, Rng r, Box window)
  r1 = createPlayer(s, r, window);
  r2 = createPickups(r1.rng, window, s.pickupCount);
  GameState(s, r2.rng, r1.val, r2.val, 0, false)

fun createPlayerSegs(I2 pos, Dir dir, int length)
  rangeList(1, length).map(lambda (int i) pos - I2(dir) * i)

fun createPlayer(Settings s, Rng r, Box window)
  r.rngDir().map(lambda (Dir dir)
    pos = window.center();
    segs = createPlayerSegs(pos, dir, s.initialLength);
    PlayerState(pos, dir, segs, 0)
  )

fun createPickup(Rng r, Box window)
  r.rngInside(window).rngNext(1, 4).map(lambda (Tuple{I2, int} t) PickupState(t.f1, t.f2))

fun createPickups(Rng r, Box window, int count)
  r.rngList(count, createPickup[window])

fun isSelfColliding(PlayerState player)
  player.segments.contains(player.pos)

fun getPickups(GameState game, I2 pos)
  game.pickups.filter(lambda (PickupState p) p.pos == pos)

// --- Input

union   Input = InputNone, InputQuit, InputRestart, InputTurn
struct  InputNone
struct  InputQuit
struct  InputRestart
struct  InputTurn = Dir dir

fun apply(InputTurn input, Dir cur)
  if input.dir == cur.opposite()  -> cur
  else                            -> input.dir

fun getInput(string str) -> Input
  lastChar = str.last();
  if lastChar == 'q' -> InputQuit()
  if lastChar == 'r' -> InputRestart()
  if lastChar == 'w' -> InputTurn(Dir.up)
  if lastChar == 's' -> InputTurn(Dir.down)
  if lastChar == 'd' -> InputTurn(Dir.right)
  if lastChar == 'a' -> InputTurn(Dir.left)
  else               -> InputNone()

// --- Simulation

fun simulateGame(GameState g, Box win, Input input)
  if g.gameover -> g
  else ->
    g. simulatePlayer(win, input).
       simulatePickups(win).
       simulateGameover()

fun simulatePlayer(GameState g, Box win, Input input)
  newDir          = input as InputTurn turn ? turn.apply(g.player.dir) : g.player.dir;
  newPos          = win.wrap(g.player.pos + newDir);
  hitPickup       = !g.getPickups(newPos).isEmpty();
  grow            = g.player.grow + (hitPickup ? g.settings.growPerPickup : 0 );
  newSegments     = g.player.pos :: (grow == 0 ? g.player.segments.popBack() : g.player.segments);
  g.withPlayer(PlayerState(newPos, newDir, newSegments, max(grow - 1, 0)))

fun simulatePickups(GameState g, Box win)
  colPickups      = g.getPickups(g.player.pos);
  remPickups      = g.pickups.filter(lambda (PickupState p) !colPickups.contains(p));
  newPickupsRoll  = createPickups(g.rng, win, colPickups.length());
  score           = colPickups.fold(lambda (int accum, PickupState s) accum + s.value);
  g.  withRng(newPickupsRoll.rng).
      withPickups(newPickupsRoll.val :: remPickups).
      addScore(score)

fun simulateGameover(GameState g)
  g.player.isSelfColliding() ? g.setGameover() : g

// -- Game loop

act initState(Settings s, Console c)
  rng     = rngInit();
  window  = c.getWindow();
  game    = createGame(s, rng, window);
  State(s, game, window, timestamp(), Duration(0))

act updateState(Console c, State state, Input input) -> State
  window      = c.getWindow();
  game        = simulateGame(state.game, window, input);
  frameStart  = timestamp();
  State(state.settings, game, window, frameStart, frameStart - state.frameStart)

act loop(Console c, State state, Writer{State} writer = stateWriter()) -> Option{Error}
  input = getInput(c.readToEnd() ?? "");
  if input is InputQuit || interuptIsRequested()  -> None()
  if input is InputRestart                        -> loop(c, initState(state.settings, c))
  else ->
    newState = updateState(c, state, input);
    if c.writeOut(writer, newState) as Error drawErr -> drawErr
    else ->
      sleep(state.settings.simInterval - (timestamp() - newState.frameStart));
      loop(c, newState, writer)

// --- Drawing writers

fun stateWriter() -> Writer{State}
  (
    ttyLitClearWriter(TtyClearMode.All) &
    ttyLitCursorShowWriter(false) &
    uiWriter() &
    listWriter(pickupWriter()) &
    playerWriter()
  ).map(lambda (State state)
    Tuple(state, state.game.pickups, state.game.player)
  )

fun uiWriter() -> Writer{State}
  setupStyle = ttyLitStyleWriter(TtyStyle.FgBrightWhite) & ttyStyleWriter();
  resetStyle = ttyLitStyleWriter(TtyStyle.Reset);
  drawBg     = boxWriter();
  drawText   = (
    ttyLitCursorPosWriter(TtyCursorPos(1, 5)) &
    litWriter(" Score: ") & txtIntWriter() & litWriter(" ─ ") &
    litWriter("Quit: q ─ ") &
    litWriter("Restart: r ─ ") &
    litWriter("Steering: w, a, s, d ─ ") &
    litWriter("FT: ") & stringWriter()
  );
  (setupStyle & drawBg & drawText & resetStyle).map(lambda (State state)
    Tuple(
      state.game.gameover ? TtyStyle.BgBrightRed : TtyStyle.BgGreen,
      state.window,
      Tuple(state.game.score, state.lastFrameTime.string()))
  )

fun pickupWriter() -> Writer{PickupState}
  (
    ttyStyleWriter() & litAtWriter("●") & ttyLitStyleWriter(TtyStyle.Reset)
  ).map(lambda (PickupState p)
    style = (
      if p.value == 3 -> TtyStyle.FgBrightYellow
      if p.value == 2 -> TtyStyle.FgBrightCyan
      else            -> TtyStyle.FgBrightMagenta
    );
    Tuple(style, p.pos)
  )

fun playerWriter() -> Writer{PlayerState}
  (
    atWriter() & listWriter(litAtWriter("●"))
  ).map(lambda (PlayerState p)
    Tuple(
      DrawInst(p.pos,
        if p.dir == Dir.up     -> "▲"
        if p.dir == Dir.down   -> "▼"
        if p.dir == Dir.right  -> "►"
        else                   -> "◄"),
      p.segments)
  )

fun boxWriter() -> Writer{Box}
  corners = boxCornerWriter();
  horLine = atWriter();
  verLine = listWriter(atWriter());
  (
    corners & horLine & horLine & verLine & verLine
  ).map(lambda (Box b)
    horContent = string("─", b.size.x - 2);
    Tuple(b,
      DrawInst(b.origin + I2(1, 0),         horContent),
      DrawInst(b.origin + I2(1, b.size.y),  horContent),
      for(1, b.size.y - 1, lambda (int y) DrawInst(b.origin + I2(0, y),             "│")),
      for(1, b.size.y - 1, lambda (int y) DrawInst(b.origin + I2(b.size.x - 1, y),  "│")))
  )

fun boxCornerWriter() -> Writer{Box}
  (
    litAtWriter("┌") & litAtWriter("┐") & litAtWriter("└") & litAtWriter("┘")
  ).map(lambda (Box b) Tuple(
    b.origin + I2(0,            0),
    b.origin + I2(b.size.x - 1, 0),
    b.origin + I2(0,            b.size.y),
    b.origin + I2(b.size.x - 1, b.size.y)))

fun litAtWriter(string lit) -> Writer{I2}
  setCursorWriter() & litWriter(lit)

fun atWriter() -> Writer{DrawInst}
  (setCursorWriter() & stringWriter()).to(Type{DrawInst}())

fun setCursorWriter() -> Writer{I2}
  ttyCursorPosWriter().map(lambda (I2 p) TtyCursorPos(p.y, p.x))

// --- Entry point

fun cliDefaults(Type{Settings} t)
  CliDefault("sim-interval",    "75ms") ::
  CliDefault("pickup-count",    "5")    ::
  CliDefault("initial-length",  "2")    ::
  CliDefault("grow-per-pickup", "5")

fun cliCleanupAction(Type{Settings} t) resetTerminal

act driver(Settings s)
  c = consoleOpen().failOnError();
  c.failIfNotTerm();
  setupTerminal(c).failOnError();
  loop(c, initState(s, c))

cli(driver)

// --- Terminal setup

act getWindow(Console c)
  Box(I2(1, 1), I2(c.termGetWidth().failOnError(), c.termGetHeight().failOnError()))

act setupTerminal(Console c)
  actSeq(
    lazy c.termSetOptions(TerminalOptions.NoEcho | TerminalOptions.NoBuffer),
    lazy c.setNoBlockInput(),
    lazy c.writeOut(
      ttyLitAltScreenWriter(true)   &
      ttyLitWindowTitleWriter("Novus Snake"))
  )

act resetTerminal()
  c = consoleOpen().failOnError();
  actSeq(
    lazy c.termUnsetOptions(TerminalOptions.NoEcho | TerminalOptions.NoBuffer),
    lazy c.unsetNoBlockInput(),
    lazy c.writeOut(
      ttyLitCursorShowWriter(true)        &
      ttyLitClearWriter(TtyClearMode.All) &
      ttyLitAltScreenWriter(false))
  )
