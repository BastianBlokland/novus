import "std.ns"
import "http_content-type.ns"
import "http_method.ns"
import "http_statuscode.ns"

// -- Types

struct HttpHeaderField  = string key, string value

struct HttpReqHeader    =
  HttpMethod            method,
  string                resource,
  string                httpVersion,
  List{HttpHeaderField} fields

struct HttpRespHeader   =
  string                httpVersion,
  HttpStatusCode        status,
  List{HttpHeaderField} fields

// -- Parsers

fun httpVersionParser()
  matchParser("HTTP/") >> untilParser(isWhitespace)

fun httpHeaderFieldParser()
  (
    untilParser(matchParser(':')) << matchParser(':') & whitespaceParser() >> lineParser()
  ).toStruct(Type{HttpHeaderField}())

fun httpReqHeaderParser()
  (
    httpMethodParser()        << whitespaceParser() &
    untilParser(isWhitespace) << whitespaceParser() &
    httpVersionParser()       << whitespaceParser() &
    manyParser(httpHeaderFieldParser(), newlineParser())
  ).toStruct(Type{HttpReqHeader}()) ! Error("Invalid http request header")

// -- Writers

// Example output: 'HTTP/1.1'
fun httpVersionWriter()
  litWriter("HTTP/") & stringWriter()

// Example output: 'HTTP/1.1 200 OK'
fun httpRespStatusLineWriter()
  (
    httpVersionWriter() & litWriter(' ') & httpStatusCodeWriter()
  ).map(lambda (HttpRespHeader h) Tuple(h.httpVersion, h.status))

// Example output: 'Host: en.wikipedia.org'.
fun httpHeaderFieldWriter()
  (
    stringWriter() & litWriter(": ") & stringWriter()
  ).fromStruct(Type{HttpHeaderField}())

// Example output:
// '
// HTTP/1.1 200 OK
// Content-Type: text/html; charset=UTF-8
// Connection: close
// '
fun httpRespHeaderWriter()
  (
    httpRespStatusLineWriter() & newlineWriter() &
    listWriter(httpHeaderFieldWriter(), newlineWriter())
  ).map(lambda (HttpRespHeader h) Tuple(h, h.fields))
