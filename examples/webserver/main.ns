// --- Example of a simple http server.
// Demo: https://www.bastian.tech/novus-webserver

import "std.ns"
import "http_content-type.ns"
import "http_header.ns"
import "http_response.ns"
import "http_statuscode.ns"

struct Resource =
  string          url,
  HttpContentType type,
  string          content

struct RewriteRule =
  GlobTextPattern source,
  string          replacement

struct Content =
  List{RewriteRule} rewrites,
  List{Resource}    resources

struct Variable = string key, string value

struct ClientContext =
  Content                content,
  List{Variable}         variables,
  TcpConnection          connection,
  Writer{DateTime}       timeWriter,
  Writer{HttpResp}       respWriter,
  Parser{HttpReqHeader}  reqParser

fun rewriteUrl(Content c, string url) -> string
  maybeRule = c.rewrites.first(lambda (RewriteRule r) textMatch(r.source, url));
  if maybeRule as RewriteRule rule -> rule.replacement.replace("{SOURCE}", url)
  else -> url

fun getResource(Content c, string url) -> Option{Resource}
  rewrittenUrl = c.rewriteUrl(url);
  c.resources.first(lambda (Resource r) r.url == rewrittenUrl)

fun replaceVariables(ClientContext ctx, Resource r) -> string
  if !r.type.isText() -> r.content
  else ->
    ctx.variables.fold(
    (
      lambda (string txt, Variable v)
        txt.replace("{{" + v.key + "}}", v.value)
    ), r.content)

fun getReponse(ClientContext ctx, Resource r, HttpMethod m) -> HttpResp
  txt = ctx.replaceVariables(r);
  if m == HttpMethod.Get  -> httpResp(    HttpStatusCode.Ok, txt, r.type)
  if m == HttpMethod.Head -> httpRespHead(HttpStatusCode.Ok, txt, r.type)
  else ->
    supportedMethods = HttpMethod.Get :: HttpMethod.Head;
    httpRespMethodNotAllowed(supportedMethods)

fun getResponse(ClientContext ctx, HttpMethod m, string url) -> HttpResp
  resLookup = ctx.content.getResource(url);
  if resLookup as Resource r  -> ctx.getReponse(r, m)
  else                        -> httpRespNotFound(url)

act writeResponse(ClientContext ctx, HttpResp resp) -> Option{Error}
  extraFields = (
    HttpHeaderField("Date",               ctx.timeWriter.run(timeNow()))  ::
    HttpHeaderField("Server",             "Novus")                        ::
    HttpHeaderField("Transfer-Encoding",  "identity")                     ::
    HttpHeaderField("Connection",         "keep-alive")                   ::
    HttpHeaderField("Keep-Alive",         "timeout=5, max=1000")
  );
  finalResp     = resp.httpRespAddFields(extraFields);
  finalRespTxt  = ctx.respWriter.run(finalResp, WriterNewlineMode.CrLf);
  actSeq(
    lazy print("-- Writing response: http-" + resp.header.httpVersion + ":" + resp.header.status),
    lazy ctx.connection.write(finalRespTxt)
  )

act handleRequest(ClientContext ctx, string txt) -> Option{Error}
  parse = ctx.reqParser(txt);
  if parse as ParseFailure fail               -> ctx.writeResponse(httpRespBadReq())
  if parse as ParseSuccess{HttpReqHeader} suc ->
    actSeq(
      lazy print("-- Request received: " + suc.val.method + " " + suc.val.resource),
      lazy ctx.writeResponse(suc.val.httpVersion == "1.1"
        ? ctx.getResponse(suc.val.method, suc.val.resource)
        : httpRespVersionNotSupported())
    )

act handleConnection(ClientContext ctx)
  actSeq(
    lazy print("- Client connected"),
    lazy invoke(impure lambda(StreamReadState read) -> Option{Error}
    (
        read.readUntil("\r\n\r\n" :: "\n\n") as Tuple{string, StreamReadState} r && r.f1.length() > 0
          ? handleRequest(ctx, r.f1) as Error err ? err : self(r.f2)
          : None()
    ), StreamReadState(ctx.connection.socket)),
    lazy print("- Client disconnected")
  )

struct Settings =
  int               port,
  List{RewriteRule} rewriteRules,
  Option{Path}      root

act serve(Settings s)
  rootPath = pathAbsolute(s.root ?? (pathProgram().parent() / "site"));
  content = loadContent(rootPath, s.rewriteRules);
  print("Starting server (url: http://localhost:" + s.port + ")");
  startTime   = timeNow();
  timeWriter  = dateTimeRFC1123Writer();
  respWriter  = httpRespWriter();
  reqParser   = httpReqHeaderParser();
  handleCon   = (
    impure lambda (TcpConnection con, TcpServerState state)
      uptime    = timeNow() - startTime;
      variables = (
        Variable("SERVER_UPTIME",             uptime.string())               ::
        Variable("SERVER_DATE",               timeWriter.run(timeNow()))     ::
        Variable("SERVER_PLATFORM",           platform().string())           ::
        Variable("SERVER_RUNTIME_VERSION",    runtimeVersion().string())     ::
        Variable("SERVER_CONNECTION_COUNTER", state.connectionCounter.string())
      );
      ctx       = ClientContext(content, variables, con, timeWriter, respWriter, reqParser);
      handleConnection(ctx)
  );
  tcpServer(TcpServerSettings(handleCon, s.port)).error()

act loadContent(PathAbsolute root, List{RewriteRule} rewriteUrls)
  print("Loading resouces (root: '" + root.string() + "')");
  files = fileListReq(root, false).failOnError();
  resources = files.parallelMap(impure lambda (PathAbsolute filePath)
    contentType = findHttpContentType(filePath);
    content     = fileRead(filePath).failOnError();
    Resource("/" + makeRelative(filePath, root).string(), contentType, content)
  );
  print("Loaded " + resources.length() + " resources");
  Content(rewriteUrls, resources)

fun cliDefaults(Type{Settings} t)
  CliDefault("port",          "8080") ::
  CliDefault("rewrite-rules", "*/>{SOURCE}index.html")

fun cliParser(Type{RewriteRule} t)
  (
    untilParser(equals{char}['>']) << matchParser('>') & allParser()
  ).map(lambda (Tuple{string, string} t) RewriteRule(GlobTextPattern(t.f1), t.f2))

cli(cliCmd("serve", serve, "Serve webpages"),
    cliAppInfo("Novus WebServer", "Example of a very basic http webserver writen in Novus.\n" +
                                  "Demo: https://www.bastian.tech/novus-webserver"))
