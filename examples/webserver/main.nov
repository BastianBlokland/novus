// --- Example of a simple http server.
// Demo: http://bastian.tech/novus-webserver

import "std.nov"
import "http_content-type.nov"
import "http_header.nov"
import "http_response.nov"
import "http_statuscode.nov"

struct Resource =
  string          url,
  HttpContentType type,
  string          content

struct RewriteRule =
  string source,
  string replacement

struct Content =
  List{RewriteRule} rewrites,
  List{Resource}    resources

struct Variable = string key, string value

struct ClientContext =
  Content                content,
  List{Variable}         variables,
  TcpConnection          connection,
  Writer{HttpResp}       respWriter,
  Parser{HttpReqHeader}  reqParser

fun rewriteUrl(Content c, string url) -> string
  rewriten = c.rewrites.map(lambda (RewriteRule r) r.source == url ? Option(r.replacement) : None());
  rewriten.front() ?? url

fun getResource(Content c, string url) -> Option{Resource}
  rewrittenUrl = c.rewriteUrl(url);
  c.resources.filter(lambda (Resource r) r.url == rewrittenUrl).front()

fun replaceVariables(ClientContext ctx, Resource r) -> string
  if !r.type.isText() -> r.content
  else ->
    ctx.variables.fold(
    (
      lambda (string txt, Variable v)
        txt.replace("{{" + v.key + "}}", v.value)
    ), r.content)

fun getReponse(ClientContext ctx, Resource r, HttpMethod m) -> HttpResp
  txt = ctx.replaceVariables(r);
  if m == HttpMethod.Get  -> httpResp(    HttpStatusCode.Ok, txt, r.type)
  if m == HttpMethod.Head -> httpRespHead(HttpStatusCode.Ok, txt, r.type)
  else ->
    supportedMethods = HttpMethod.Get :: HttpMethod.Head;
    httpRespMethodNotAllowed(supportedMethods)

fun getResponse(ClientContext ctx, HttpMethod m, string url) -> HttpResp
  resLookup = ctx.content.getResource(url);
  if resLookup as Resource r  -> ctx.getReponse(r, m)
  else                        -> httpRespNotFound(url)

act writeResponse(ClientContext ctx, HttpResp resp) -> Option{Error}
  extraFields = (
    HttpHeaderField("Date",               httpDateStr(timeNow())) ::
    HttpHeaderField("Server",             "Novus")                ::
    HttpHeaderField("Transfer-Encoding",  "identity")             ::
    HttpHeaderField("Connection",         "keep-alive")           ::
    HttpHeaderField("Keep-Alive",         "timeout=5, max=1000")
  );
  finalResp     = resp.httpRespAddFields(extraFields);
  finalRespTxt  = ctx.respWriter(WriterState(WriterNewlineMode.CrLf), finalResp).string();
  ctx.connection.write(finalRespTxt)

act handleRequest(ClientContext ctx, string txt) -> Option{Error}
  parse = ctx.reqParser(txt);

  if parse as ParseSuccess{HttpReqHeader} suc ->
    print("-- Request received: " + suc.val.method + " " + suc.val.resource);
    ctx.writeResponse(suc.val.httpVersion == "1.1"
      ? ctx.getResponse(suc.val.method, suc.val.resource)
      : httpRespVersionNotSupported())

  if parse as ParseFailure fail ->
    print("-- Bad request received");
    ctx.writeResponse(httpRespBadReq())

act handleConnection(ClientContext ctx)
  print("- Client connected");

  loop = (impure lambda(StreamReadState read)
    r = read.readUntil("\r\n\r\n" :: "\n\n");
    if r.first.isEmpty() -> None()
    else ->
      handleRequest(ctx, r.first) as Error err ? Option(err) : self(r.second)
  );
  if loop(StreamReadState(ctx.connection.socket)) as Error err  -> err
  else                                                          -> print("- Client disconnected")

act main(int port, Content content)
  print("Starting server (port: " + port + ")");

  startTime   = timeNow();
  respWriter  = httpRespWriter();
  reqParser   = httpReqHeaderParser();
  handleCon   = (
    impure lambda (TcpConnection con)
      uptime    = timeNow() - startTime;
      variables = (
        Variable("SERVER_UPTIME",           uptime.string())              ::
        Variable("SERVER_DATE",             timeNow().httpDateStr())      ::
        Variable("SERVER_PLATFORM",         getPlatform().string())       ::
        Variable("SERVER_RUNTIME_VERSION",  getRuntimeVersion().string())
      );
      ctx       = ClientContext(content, variables, con, respWriter, reqParser);
      handleConnection(ctx)
  );
  tcpServerLoop(IpFamily.V4, port, TcpServerLoopContext(handleCon)).failOnError();

  print("Server stopped")

act loadContent(Path root, List{RewriteRule} rewriteUrls, List{string} files)
  print("Loading resouces (root: '" + root.string() + "')");

  resources = files.parallelMap(impure lambda (string file)
    path        = root / file;
    contentType = path.findHttpContentType();
    content     = path.fileRead().failOnError();
    Resource("/" + file, contentType, content)
  );

  print("Loaded " + resources.length() + " resources");
  Content(rewriteUrls, resources)

main(
  port = getEnvOpt("port", txtIntParser()) ?? 8080;
  rootPath = getEnvOpt("root", pathParser()) ?? getPathProgram().parent() / "site";
  rewriteUrls =
  (
    RewriteRule("/", "/index.html") :: List{RewriteRule}()
  );
  files = getEnvOpt("files") ?? EnvOpt( "files",  "index.html"        ::
                                                  "style.css"         ::
                                                  "readme.html"       ::
                                                  "win.jpg"           ::
                                                  "github-logo.png"   ::
                                                  "favicon.ico").args;
  port,
  loadContent(rootPath, rewriteUrls, files)
)
