import "std.ns"
import "http_header.ns"

// -- Types

struct HttpResp =
  HttpRespHeader  header,
  string          content

// -- Writers

// Example output:
// '
// HTTP/1.1 200 OK
// Content-Type: text/plain
// Connection: close
//
// Hello world
//'
fun httpRespWriter()
  (
    httpRespHeaderWriter() & newlineWriter() & newlineWriter() & stringWriter()
  ).to(Type{HttpResp}())

// -- Functions

fun httpRespAddFields(HttpResp resp, List{HttpHeaderField} fields)
  HttpResp(
    HttpRespHeader(
      resp.header.httpVersion,
      resp.header.status,
      fields :: resp.header.fields
    ),
    resp.content
  )

fun httpRespHeader(HttpStatusCode s, string txt, HttpContentType t, List{HttpHeaderField} fields)
  HttpRespHeader(
    "1.1",
    s,
    HttpHeaderField("Content-Type",       t.string())             ::
    HttpHeaderField("Content-Length",     txt.length().string())  :: fields
  )

fun httpResp(HttpStatusCode s, string txt, HttpContentType t, List{HttpHeaderField} fields = List{HttpHeaderField}())
  HttpResp(
    httpRespHeader(s, txt, t, fields),
    txt
  )

fun httpRespHead(HttpStatusCode s, string txt, HttpContentType t, List{HttpHeaderField} fields = List{HttpHeaderField}())
  HttpResp(
    httpRespHeader(s, txt, t, fields),
    ""
  )

fun httpRespBadReq()
  httpResp(
    HttpStatusCode.BadRequest,
    "Bad request",
    HttpContentType.TextPlain,
    List{HttpHeaderField}()
  )

fun httpRespNotFound(string resource)
  httpResp(
    HttpStatusCode.NotFound,
    "Not found: " + resource,
    HttpContentType.TextPlain,
    List{HttpHeaderField}()
  )

fun httpRespMethodNotAllowed(List{HttpMethod} allowed)
  httpResp(
    HttpStatusCode.MethodNotAllowed,
    "Method not allowed",
    HttpContentType.TextPlain,
    HttpHeaderField("Allow",  allowed.string("", ", ", "")) :: List{HttpHeaderField}()
  )

fun httpRespVersionNotSupported()
  httpResp(
    HttpStatusCode.HttpVersionNotSupported,
    "Http version not supported",
    HttpContentType.TextPlain,
    List{HttpHeaderField}()
  )
