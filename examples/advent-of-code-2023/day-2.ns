
import "std.ns"

enum    CubeType   = Red, Green, Blue
struct  CubeEntry  = int count, CubeType type
struct  CubeSet    = List{CubeEntry} entries
struct  Game       = int id, List{CubeSet} sets
struct  Bag        = CubeSet set

fun cubeTypeParser() -> Parser{CubeType}
  enumParser(Type{CubeType}(), StrComp.IgnoreCase)

fun cubeEntryParser() -> Parser{CubeEntry}
  (txtIntParser() << whitespaceParser() & cubeTypeParser()).to(Type{CubeEntry}())

fun cubeSetParser() -> Parser{CubeSet}
  setEnd = newlineParser() | endParser() | matchParser(';');
  manyUntilParser(cubeEntryParser(), matchParser(", "), setEnd).to(Type{CubeSet}())

fun gameParser() -> Parser{Game}
  (
    (matchParser("Game ") >> txtIntParser() << matchParser(": ")) &
    manyUntilParser(cubeSetParser(), matchParser("; "), newlineParser())
  ).to(Type{Game}())

fun gameCollectionParser() -> Parser{List{Game}}
  manyParser(gameParser(), newlineParser(), ParseFlags.AllowTrailingSeperator)

fun bagEmpty() Bag(CubeSet(List{CubeEntry}()))

fun bagParser() cubeSetParser().to(Type{Bag}())

fun count(CubeSet s, CubeType t) s.entries
  .map(lambda (CubeEntry e) e.type == t ? e.count : 0)
  .sum()

fun greater(CubeSet a, CubeSet b)
  a.entries.any(lambda (CubeEntry e) e.count > b.count(e.type))

fun gamePossible(Game g, Bag b)
  g.sets.none(greater[b.set])

fun possibleSum(List{Game} games, Bag b) games
  .filter(gamePossible[b])
  .map(lambda (Game g) g.id)
  .sum()

fun exampleText()
  "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\n"                   +
  "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\n"         +
  "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\n" +
  "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\n" +
  "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n"

fun exampleBag()
  bagParser().run("12 red, 13 green, 14 blue") ?? bagEmpty()

assertEq(
  gameCollectionParser().run(exampleText()).failOnError().possibleSum(exampleBag()),
  8)

print(
  bag  = exampleBag();
  path = pathProgram().parent() / "day-2-input1.txt";
  text = fileRead(path).failOnError();
  "Output part2: " + gameCollectionParser().run(text).failOnError().possibleSum(bag))
