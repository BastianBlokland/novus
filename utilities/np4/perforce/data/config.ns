import "std.ns"

import "user.ns"
import "client.ns"
import "server.ns"

// -- Types.

struct P4Config =
  P4Server  server,
  P4Client  client

// -- Utilities.

act loadP4Config(PathAbsolute p = pathCurrent()) -> Either{P4Config, Error}
  if fileOpen(p / ".np4", FileMode.OpenReadOnly) as File f  -> f.readToEnd(jsonParser{P4Config}())
  if p.pathIsRoot()                                         -> Error("Not a np4 workspace, run 'np4 setup' to set one up")
  else                                                      -> loadP4Config(p.parent())

act writeP4Config(P4Config cfg, P4ClientInfo client, bool overwrite) -> Option{Error}
  writeP4Config(cfg, client.root / ".np4", overwrite)

act writeP4Config(P4Config cfg, PathAbsolute p, bool overwrite) -> Option{Error}
  mode = overwrite ? FileMode.Create : FileMode.CreateNew;
  fileOpen(p, mode).map(impure lambda (File f) writeP4Config(cfg, f))

act writeP4Config(P4Config cfg, File f) -> Option{Error}
  f.write(jsonWriter{P4Config}(), cfg)
