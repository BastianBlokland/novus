import "std.ns"

import "change.ns"
import "client.ns"
import "server.ns"
import "user.ns"

// -- Types.

struct P4Config =
  Path            p4Path,
  P4Server        server,
  P4Client        client,
  List{P4Change}  hiddenChanges

// -- Utilities.

fun p4ChangeIsHidden(P4Config cfg, P4Change c) cfg.hiddenChanges.contains(c)

// -- Actions.

act loadP4Config(PathAbsolute p = pathCurrent()) -> Either{P4Config, Error}
  parser = jsonParser{P4Config}();
  if fileOpen(p / ".np4", FileMode.OpenReadOnly) as File f  -> f.readToEnd(parser) ! Error("Failed to parse .np4 config file")
  if p.pathIsRoot()                                         -> Error("Not a np4 workspace, run 'np4 setup' to set one up")
  else                                                      -> loadP4Config(p.parent())

act writeP4Config(P4Config cfg, P4ClientInfo client, bool overwrite) -> Option{Error}
  writeP4Config(cfg, client.root / ".np4", overwrite)

act writeP4Config(P4Config cfg, PathAbsolute p, bool overwrite) -> Option{Error}
  mode = overwrite ? FileMode.Create : FileMode.CreateNew;
  fileOpen(p, mode).map(impure lambda (File f) writeP4Config(cfg, f))

act writeP4Config(P4Config cfg, File f) -> Option{Error}
  f.write(jsonWriter{P4Config}(), cfg)
