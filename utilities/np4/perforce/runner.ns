import "std.ns"

import "data/change.ns"
import "data/config.ns"
import "data/file.ns"
import "data/stream.ns"
import "data/var.ns"

// -- Types.

enum P4RunCode = Stat, Info, Error

struct P4RunOutput{T} =
  P4RunCode code,
  T         data

// -- Utilities.

fun p4GlobalArgs(P4Config cfg) -> List{string}
  "-p"  :: cfg.server.string() ::
  "-c"  :: cfg.client.string() ::
  "-Q"  :: "utf8unchecked"     ::
  "-G"

fun p4CmdError(List{string} args)
  Error("p4 error (cmd: p4 " + args.string("", " ", "") + ")")

fun p4ParseError(List{string} args)
  Error("Failed to parse p4 response (cmd: p4 " + args.string("", " ", "") + ")")

act p4Run(P4Config cfg, List{string} args) -> Either{string, Error}
  p = run("p4", cfg.p4GlobalArgs() :: args, ProcessFlags.PipeInOut | ProcessFlags.NewGroup);
  p.wait().map(impure lambda (ProcessResult r)
    if r.isSuccess() -> r.stdOut ?? ""
    else             ->
      pyMarshalParser(Type{P4RunOutput{string}}()).run(r.stdOut ?? "") as P4RunOutput{string} err
        ? p4CmdError(args) :: Error(err.data)
        : p4CmdError(args) :: Error((r.stdErr ?? "").trim())
  )

act p4Run{T}(P4Config cfg, List{string} args, Type{T} resultType) -> Either{T, Error}
  p = pyMarshalParser(resultType) ! p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4RunMany{T}(P4Config cfg, List{string} args, Type{T} resultType) -> Either{List{T}, Error}
  p = manyUntilParser(pyMarshalParser(resultType), endParser()) ! p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

// -- Queries.

act p4RunGetVars(P4Config cfg) -> Either{List{P4Var}, Error}
  args = "set" :: "-q";
  p = manyParser(p4VarParser(), newlineParser(), ParseFlags.AllowTrailingSeperator) ! p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4RunSetVar(P4Config cfg, P4Var var) -> Option{Error}
  cfg.p4Run("set" :: var.string()) as Error err ? err : None()

act p4RunCurrentStreamInfo(P4Config cfg) -> Either{P4StreamInfo, Error}
  cfg.p4Run("stream" :: "-o", Type{P4StreamInfo}())
  ! Error("No stream found for client '" + cfg.client + "' on server '" + cfg.server + '\'')

act p4RunClientInfo(P4Config cfg, P4Client client) -> Either{P4ClientInfo, Error}
  cfg.p4Run("client" :: "-o" :: client.id, Type{P4ClientInfo}())
  ! Error("Client '" + client + "' not valid on server '" + cfg.server + '\'')

act p4RunChangeInfos(P4Config cfg, P4User u, int maxAmount = 25) -> Either{List{P4ChangeInfo}, Error}
  cfg.p4RunMany(
    "changes"                       ::
    "-l"                            ::
    "-u" :: u.string()              ::
    "-m" :: maxAmount.string(),
    Type{P4ChangeInfo}())

act p4RunChangeInfos(P4Config cfg, P4User u, P4ChangeStatus s, int maxAmount = 25) -> Either{List{P4ChangeInfo}, Error}
  cfg.p4RunMany(
    "changes"                       ::
    "-l"                            ::
    "-u" :: u.string()              ::
    "-s" :: s.string().strToLower() ::
    "-m" :: maxAmount.string(),
    Type{P4ChangeInfo}())

act p4RunChangeInfos(P4Config cfg, P4Client c, P4ChangeStatus s, int maxAmount = 25) -> Either{List{P4ChangeInfo}, Error}
  cfg.p4RunMany(
    "changes"                       ::
    "-l"                            ::
    "-c" :: c.string()              ::
    "-s" :: s.string().strToLower() ::
    "-m" :: maxAmount.string(),
    Type{P4ChangeInfo}())

act p4RunGetDepotFiles(P4Config cfg, P4Change change) -> Either{List{P4FileInfo}, Error}
  cfg.p4RunMany("files" :: ("@=" + change.string()), Type{P4FileInfo}())

act p4RunGetOpenFiles(P4Config cfg, P4Client client, P4Change change) -> Either{List{P4OpenFile}, Error}
  cfg.p4RunMany("opened" :: "-C" :: client.string() :: "-c" :: change.string(), Type{P4OpenFile}())
