import "std.ns"

import "data/change.ns"
import "data/file.ns"
import "data/resolve.ns"
import "data/stream.ns"
import "data/var.ns"

import "../config.ns"

// -- Types.

enum P4RunCode = Stat, Info, Error

struct P4RunOutput{T} =
  P4RunCode code,
  T         data

// -- Utilities.

fun p4GlobalArgs(Config cfg) -> List{string}
  "-p"  :: cfg.server.string() ::
  "-c"  :: cfg.client.string() ::
  "-Q"  :: "utf8unchecked"     ::
  "-G"

fun p4CmdError(List{string} args)
  Error("p4 error (cmd: p4 " + args.string("", " ", "") + ")")

fun p4ParseError(List{string} args)
  Error("Failed to parse p4 response (cmd: p4 " + args.string("", " ", "") + ")")

// -- Parsers.

fun p4ErrorParser() -> Parser{string}
  pyMarshalParser(Type{P4RunOutput{string}}()).map(lambda (P4RunOutput{string} out)
    if out.code != P4RunCode.Error  -> Error("Not an error")
    else                            -> out.data
  )

fun p4ErrorMatcher(TextPattern expectedErr) -> Parser{string}
  p4ErrorParser().map(lambda (string err)
    if textMatch(expectedErr, err) -> err
    else                           -> Error("Unexpected error: '" + err.trim() + '\'')
  )

// -- Actions.

act p4Run(Config cfg, List{string} args) -> Either{string, Error}
  flags = ProcessFlags.PipeInOut | ProcessFlags.NewGroup;
  p     = run(cfg.p4Path.string(), cfg.p4GlobalArgs() :: args, flags);
  p.wait().map(impure lambda (ProcessResult r)
    if r.isSuccess() -> r.stdOut ?? ""
    else             ->
      p4ErrorParser().run(r.stdOut ?? "") as string err
        ? p4CmdError(args) :: Error(err.trim())
        : p4CmdError(args) :: Error((r.stdErr ?? "").trim())
  )

act p4Run{T}(Config cfg, List{string} args, Type{T} resultType) -> Either{T, Error}
  p = pyMarshalParser(resultType) ! lazy p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4RunMany{T}(Config cfg, List{string} args, Type{T} resultType) -> Either{List{T}, Error}
  p = manyUntilParser(pyMarshalParser(resultType), endParser()) ! lazy p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

// -- Queries.

act p4GetVars(Config cfg) -> Either{List{P4Var}, Error}
  args = "set" :: "-q";
  p = manyParser(p4VarTxtParser(), newlineParser(), ParseFlags.AllowTrailingSeperator) ! lazy p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4SetVar(Config cfg, P4Var var) -> Option{Error}
  cfg.p4Run("set" :: var.string()) as Error err ? err : None()

act p4GetCurrentStreamInfo(Config cfg) -> Either{P4StreamInfo, Error}
  cfg.p4Run("stream" :: "-o", Type{P4StreamInfo}())
  ! lazy Error("No stream found for client '" + cfg.client + "' on server '" + cfg.server + '\'')

act p4GetClientInfo(Config cfg, P4Client client) -> Either{P4ClientInfo, Error}
  cfg.p4Run("client" :: "-o" :: client.id, Type{P4ClientInfo}())
  ! lazy Error("Client '" + client + "' not valid on server '" + cfg.server + '\'')

act p4GetChangeInfo(Config cfg, P4Change change) -> Either{P4ChangeInfo, Error}
  cfg.p4Run("describe" :: "-s" :: change.string(), Type{P4ChangeInfo}())
  ! lazy Error("Change '" + change.string() + "' not found")

enum P4ChangesFlags =
  None    : 0b00,
  Reverse : 0b01

act p4GetChanges(
    Config            cfg,
    Option{P4Client}  clientFilter,
    Option{P4User}    userFilter,
    P4ChangeStatus    statusFilter,
    int               max,
    P4ChangesFlags    flags = P4ChangesFlags.None,
    P4Path            path = anyP4DepotPath()) -> Either{List{P4ChangeInfo}, Error}
  reverse = (flags & P4ChangesFlags.Reverse) != 0;
  cfg.p4RunMany(
    "changes"                                                           ::
    "-l"                                                                ::
    (clientFilter as P4Client c ? Option("-c" :: c.string()) : None())  ::
    (userFilter as P4User     u ? Option("-u" :: u.string()) : None())  ::
    "-s" :: statusFilter.string().strToLower()                          ::
    (reverse ? Option("-r") : None())                                   ::
    "-m" :: max.string()                                                ::
    path.string(),
    Type{P4ChangeInfo}())

act p4GetDepotFiles(Config cfg, P4Change change, int max) -> Either{List{P4FileInfo}, Error}
  args            = "files" :: "-m" :: max.string() :: ("@=" + change.string());
  fileListParser  = manyUntilParser(pyMarshalParser(Type{P4FileInfo}()), endParser());
  noSuchFilesErr  = p4ErrorMatcher(GlobTextPattern("@=*no*file(s)*", StrComp.IgnoreCase));
  p               = (noSuchFilesErr >> retParser(List{P4FileInfo}()) | fileListParser) ! lazy p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4GetOpenFiles(Config cfg, P4Client client, P4Change change, int max) -> Either{List{P4OpenFile}, Error}
  cfg.p4RunMany(
    "opened"                  ::
    "-C"  :: client.string()  ::
    "-c"  :: change.string()  ::
    "-m"  :: max.string(),
     Type{P4OpenFile}())

act p4GetPendingResolves(Config cfg) -> Either{List{P4ResolveFile}, Error}
  args               = "resolve" :: "-n";
  fileListParser     = manyUntilParser(pyMarshalParser(Type{P4ResolveFile}()), endParser());
  noFileToResolveErr = p4ErrorMatcher(GlobTextPattern("No file(s) to resolve*", StrComp.IgnoreCase));
  p                  = ((noFileToResolveErr >> retParser(List{P4ResolveFile}())) | fileListParser) ! lazy p4ParseError(args);
  cfg.p4Run(args).map(p.build(ParseFlags.NoWrapperError))

act p4DownloadFile(Config cfg, P4DepotPath depotPath, P4FileRev rev, Path resultPath) -> Either{P4FileInfo, Error}
  fileSpec = depotPath.string() + "#" + rev.string();
  cfg.p4Run("print" :: "-o" :: resultPath.pathAbsolute().string() :: fileSpec, Type{P4FileInfo}())
    ! lazy Error("Failed to download '" + fileSpec + "' from server '" + cfg.server + '\'')

act p4DownloadFile(Config cfg, P4DepotPath depotPath, P4Change change, Path resultPath) -> Either{P4FileInfo, Error}
  fileSpec = depotPath.string() + "@=" + change;
  cfg.p4Run("print" :: "-o" :: resultPath.pathAbsolute().string() :: fileSpec, Type{P4FileInfo}())
    ! lazy Error("Failed to download '" + fileSpec + "' from server '" + cfg.server + '\'')
