import "std.ns"

import "text-utils.ns"

import "../config.ns"

// -- Types.

enum DiffToolPreset = Fc, Diff, VsCode, Vs2019, WinMerge

// -- Utilities.

fun diffToolPresetCmdLine(DiffToolPreset preset, Platform platform)
  if preset == DiffToolPreset.Fc ->
    "fc.exe %FROM %TO"
  if preset == DiffToolPreset.Diff ->
    "diff -a --color=always --unified=3 %FROM %TO"
  if preset == DiffToolPreset.VsCode -> platform == Platform.Windows
    ? "'C:/Program Files/Microsoft VS Code/Code.exe' --diff %FROM %TO"
    : "code --diff %FROM %TO"
  if preset == DiffToolPreset.Vs2019 ->
    "'C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/devenv.exe' /diff %FROM %TO"
  if preset == DiffToolPreset.WinMerge ->
    "'C:/Program Files (x86)/WinMerge/WinMergeU.exe' /s /u %FROM %TO"
  else -> ""

fun getDefaultDiffToolPreset(Platform platform)
  platform == Platform.Windows ? DiffToolPreset.Fc : DiffToolPreset.Diff

// -- Actions.

act runDiffTool(Config cfg, bool altTool, PathAbsolute from, PathAbsolute to) -> Option{Error}
  fromStr     = from.string(pathNativeSeperator());
  toStr       = to.string(pathNativeSeperator());
  partsOrErr  = splitCommandLineString(altTool ? cfg.diffCmdLineAlt : cfg.diffCmdLine);
  if partsOrErr as Error        cmdLineErr -> Error("Error parsing diffCmdLine") :: cmdLineErr
  if partsOrErr as List{string} parts      ->
    run(
      parts.front() ?? "invalid-diff-tool",
      parts.pop().map(lambda (string part) part.replace("%FROM", fromStr, StrComp.IgnoreCase)
                                               .replace("%TO", toStr, StrComp.IgnoreCase)
      )
    ).wait().error()
