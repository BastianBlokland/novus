import "std.ns"

import "../perforce/ignore.ns"
import "../perforce/runner.ns"

import "../utils/diff-utils.ns"
import "../utils/fork.ns"
import "../utils/shared-writers.ns"
import "../utils/style.ns"

import "../config.ns"

// -- Utilities.

struct NewWorkspace =
  Config        newCfg,
  P4ClientInfo  clientInfo

fun setupNewConfig(SetupSettings s, Platform platform)
  Config(
    s.p4Path,
    s.server,
    s.client,
    s.hiddenChanges ?? List{P4Change}(),
    diffToolPresetCmdLine(s.diffTool ?? getDefaultDiffToolPreset(platform), platform),
    diffToolPresetCmdLine(DiffToolPreset.VsCode, platform))

// -- Actions.

act setupSaveConfig(SetupSettings s, Config newCfg, P4ClientInfo clientInfo) -> Option{Error}
  res = writeConfig(newCfg, clientInfo, s.force);
  res as Error err && err.code == PlatformError.FileAlreadyExists
    ? Error("Workspace already setup at: '" + clientInfo.root + "', use --force to overwrite")
    : res

act setupWorkspace(SetupSettings s, Config newCfg) -> Either{NewWorkspace, Error}
  p4GetClientInfo(newCfg, newCfg.client).map(impure lambda (P4ClientInfo clientInfo)
    waitForForks(Tuple(
      fork setupSaveConfig(s, newCfg, clientInfo),
      fork p4AddToIgnore(newCfg, clientInfo, ".np4"))
    ).map(impure lambda (Tuple res) NewWorkspace(newCfg, clientInfo))
  )

// -- Writers

fun setupSuccessWriter(StyleCtx ctx) -> Writer{NewWorkspace}
  (
    litWriter("Workspace successfully setup").styledWriter(ctx, Style.Header) & newlineWriter() &
    withHeaderWriter(ctx, "Client", clientWriter(ctx)) & newlineWriter() &
    withHeaderWriter(ctx, "Root", pathAbsWriter()) & newlineWriter() &
    withHeaderWriter(ctx, "Stream", streamWriter(ctx)) & newlineWriter() &
    withHeaderWriter(ctx, "User", userWriter(ctx)) & newlineWriter() &
    withHeaderWriter(ctx, "Host", stringWriter()) & newlineWriter() &
    withHeaderWriter(ctx, "Description", stringWriter())
  ).map(lambda (NewWorkspace w)
    Tuple(
      w.clientInfo.client,
      w.clientInfo.root,
      w.clientInfo.stream,
      w.clientInfo.owner,
      w.clientInfo.host,
      w.clientInfo.description.trim())
    )

// -- Driver.

struct SetupSettings =
  bool                    noColor,
  bool                    force,
  Path                    p4Path,
  P4Server                server,
  P4Client                client,
  Option{List{P4Change}}  hiddenChanges,
  Option{DiffToolPreset}  diffTool

fun cliDefaults(Type{SetupSettings} t)
  CliDefault("p4-path", "p4") :: List{CliDefault}()

act setupCmd(SetupSettings s) -> Option{Error}
  c               = consoleOpen().failOnError();
  styleCtx        = StyleCtx(!s.noColor && c.allowColor());
  writer          = setupSuccessWriter(styleCtx);
  newCfg          = setupNewConfig(s, platform());
  workspaceOrErr  = setupWorkspace(s, newCfg);
  if workspaceOrErr as Error        err -> err
  if workspaceOrErr as NewWorkspace w   -> c.writeOut(writer & newlineWriter(), w)
