import "std.ns"

import "../perforce/runner.ns"
import "../utils/style.ns"
import "../utils/shared-writers.ns"

// -- Types.

enum LogOrigin = Newest, Oldest

struct LogData =
  P4Config            config,
  List{P4ChangeInfo}  changes

// -- Actions.

act getStreamToLog(P4Config cfg, LogSettings settings) -> Either{P4Stream, Error}
  if settings.stream.val as P4Stream s -> s
  else -> p4RunClientInfo(cfg, cfg.client).map(lambda (P4ClientInfo clientInfo) clientInfo.stream)

act logQuery(P4Config cfg, LogSettings settings) -> Either{LogData, Error}
  getStreamToLog(cfg, settings).map(impure lambda (P4Stream stream)
    reverse = settings.origin == LogOrigin.Oldest;
    p4RunChangeInfos(cfg, stream, P4ChangeStatus.Submitted, settings.changesMax, reverse)
      .map(lambda (List{P4ChangeInfo} changes) LogData(cfg, changes))
  )

// -- Writers.

fun logOutputWriter(DateTime now, StyleCtx ctx, LogSettings s) -> Writer{LogData}
  (
    listWriter(changeInfoWriter(now, ctx, s.descLength) & newlineWriter())
  ).map(lambda (LogData d) d.changes)

// -- Driver.

struct LogSettings =
  bool                            noColor,
  LogOrigin                       origin,
  int                             descLength,
  int                             changesMax,
  CliPositional{Option{P4Stream}} stream

fun cliDefaults(Type{LogSettings} t)
  CliDefault("origin",        "newest") ::
  CliDefault("desc-length",   "60")     ::
  CliDefault("changes-max",   "200")

act logCmd(LogSettings s) -> Option{Error}
  c         = consoleOpen().failOnError();
  styleCtx  = StyleCtx(!s.noColor && c.allowColor());
  writer    = logOutputWriter(timeNow(), styleCtx, s);
  dataOrErr = loadP4Config().map(logQuery[s]);
  if dataOrErr as Error   err  -> err
  if dataOrErr as LogData data -> c.writeOut(writer, data)
