import "std.ns"

import "../perforce/runner.ns"

import "../utils/style.ns"
import "../utils/shared-writers.ns"

// -- Types.

enum LogOrigin = Newest, Oldest

struct LogData =
  Config              config,
  List{P4ChangeInfo}  changes

// -- Actions.

act logQuery(Config cfg, LogSettings settings) -> Either{LogData, Error}
  flags        = settings.origin == LogOrigin.Newest ? P4ChangesFlags.None : P4ChangesFlags.Reverse;
  path         = settings.path.val ?? anyP4ClientPath(cfg.client);
  clientFilter = Option{P4Client}();
  userFilter   = settings.user;
  p4GetChanges(cfg, clientFilter, userFilter, P4ChangeStatus.Submitted, settings.changesMax, flags, path)
    .map(lambda (List{P4ChangeInfo} changes) LogData(cfg, changes))

// -- Writers.

fun logOutputWriter(DateTime now, StyleCtx ctx, LogSettings s) -> Writer{LogData}
  (
    listWriter(changeInfoWriter(now, ctx, s.descLength) & newlineWriter())
  ).map(lambda (LogData d) d.changes)

// -- Driver.

struct LogSettings =
  bool                          noColor,
  LogOrigin                     origin,
  int                           descLength,
  int                           changesMax,
  Option{P4User}                user,
  CliPositional{Option{P4Path}} path

fun cliDefaults(Type{LogSettings} t)
  CliDefault("origin",        "newest") ::
  CliDefault("desc-length",   "80")     ::
  CliDefault("changes-max",   "25")

act logCmd(LogSettings s) -> Option{Error}
  c         = consoleOpen().failOnError();
  styleCtx  = StyleCtx(!s.noColor && c.allowColor());
  writer    = logOutputWriter(timeNow(), styleCtx, s);
  dataOrErr = loadConfig().map(logQuery[s]);
  if dataOrErr as Error   err  -> err
  if dataOrErr as LogData data -> c.writeOut(writer, data)
