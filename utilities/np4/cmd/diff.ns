import "std.ns"

import "../perforce/runner.ns"

import "../utils/diff.ns"
import "../utils/fork.ns"
import "../utils/shared-writers.ns"
import "../utils/style.ns"
import "../utils/tracer.ns"

// -- Types.

enum DiffType = FromPrevToChange, FromCurToChange, FromCurToOpen

struct DiffCtx =
  P4RunContext  runCtx,
  P4ClientInfo  clientInfo,
  DiffSettings  settings,
  DiffType      diffType,
  PathAbsolute  tmpPath

struct DiffData =
  Config            config,
  P4ChangeInfo      changeInfo,
  List{DiffFileSet} fileSets

struct DiffFileSet =
  P4FileInfo    info,
  PathAbsolute  fromFile,
  PathAbsolute  toFile

// -- Utilities.

fun diffTmpFileName(P4DepotPath p, P4Change c)
  dotExt = p.path.extension().map(lambda (string ext) "." + ext) ?? "";
  (p.path.stem() ?? "unknown") + "@" + c + dotExt

fun diffTmpFileName(P4DepotPath p, P4FileRev r)
  dotExt = p.path.extension().map(lambda (string ext) "." + ext) ?? "";
  (p.path.stem() ?? "unknown") + "#" + r + dotExt

fun shouldDiff(P4FileInfo f)
  f.p4FileIsText() &&
  ( f.Action == P4FileOp.Add        ||
    f.Action == P4FileOp.Edit       ||
    f.Action == P4FileOp.Branch     ||
    f.Action == P4FileOp.MoveAdd    ||
    f.Action == P4FileOp.Integrate  ||
    f.Action == P4FileOp.Import)

fun shouldDiff(P4FileInfo f, DiffCtx ctx)
  shouldDiff(f) &&
  (ctx.settings.change.val is P4Change || !p4ChangeIsHidden(ctx.runCtx.config, f.change))

fun getDiffFromRev(P4FileInfo f, DiffType t) -> P4FileRev
  if f.Action == P4FileOp.Add       -> p4RevNone()
  if f.Action == P4FileOp.MoveAdd   -> p4RevNone()
  if f.Action == P4FileOp.Branch    -> p4RevNone()
  if f.Action == P4FileOp.Import    -> p4RevNone()
  if t == DiffType.FromPrevToChange -> f.rev.p4RevPrev()
  if t == DiffType.FromCurToChange  -> f.rev
  if t == DiffType.FromCurToOpen    -> f.rev
  else                              -> p4RevNone()

// -- Actions.

act diffCreateTempDir() -> Either{PathAbsolute, Error}
  rndStr    = rngInit().rngString(8).val;
  pathOrErr = getTempPath().map(lambda (PathAbsolute p) p / "np4" / rndStr);
  if pathOrErr as Error         err   -> err
  if pathOrErr as PathAbsolute  path  -> fileCreatePath(path) as Error createErr ? createErr : path

act diffGetFromFile(DiffCtx ctx, P4FileInfo f) -> Either{PathAbsolute, Error}
  rev       = getDiffFromRev(f, ctx.diffType);
  path      = ctx.tmpPath / diffTmpFileName(f.depotFile, rev);
  maybeErr  = rev.p4RevIsNone() ? fileWrite(path, "") : p4DownloadFile(ctx.runCtx, f.depotFile, rev, path).error();
  maybeErr as Error err ? err : path

act diffGetToFile(DiffCtx ctx, P4FileInfo f) -> Either{PathAbsolute, Error}
  if f.clientFile as P4ClientPath clientPath -> p4ClientPathToAbs(ctx.clientInfo, clientPath)
  else ->
    path = ctx.tmpPath / diffTmpFileName(f.depotFile, f.change);
    p4DownloadFile(ctx.runCtx, f.depotFile, f.change, path).map(lambda (P4FileInfo dl) path)

act diffGetFileSet(DiffCtx ctx, P4FileInfo f) -> Either{DiffFileSet, Error}
  waitForForks(Tuple(
    fork diffGetFromFile(ctx, f),
    fork diffGetToFile(ctx, f))
  ).map(lambda (Tuple{PathAbsolute, PathAbsolute} data) DiffFileSet(f, data.f1, data.f2))

act diffQueryFiles(DiffCtx ctx) -> Either{List{DiffFileSet}, Error}
  client = ctx.clientInfo.client;
  change = ctx.settings.change.val;
  filesOrErr = (
    if ctx.settings.change.val is None       -> p4GetOpenFiles(ctx.runCtx, client, None(), ctx.settings.filesMax)
    if ctx.settings.change.val as P4Change c -> ctx.diffType == DiffType.FromCurToOpen
      ? p4GetOpenFiles(ctx.runCtx, client, c, ctx.settings.filesMax)
      : p4GetDepotFiles(ctx.runCtx, c, ctx.settings.filesMax, ctx.diffType == DiffType.FromCurToChange)
  );
  filesOrErr.map(impure lambda (List{P4FileInfo} files)
  (
    files .filterReverse(lambda (P4FileInfo fi) shouldDiff(fi, ctx))
          .mapReverse(impure lambda (P4FileInfo f) diffGetFileSet(ctx, f))
          .split().valueOrError())
  )

act diffGetType(P4RunContext runCtx, DiffSettings s) -> Either{DiffType, Error}
  if s.change.val is None       -> s.shelve ? Error("--shelve requires passing a change") : DiffType.FromCurToOpen
  if s.change.val as P4Change c ->
    if p4ChangeIsDefault(c) -> s.shelve ? Error("default changelist has no shelve") : DiffType.FromCurToOpen
    else                    -> p4GetChangeInfo(runCtx, c).map(lambda (P4ChangeInfo ci)
      isLocal = ci.client == runCtx.config.client;
      if s.shelve && ci.status == P4ChangeStatus.Submitted  -> Error("Submitted change has no shelve")
      if s.shelve                                           -> DiffType.FromCurToChange
      if isLocal && ci.status == P4ChangeStatus.Pending     -> DiffType.FromCurToOpen
      if ci.status == P4ChangeStatus.Pending                -> DiffType.FromCurToChange
      else                                                  -> DiffType.FromPrevToChange
    )

act diffQuery(P4RunContext runCtx, DiffSettings s, PathAbsolute tmpPath) -> Either{List{DiffFileSet}, Error}
  waitForForks(Tuple(
    fork p4GetClientInfo(runCtx, runCtx.config.client),
    fork diffGetType(runCtx, s))
  ).map(impure lambda (Tuple{P4ClientInfo, DiffType} data)
    diffCtx = DiffCtx(runCtx, data.f1, s, data.f2, tmpPath);
    diffQueryFiles(diffCtx)
  )

// -- Writers.

fun diffFileOutputWriter(StyleCtx ctx, DiffSettings s) -> Writer{DiffFileSet}
  (
    withHeaderWriter(ctx, "Diffing", fileWriter(ctx)) & newlineWriter()
  ).map(lambda (DiffFileSet f) f.info)

// -- Driver.

struct DiffSettings =
  bool                            noColor,
  bool                            trace,
  bool                            shelve,
  bool                            altDiffTool,
  int                             filesMax,
  CliPositional{Option{P4Change}} change

fun cliDefaults(Type{DiffSettings} t)
  CliDefault("files-max", "50") :: List{CliDefault}()

act diffCmd(DiffSettings s) -> Option{Error}
  tmpPath   = diffCreateTempDir().failOnError();
  c         = consoleOpen().failOnError();
  styleCtx  = StyleCtx(!s.noColor && c.allowColor());
  tracer    = s.trace ? p4ConsoleTracer(c, styleCtx) : P4Tracer();
  writer    = diffFileOutputWriter(styleCtx, s);
  loadConfig().map(impure lambda (Config cfg)
    filesOrErr = diffQuery(P4RunContext(cfg, tracer), s, tmpPath);
    if filesOrErr as Error             err   -> err
    if filesOrErr as List{DiffFileSet} files -> files.map(impure lambda (DiffFileSet f)
        actSeq(
          lazy c.writeOut(writer, f),
          lazy runDiffTool(s.altDiffTool ? cfg.diffToolAlt : cfg.diffTool, f.fromFile, f.toFile)
        )
      ).combine()
  )
