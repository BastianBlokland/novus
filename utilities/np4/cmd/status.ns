import "std.ns"

import "../perforce/runner.ns"
import "../utils/job.ns"
import "../utils/style.ns"

// -- Utilities.

struct StatusData =
  P4Config                config,
  P4ClientInfo            clientInfo,
  P4StreamInfo            streamInfo,
  List{StatusChangeData}  pendingChanges,
  List{P4OpenFile}        defaultOpenFiles

struct StatusChangeData =
  P4ChangeInfo      info,
  List{P4OpenFile}  openFiles,
  List{P4FileInfo}  shelvedFiles

act statusQueryChanges(P4Config cfg) -> Either{List{StatusChangeData}, Error}
  p4RunChangeInfos(cfg, cfg.client, P4ChangeStatus.Pending)
    .map(impure lambda (List{P4ChangeInfo} changes)
      changes.parallelMap(impure lambda (P4ChangeInfo info)
        p4RunGetOpenFiles(cfg, cfg.client, info.change).map(impure lambda (List{P4OpenFile} openFiles)
          shelvedFiles = p4RunGetDepotFiles(cfg, info.change) ?? List{P4FileInfo}();
          StatusChangeData(info, openFiles, shelvedFiles)
        )
      ).split().valueOrError()
    )

act statusQuery(P4Config cfg) -> Either{StatusData, Error}
  waitForJobs(Tuple(
    fork p4RunClientInfo(cfg, cfg.client),
    fork p4RunCurrentStreamInfo(cfg),
    fork statusQueryChanges(cfg),
    fork p4RunGetOpenFiles(cfg, cfg.client, p4DefaultChange()))
  ).map(impure lambda (Tuple{ P4ClientInfo,
                              P4StreamInfo,
                              List{StatusChangeData},
                              List{P4OpenFile}} res)
    StatusData(cfg, res.f1, res.f2, res.f3, res.f4)
  )

fun statusStyleForFileOp(P4FileOp op) -> Style
  if op == P4FileOp.Add         -> Style.OpAdd
  if op == P4FileOp.Edit        -> Style.OpEdit
  if op == P4FileOp.Delete      -> Style.OpDelete
  if op == P4FileOp.Integrate   -> Style.OpIntegrate
  if op == P4FileOp.Branch      -> Style.OpBranch
  if op == P4FileOp.MoveAdd     -> Style.OpMove
  if op == P4FileOp.MoveDelete  -> Style.OpMove
  else                          -> Style.Important

// -- Writers.

fun statusClientWriter(StyleCtx ctx) -> Writer{StatusData}
  (
    stringWriter() &
    litWriter(" (") & pathAbsWriter().styledWriter(ctx, Style.Detail) & litWriter(")")
  ).map(lambda (StatusData data)
    Tuple(data.clientInfo.client.string(), data.clientInfo.root))

fun statusStreamWriter(StyleCtx ctx) -> Writer{StatusData}
  (
    stringWriter() &
    litWriter(" (") & enumKeyWriter(Type{P4StreamType}()).styledWriter(ctx, Style.Detail) & litWriter(")") &
    ?(litWriter(" Parent: ").styledWriter(ctx, Style.Important) & stringWriter())
  ).map(lambda (StatusData data)
    Tuple(  data.streamInfo.stream.string(),
            data.streamInfo.type,
            data.streamInfo.parent.map(lambda (P4Stream s) s.string()))
  )

fun statusOpenFileWriter(StyleCtx ctx, int maxWidth) -> Writer{P4OpenFile}
  (
    styleWriter(ctx) & enumKeyWriter(Type{P4FileOp}()) &
    litWriter(": ") & pathRelWriter() & ttyLitStyleWriter(TtyStyle.Reset) &
    litWriter(" (") & txtIntWriter().styledWriter(ctx, Style.Detail) & litWriter(")")
  ).map(lambda (P4OpenFile c) Tuple(statusStyleForFileOp(c.Action), c.Action, c.clientFile.path, c.rev))

fun statusChangesWriter(StyleCtx ctx, int maxWidth) -> Writer{StatusChangeData}
  (
    litWriter("[") &
    stringWriter().styledWriter(ctx, Style.Important) &
    litWriter("] ") &
    stringWriter() &
    (
      ?(
        newlineWriter() & indentWriter() &
        litWriter("Shelved: ") & txtIntWriter() & litWriter(" files")
      ).styledWriter(ctx, Style.Important) &
      listWriter(newlineWriter() & indentWriter() & statusOpenFileWriter(ctx, maxWidth))
    ).indent()
  ).map(lambda (StatusChangeData c)
    Tuple(
      c.info.change.string(),
      c.info.changeShortDesc(maxWidth - 16),
      Tuple(c.shelvedFiles.isEmpty() ? Option{int}() : c.shelvedFiles.length(), c.openFiles))
  )

fun statusOutputWriter(StyleCtx ctx, int maxWidth) -> Writer{StatusData}
  (
    litWriter("Client: ").styledWriter(ctx, Style.Important) & statusClientWriter(ctx) & newlineWriter() &
    litWriter("Stream: ").styledWriter(ctx, Style.Important) & statusStreamWriter(ctx) & newlineWriter() &
    litWriter("Pending: ").styledWriter(ctx, Style.Important) & newlineWriter() &
      indentedListWriter(statusChangesWriter(ctx, maxWidth)) &
    litWriter("Default: ").styledWriter(ctx, Style.Important) & newlineWriter() &
      indentedListWriter(statusOpenFileWriter(ctx, maxWidth))
  ).map(lambda (StatusData data) Tuple(data, data, data.pendingChanges, data.defaultOpenFiles))

// -- Driver.

struct StatusSettings =
  bool        noColor,
  Option{int} maxWidth

act statusCmd(StatusSettings s) -> Option{Error}
  c         = consoleOpen().failOnError();
  maxWidth  = s.maxWidth ?? (c.termGetWidth() ?? 80);
  dataOrErr = loadP4Config().map(statusQuery);
  writer    = statusOutputWriter(StyleCtx(!s.noColor && c.allowColor()), maxWidth);
  if dataOrErr as Error      err  -> err
  if dataOrErr as StatusData data -> c.writeOut(writer, data)
