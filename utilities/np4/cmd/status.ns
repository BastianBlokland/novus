import "std.ns"

import "../perforce/runner.ns"
import "../utils/job.ns"
import "../utils/style.ns"

// -- Utilities.

struct StatusData =
  P4Config            config,
  P4ClientInfo        clientInfo,
  P4StreamInfo        streamInfo,
  List{P4ChangeInfo}  pendingChanges

act statusQuery(P4Config cfg) -> Either{StatusData, Error}
  waitForJobs(Tuple(
    fork p4RunClientInfo(cfg, cfg.client),
    fork p4RunCurrentStreamInfo(cfg),
    fork p4RunChangeInfos(cfg, cfg.client, P4ChangeStatus.Pending))
  ).map(impure lambda (Tuple{P4ClientInfo, P4StreamInfo, List{P4ChangeInfo}} res)
    StatusData(cfg, res.f1, res.f2, res.f3)
  )

// -- Writers.

fun statusClientWriter(StyleCtx ctx) -> Writer{StatusData}
  (
    stringWriter().styleWriter(ctx, Style.Important) &
    litWriter(" (") & pathAbsWriter().styleWriter(ctx, Style.Detail) & litWriter(")")
  ).map(lambda (StatusData data)
    Tuple(data.clientInfo.client.string(), data.clientInfo.root))

fun statusStreamWriter(StyleCtx ctx) -> Writer{StatusData}
  (
    stringWriter().styleWriter(ctx, Style.Important) &
    litWriter(" (") & enumKeyWriter(Type{P4StreamType}()).styleWriter(ctx, Style.Detail) & litWriter(")") &
    ?(litWriter(" Parent: ") & stringWriter().styleWriter(ctx, Style.Important))
  ).map(lambda (StatusData data)
    Tuple(  data.streamInfo.stream.string(),
            data.streamInfo.type,
            data.streamInfo.parent.map(lambda (P4Stream s) s.string()))
  )

fun statusChangesWriter(StyleCtx ctx, int maxWidth) -> Writer{P4ChangeInfo}
  (
    litWriter("[ ") &
    txtIntWriter(8).styleWriter(ctx, Style.Detail) &
    litWriter(" ] ") &
    stringWriter()
  ).map(lambda (P4ChangeInfo c) Tuple(c.change.id, c.changeShortDesc(maxWidth - 16)))

fun statusOutputWriter(StyleCtx ctx, int maxWidth) -> Writer{StatusData}
  (
    litWriter("Client: ") & statusClientWriter(ctx) & newlineWriter() &
    litWriter("Stream: ") & statusStreamWriter(ctx) & newlineWriter() &
    litWriter("Pending: ") & newlineWriter() &
    indentedListWriter(statusChangesWriter(ctx, maxWidth))
  ).map(lambda (StatusData data) Tuple(data, data, data.pendingChanges))

// -- Driver.

struct StatusSettings =
  bool        noColor,
  Option{int} maxWidth

act statusCmd(StatusSettings s) -> Option{Error}
  c         = consoleOpen().failOnError();
  maxWidth  = s.maxWidth ?? (c.termGetWidth() ?? 80);
  dataOrErr = loadP4Config().map(statusQuery);
  writer    = statusOutputWriter(StyleCtx(!s.noColor && c.allowColor()), maxWidth);
  if dataOrErr as Error      err  -> err
  if dataOrErr as StatusData data -> c.writeOut(writer, data)
