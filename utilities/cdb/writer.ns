import "database.ns"

enum CmdWriteFlags =
  None        : 0b00,
  DoubleQuote : 0b01,
  NeverQuote  : 0b10

fun cmdQuotedWriter{T}(Writer{T} writer, CmdWriteFlags flags) -> Writer{T}
  doubleQuote = (flags & CmdWriteFlags.DoubleQuote) != 0;
  neverQuote  = (flags & CmdWriteFlags.NeverQuote) != 0;
  quote = doubleQuote ? "\"" : "\'";
  Writer(lambda (WriterState s, T val)
    str = writer.run(val);
    shouldQuote = !neverQuote && str.any(isWhitespace | equals{char}['|']);
    s.write((shouldQuote ? quote : "") + str + (shouldQuote ? quote : ""))
  )

fun cmdWriter(CmdWriteFlags flags = CmdWriteFlags.None) -> Writer{Cmd}
  (
    cmdQuotedWriter(pathAbsWriter(), flags) &
    ?(litWriter(' ') & listWriter(cmdQuotedWriter(stringWriter(), flags), litWriter(' ')))
  ).map(lambda (Cmd c) Tuple(c.path, !c.args.isEmpty() ? c.args : None()))

fun entryDimWriter{T}(Writer{T} w, bool color)
  color ? w.ttyStyledTextWriter(TtyStyle.FgBrightBlack) : w

fun entryTimeWriter(int padUntilCol = 10, bool color = false) -> Writer{Entry}
  timeWriter = dateTimePrettyWriter(PrettyTimeFlags.None);
  (
    padUntilWriter(padUntilCol) & (litWriter("> Access: ") & timeWriter).entryDimWriter(color) & newlineWriter() &
    padUntilWriter(padUntilCol) & (litWriter("> Creation: ") & timeWriter).entryDimWriter(color)
  ).map(lambda (Entry e) Tuple(e.accessTime, e.creationTime))

fun entryWriter(bool includeTime, int padKeyUntilCol = 15, int maxCol = 80, bool color = false) -> Writer{Entry}
  (
    stringWriter() & padUntilWriter(padKeyUntilCol) & litWriter(" -> ") &
    splitWriter(cmdWriter(), wrapWriter(stringWriter(), maxCol, newlineWriter() & padUntilWriter(padKeyUntilCol + 4))) &
    ?(newlineWriter() & entryTimeWriter(padKeyUntilCol + 2, color))
  ).map(lambda (Entry e) Tuple(e.key, e.value, includeTime ? e : None()))

fun entryKeyWriter() -> Writer{Entry}
  stringWriter().map(lambda (Entry e) e.key)
