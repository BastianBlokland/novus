import "database.ns"

enum CmdWriteFlags =
  None            : 0b0000,
  QuotePath       : 0b0001,
  DoubleQuotePath : 0b0010,
  QuoteArgs       : 0b0100,
  DoubleQuoteArgs : 0b1000

enum CmdQuoteFlags =
  Quote       : 0b01,
  DoubleQuote : 0b10

fun cmdQuoteWriter(CmdQuoteFlags flags) -> Writer{None}
  singleQuote = (flags & CmdQuoteFlags.Quote) != 0;
  doubleQuote = (flags & CmdQuoteFlags.DoubleQuote) != 0;
  (singleQuote || doubleQuote) ? litWriter(doubleQuote ? '"' : '\'') : noneWriter()

fun cmdQuotedWriter{T}(Writer{T} writer, CmdQuoteFlags flags) -> Writer{T}
  cmdQuoteWriter(flags) & writer & cmdQuoteWriter(flags)

fun cmdWriter(CmdWriteFlags flags = CmdWriteFlags.None) -> Writer{Cmd}
  (
    cmdQuotedWriter(pathAbsWriter(), CmdQuoteFlags(flags & 0b11)) &
    ?(litWriter(' ') & listWriter(cmdQuotedWriter(stringWriter(), CmdQuoteFlags((flags >> 2) & 0b11)), litWriter(' ')))
  ).map(lambda (Cmd c) Tuple(c.path, !c.args.isEmpty() ? c.args : None()))

fun entryDimWriter{T}(Writer{T} w, bool color)
  color ? w.ttyStyledTextWriter(TtyStyle.FgBrightBlack) : w

fun entryTimeWriter(int padUntilCol = 10, bool color = false) -> Writer{Entry}
  timeWriter = dateTimePrettyWriter(PrettyTimeFlags.None);
  (
    padUntilWriter(padUntilCol) & (litWriter("> Access: ") & timeWriter).entryDimWriter(color) & newlineWriter() &
    padUntilWriter(padUntilCol) & (litWriter("> Creation: ") & timeWriter).entryDimWriter(color)
  ).map(lambda (Entry e) Tuple(e.accessTime, e.creationTime))

fun entryWriter(bool includeTime, int padKeyUntilCol = 15, int maxCol = 80, bool color = false) -> Writer{Entry}
  (
    stringWriter() & padUntilWriter(padKeyUntilCol) & litWriter(" -> ") &
    splitWriter(cmdWriter(), wrapWriter(stringWriter(), maxCol, newlineWriter() & padUntilWriter(padKeyUntilCol + 4))) &
    ?(newlineWriter() & entryTimeWriter(padKeyUntilCol + 2, color))
  ).map(lambda (Entry e) Tuple(e.key, e.value, includeTime ? e : None()))

fun entryKeyWriter() -> Writer{Entry}
  stringWriter().map(lambda (Entry e) e.key)
