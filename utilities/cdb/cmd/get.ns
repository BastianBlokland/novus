import "std.ns"

import "../database.ns"
import "../utils.ns"
import "../writer.ns"

struct GetSettings =
  EntryType                     type,
  bool                          doubleQuote,
  bool                          noColor,
  CliPositional{Option{string}} key

fun getIncorrectTypeErrMsg(EntryType t)
  if t == EntryType.File       -> "Entry is not a file"
  if t == EntryType.Directory  -> "Entry is not a directory"
  else                         -> "Unknown err"

act updateAccessTime(Entry e) -> Entry
  Entry(e.key, e.value, e.creationTime, timeNow())

act getFromDb(Database db, string key, EntryType t) -> Either{Tuple{Database, Entry}, Error}
  entry = db[key];
  if db[key] as Entry e -> entryMatchesFilter(e, t) ? Tuple(db.updateEntry(updateAccessTime(e)), e)
                                                    : Error(getIncorrectTypeErrMsg(t))
  else                  -> Error("No entry found with key: '" + key + '\'')

fun getCmdWriteFlags(GetSettings s) -> CmdWriteFlags
  CmdWriteFlags.None
  | (s.doubleQuote  ? CmdWriteFlags.DoubleQuote : CmdWriteFlags.None)

act getCmdInteractive(GetSettings s) -> Option{Error}
  c           = consoleOpen().failOnError();
  inStream    = c.stdIn;
  outStream   = getInteractiveOutputStream(c).failOnError();
  db          = loadDb().failOnError();
  keyOrErr    = getKeyInteractive(db, s.type, inStream, outStream, !s.noColor);
  if keyOrErr as Error  err -> err
  if keyOrErr as string key -> getCmdWithKey(s, key)

act getCmdWithKey(GetSettings s, string key) -> Option{Error}
  c = consoleOpen().failOnError();
  entryOrErr = transaction(getFromDb[s.type][key]);
  if entryOrErr as Error err  -> err
  if entryOrErr as Entry e    -> c.writeOut(cmdWriter(s.getCmdWriteFlags()) & newlineWriter(), e.value)

fun cliDefaults(Type{GetSettings} t)
  CliDefault("type", "any") :: List{CliDefault}()

act getCmd(GetSettings s) -> Option{Error}
  if s.key.val is None        -> getCmdInteractive(s)
  if s.key.val as string key  -> getCmdWithKey(s, key)

fun cliIsInteruptable(Type{GetSettings} s) false
