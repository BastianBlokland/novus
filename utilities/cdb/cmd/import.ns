import "std.ns"

import "../database.ns"

struct ImportSettings =
  CliPositional{Option{Path}} path

act getImportStream(ImportSettings s) -> Either{sys_stream, Error}
  if s.path.val as Path p -> p.fileOpen(FileMode.OpenReadOnly).map(lambda (File f) f.stream)
  else                    -> consoleOpen().map(lambda (Console c) c.stdIn)

act importCmd(ImportSettings s) -> Option{Error}
  existingDb  = loadDb().failOnError();
  saveDbBack(existingDb).failOnError();
  stream          = getImportStream(s).failOnError();
  json            = stream.readToEnd().failOnError();
  importedDbOrErr = jsonParser{Database}().run(json);
  if importedDbOrErr as Error     parseErr    -> parseErr
  if importedDbOrErr as Database  importedDb  ->
    saveDb(mergeEntries(importedDb, existingDb))

fun cliIsInteruptable(Type{ImportSettings} s) true
