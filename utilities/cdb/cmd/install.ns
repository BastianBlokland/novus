import "std.ns"

import "../database.ns"

enum Shell = ZShell, Bash, PowerShell, CMD

struct InstallSettings =
  CliPositional{Shell}        shell,
  CliPositional{Option{Path}} shellConfigPath

fun autoGenComment() "Automatically generated by: 'ncb.nx install'"

fun getJumpAlias(Shell s, Path programPath) -> string
  if s == Shell.ZShell      -> "function j() { cd \"$(" + programPath.string() + " get $@ -t directory)\"; } # " + autoGenComment()
  if s == Shell.Bash        -> "function j() { cd \"$(" + programPath.string() + " get $@ -t directory)\"; } # " + autoGenComment()
  if s == Shell.PowerShell  -> "function j { $(" + programPath.string() + " get $args -t directory) | Set-Location } # " + autoGenComment()
  if s == Shell.CMD         -> "j=for /f \"usebackq delims=\" %A in (`" + programPath.string() + " get $* -t directory`) do cd %A"
  else                      -> ""

fun getExecAlias(Shell s, Path programPath) -> string
  if s == Shell.ZShell      -> "function e() { eval \"$(" + programPath.string() + " get $@ -t file)\"; } # " + autoGenComment()
  if s == Shell.Bash        -> "function e() { eval \"$(" + programPath.string() + " get $@ -t file)\"; } # " + autoGenComment()
  if s == Shell.PowerShell  -> "function e { $c = $(" + programPath.string() + " get $args -t file); if ($c) { Invoke-Expression \"& $c\" } } # " + autoGenComment()
  if s == Shell.CMD         -> "e=for /f \"usebackq delims=\" %A in (`" + programPath.string() + " get $* -t file --double-quote`) do call %A"
  else                      -> ""

act getShellConfigPossiblePaths(Shell s) -> List{PathAbsolute}
  homePath = getHomePath().failOnError();
  if s == Shell.ZShell      -> (homePath / ".zshrc") :: List{PathAbsolute}()
  if s == Shell.Bash        -> (homePath / ".bashrc") :: List{PathAbsolute}()
  if s == Shell.PowerShell  -> (homePath / "Documents" / "PowerShell" / "Microsoft.PowerShell_profile.ps1") ::
                               (homePath / "Documents" / "WindowsPowerShell" / "Microsoft.PowerShell_profile.ps1")
  if s == Shell.CMD         -> (homePath / "macros.doskey") :: (homePath / "doskey.mac")
  else                      -> List{PathAbsolute}()

act getShellConfigPath(InstallSettings s) -> Option{PathAbsolute}
  if s.shellConfigPath.val as Path specifiedPath -> pathAbsolute(specifiedPath)
  else ->
    getShellConfigPossiblePaths(s.shell.val).first(impure lambda (PathAbsolute absPath) fileExists(absPath))

act installCmd(InstallSettings s) -> Option{Error}
  configPath = getShellConfigPath(s).valueOrError(Error("No shell configuration file found for shell '" + s.shell.val + '\'')).failOnError();
  fileCreate(configPath).failOnError();
  configFile = fileOpen(configPath, FileMode.Append).failOnError();
  configFile.write("\n" + getJumpAlias(s.shell.val, pathProgram()) + '\n' +
                          getExecAlias(s.shell.val, pathProgram()) + '\n');
  print("Added aliases to: '" + configPath + '\'');
  print("Please restart your shell or refresh the configuration file.")

fun cliIsInteruptable(Type{InstallSettings} s) false
