import "std.ns"

import "../database.ns"

enum Shell = ZShell, Bash, PowerShell

struct InstallSettings =
  CliPositional{Shell}        shell,
  CliPositional{Option{Path}} shellConfigPath

fun getShellConfigName(Shell s) -> PathRelative
  if s == Shell.ZShell      -> pathRel() / ".zshrc"
  if s == Shell.Bash        -> pathRel() / ".bashrc"
  if s == Shell.PowerShell  -> pathRel() / "Documents" / "PowerShell" / "Microsoft.PowerShell_profile.ps1"
  else                      -> pathRel() / "unsupported"

fun autoGenComment() "Automatically generated by: 'ncb.nx install'"

fun getJumpAlias(Shell s, Path programPath) -> string
  if s == Shell.ZShell      -> "function j() { cd \"$(" + programPath.string() + " get $@)\"; } # " + autoGenComment()
  if s == Shell.Bash        -> "function j() { cd \"$(" + programPath.string() + " get $@)\"; } # " + autoGenComment()
  if s == Shell.PowerShell  -> "function j { Set-Location $(" + programPath.string() + " get $args) } # " + autoGenComment()
  else                      -> ""

act installCmd(InstallSettings s) -> Option{Error}
  homePath    = getHomePath().failOnError();
  configPath  = s.shellConfigPath.val ?? (homePath / getShellConfigName(s.shell.val));
  if !fileExists(configPath) -> fail("Shell configuration file not found: " + configPath)
  else ->
    configFile = fileOpen(configPath, FileMode.Append).failOnError();
    configFile.write("\n" + getJumpAlias(s.shell.val, pathProgram()) + '\n');
    print("Added aliases to: '" + configPath + '\'');
    print("Please restart your shell or refresh the configuration file.")
