import "std.ns"

import "../database.ns"
import "../utils.ns"

struct RemoveSettings =
  bool                                noColor,
  CliPositional{Option{List{string}}} keys

act removeFromDb(Database db, List{string} keys) -> Either{Database, Error}
  keys.fold(lambda (Either{Database, Error} res, string key) -> Either{Database, Error}
    if res as Error     err -> err
    if res as Database  db ->
      if db[key] is None  -> Error("Key '" + key + "' cannot be found")
      else                -> db.removeEntry(key)
  , Either{Database, Error}(db))

act getRemoveInputTextInteractive(RemoveSettings s, Console c) -> string
  inStream  = c.stdIn;
  outStream = getInteractiveOutputStream(c).failOnError();
  db        = loadDb().failOnError();
  getKeyInteractive(db, EntryType.Any, inStream, outStream, !s.noColor) ?? ""

act getRemoveInputText(RemoveSettings s, Console c) -> string
  if c.isTerm() -> getRemoveInputTextInteractive(s, c)
  else          -> (getUntilInterupt(fork c.readToEnd()) ?? "").failOnError()

act getKeysToRemoveFromInput(RemoveSettings s, Console c) -> List{string}
  parser = manyParser(untilParser(isWhitespace) << whitespaceParser());
  text   = getRemoveInputText(s, c);
  parser.run(text) ?? List{string}()

act getKeysToRemove(RemoveSettings s, Console c) -> List{string}
  if s.keys.val as List{string} keys -> keys
  else                               -> getKeysToRemoveFromInput(s, c)

act removeCmd(RemoveSettings s) -> Option{Error}
  c     = consoleOpen().failOnError();
  keys  = getKeysToRemove(s, c);
  if transaction(removeFromDb[keys], TransactionFlags.Backup) as Error err -> err
  else ->
    writer = listWriter(litWriter("Removed '") & stringWriter() & litWriter('\'') & newlineWriter());
    c.writeOut(writer, keys)

fun cliIsInteruptable(Type{RemoveSettings} s) false
