import "std.ns"

import "../database.ns"
import "../utils.ns"
import "../writer.ns"

enum ListSortMode = Key, Path, CreationTime, AccessTime

struct ListSettings =
  bool          time,
  bool          noColor,
  ListSortMode  sort,
  Option{int}   width

fun orderListEntry(Entry e1, Entry e2, ListSettings s)
  if s.sort == ListSortMode.CreationTime  -> orderEntryCreationTime(e1, e2)
  if s.sort == ListSortMode.AccessTime    -> orderEntryAccessTime(e1, e2)
  if s.sort == ListSortMode.Path          -> orderEntryPath(e1, e2)
  else                                    -> orderEntryKey(e1, e2)

fun sortListEntries(List{Entry} entries, ListSettings s)
  entries.sort(orderListEntry[s])

fun cliDefaults(Type{ListSettings} t)
  CliDefault("sort", "key") :: List{CliDefault}()

act listCmd(ListSettings s) -> Option{Error}
  c             = consoleOpen().failOnError();
  db            = loadDb().failOnError();
  maxKeyWidth   = getMaxEntryKeySize(db.entries);
  maxTotalWidth = s.width ?? (c.termGetWidth() ?? 80);
  color         = !s.noColor && c.allowColor();
  writer        = listWriter(entryWriter(s.time, maxKeyWidth, maxTotalWidth, color), newlineWriter()) & newlineWriter();
  if db.entries.isEmpty() -> c.writeOut("No entries in database\n")
  else                    -> c.writeOut(writer, db.entries.map(updateTimeToLocal).sortListEntries(s))

fun cliIsInteruptable(Type{ListSettings} s) false
