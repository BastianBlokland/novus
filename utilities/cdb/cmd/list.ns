import "std.ns"

import "../database.ns"
import "../utils.ns"
import "../writer.ns"

enum ListSortMode = Key, Path, CreationTime, AccessTime

struct ListSettings =
  EntryType       type,
  GlobTextPattern filter,
  Option{int}     width,
  bool            time,
  ListSortMode    sort,
  bool            noColor,
  bool            keysOnly

fun orderListEntry(Entry e1, Entry e2, ListSettings s)
  if s.sort == ListSortMode.CreationTime  -> orderEntryCreationTime(e1, e2)
  if s.sort == ListSortMode.AccessTime    -> orderEntryAccessTime(e1, e2)
  if s.sort == ListSortMode.Path          -> orderEntryPath(e1, e2)
  else                                    -> orderEntryKey(e1, e2)

fun sortListEntries(List{Entry} entries, ListSettings s)
  entries.sort(orderListEntry[s])

fun getListErrorMessage(ListSettings s)
  if s.type == EntryType.File       -> "No files found in database\n"
  if s.type == EntryType.Directory  -> "No directories found in database\n"
  else                              -> "No entries in database\n"

fun cliDefaults(Type{ListSettings} t)
  CliDefault("type",    "any") ::
  CliDefault("filter",  "*")   ::
  CliDefault("sort",    "key")

act listCmd(ListSettings s) -> Option{Error}
  c             = consoleOpen().failOnError();
  db            = loadDb().failOnError();
  color         = !s.noColor && c.allowColor();
  entries       = db.entries.filterEntries(s.type, s.filter).map(updateTimeToLocal).sortListEntries(s);
  maxKeyWidth   = getMaxEntryKeySize(entries);
  maxTotalWidth = s.width ?? (c.termGetWidth() ?? 80);
  entryWriter   = s.keysOnly ? entryKeyWriter() : entryWriter(s.time, maxKeyWidth, maxTotalWidth, color);
  writer        = listWriter(entryWriter, newlineWriter()) & newlineWriter();
  if entries.isEmpty() -> c.writeOut(getListErrorMessage(s))
  else                 -> c.writeOut(writer, entries)

fun cliIsInteruptable(Type{ListSettings} s) false
