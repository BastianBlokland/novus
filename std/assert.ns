import "std/console.ns"
import "std/list.ns"
import "std/rt.ns"
import "std/sourceloc.ns"
import "std/type.ns"

// -- Types

struct AssertData =
  bool      cond,
  string    condDesc,
  string    usrMsg,
  SourceLoc srcLoc

// -- Basic

act assert(bool cond, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(cond, "", msg, srcLoc))

act assertNot(bool cond, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(!cond, "", msg, srcLoc))

act assert{T}(T value, function{T, bool} predicate, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(predicate(value), "predicate(" + value.string() + ")", msg, srcLoc))

// -- Comparisons

act assertEq{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x == y, x.string() + " == " + y.string(), msg, srcLoc))

act assertNotEq{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x != y, x.string() + " != " + y.string(), msg, srcLoc))

act assertGtr{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x > y, x.string() + " > " + y.string(), msg, srcLoc))

act assertGtrOrEq{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x >= y, x.string() + " >= " + y.string(), msg, srcLoc))

act assertLe{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x < y, x.string() + " < " + y.string(), msg, srcLoc))

act assertLeOrEq{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x <= y, x.string() + " <= " + y.string(), msg, srcLoc))

// -- Comparsions with Pair

act assertEq{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertEq(p.first, p.second, msg, srcLoc)

act assertNotEq{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertNotEq(p.first, p.second, msg, srcLoc)

act assertGtr{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertGtr(p.first, p.second, msg, srcLoc)

act assertGtrOrEq{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertGtrOrEq(p.first, p.second, msg, srcLoc)

act assertLe{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertLe(p.first, p.second, msg, srcLoc)

act assertLeOrEq{X, Y}(Pair{X, Y} p, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assertLeOrEq(p.first, p.second, msg, srcLoc)

// -- Approx

act assertApprox{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(approx(x, y), x.string() + " ≈ " + y.string(), msg, srcLoc))

act assertNotApprox{X, Y}(X x, Y y, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(!approx(x, y), x.string() + " !≈ " + y.string(), msg, srcLoc))

// -- Unions

act assertIs{X, T}(X x, Type{T} t, string msg = "", SourceLoc srcLoc = getSourceLoc())
  assert(AssertData(x is T, x.string() + " is " + t, msg, srcLoc))

// -- Collections

act assertAll{T}(List{T} l, function{T, bool} pred, string msg = "", SourceLoc srcLoc = getSourceLoc())
  nonMatching = l.filter(!pred);
  assert(AssertData(nonMatching.isEmpty(), "predicate(" + nonMatching.string() + ")", msg, srcLoc))

act assertNone{T}(List{T} l, function{T, bool} pred, string msg = "", SourceLoc srcLoc = getSourceLoc())
  matching = l.filter(pred);
  assert(AssertData(matching.isEmpty(), "!predicate(" + matching.string() + ")", msg, srcLoc))

// -- Implementation

act assert(AssertData data)
  if data.cond -> true
  else         -> fail{bool}(assertErrMsgWriter().run(data))

// -- Writers

fun assertErrMsgWriter()
  srcLocWriter = (
    litWriter("[") &
      stringWriter() & litWriter(" Ln ") & txtIntWriter() & litWriter(", Col ") & txtIntWriter() &
    litWriter("]")
  ).map(lambda (SourceLoc sl) makePair(sl.file, sl.line, sl.column));
  condDescWriter = (
    litWriter(" '") & stringWriter() & litWriter("'")
  );
  usrMsgWriter = (
    litWriter(": ") & stringWriter()
  );
  (
    litWriter("Assertion failed ") & srcLocWriter & ?condDescWriter & ?usrMsgWriter
  ).map(lambda (AssertData d)
    makePair(
      d.srcLoc,
      d.condDesc.isEmpty() ? None() : d.condDesc,
      d.usrMsg.isEmpty() ? None() : d.usrMsg)
  )
