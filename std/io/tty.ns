import "std/core.ns"
import "std/format.ns"
import "std/prim.ns"
import "std/utilities.ns"

// -- Utilities for interacting with a tty terminal using ANSI escape codes:
// https://en.wikipedia.org/wiki/ANSI_escape_code

enum TtyStyle =
  Reset           : 0,
  Bold            : 1,
  Faint           : 2,
  Underline       : 4,
  Reversed        : 7,
  FgBlack         : 30,
  FgRed           : 31,
  FgGreen         : 32,
  FgYellow        : 33,
  FgBlue          : 34,
  FgMagenta       : 35,
  FgCyan          : 36,
  FgWhite         : 37,
  BgBlack         : 40,
  BgRed           : 41,
  BgGreen         : 42,
  BgYellow        : 43,
  BgBlue          : 44,
  BgMagenta       : 45,
  BgCyan          : 46,
  BgWhite         : 47,
  FgBrightBlack   : 90,
  FgBrightRed     : 91,
  FgBrightGreen   : 92,
  FgBrightYellow  : 93,
  FgBrightBlue    : 94,
  FgBrightMagenta : 95,
  FgBrightCyan    : 96,
  FgBrightWhite   : 97,
  BgBrightBlack   : 100,
  BgBrightRed     : 101,
  BgBrightGreen   : 102,
  BgBrightYellow  : 103,
  BgBrightBlue    : 104,
  BgBrightMagenta : 105,
  BgBrightCyan    : 106,
  BgBrightWhite   : 107

enum TtyDir = Up, Down, Right, Left

struct TtyCursorMove = TtyDir dir, int amount

struct TtyCursorPos = int row, int col

enum TtyClearMode =
  CursorToEnd   : 0,
  CursorToStart : 1,
  All           : 2

struct TtyColor = char color

fun TtyColor(Color c)
  toDiscrete = ( lambda (float v)
    int(clamp(v, 0.0, 1.0) * 5.0 + 0.5)
  );
  TtyColor(char(16 + 36 * toDiscrete(c.r) + 6 * toDiscrete(c.g) + toDiscrete(c.b)))

fun ttyEsc() char(27).string()

fun ttyBell() char(7).string()

// -- Writer primitives

fun ttyStyleWriter() -> Writer{TtyStyle}
  (
    litWriter(ttyEsc() + '[') & txtIntWriter() & litWriter('m')
  ).map(lambda (TtyStyle s) s.int())

fun ttyStyleListWriter() -> Writer{List{TtyStyle}}
  listWriter(ttyStyleWriter())

fun ttyLitStyleWriter(TtyStyle s) -> Writer{None}
  litWriter(ttyEsc() + '[' + s.int().string() + 'm')

fun ttyLitStyleWriter(List{TtyStyle} styleList) -> Writer{None}
  styleList.fold(lambda (Writer{None} res, TtyStyle s)
    res & ttyLitStyleWriter(s)
  , noneWriter())

fun ttyStyleFgColorWriter() -> Writer{TtyColor}
  (
    litWriter(ttyEsc() + "[38;5;") & txtIntWriter() & litWriter('m')
  ).map(lambda (TtyColor c) c.color.int())

fun ttyStyleBgColorWriter() -> Writer{TtyColor}
  (
    litWriter(ttyEsc() + "[48;5;") & txtIntWriter() & litWriter('m')
  ).map(lambda (TtyColor c) c.color.int())

fun ttyCusorMoveWriter() -> Writer{TtyCursorMove}
  (
    litWriter(ttyEsc() + "[") & txtIntWriter() & charWriter()
  ).map(lambda (TtyCursorMove m)
    Tuple(
      m.amount,
      if m.dir == TtyDir.Up    -> 'A'
      if m.dir == TtyDir.Down  -> 'B'
      if m.dir == TtyDir.Right -> 'C'
      else                     -> 'D'))

fun ttyLitCusorMoveWriter(TtyCursorMove m) -> Writer{None}
  litWriter(ttyEsc() + "[" + m.amount.string() +
    if m.dir == TtyDir.Up    -> 'A'
    if m.dir == TtyDir.Down  -> 'B'
    if m.dir == TtyDir.Right -> 'C'
    else                     -> 'D')

fun ttyLitCusorLineStartWriter() -> Writer{None}
  ttyLitCusorMoveWriter(TtyCursorMove(TtyDir.Left, 99999))

fun ttyCursorColWriter() -> Writer{int}
  litWriter(ttyEsc() + "[") & txtIntWriter() & litWriter('G')

fun ttyCursorPosWriter() -> Writer{TtyCursorPos}
  (
    litWriter(ttyEsc() + "[") & txtIntWriter() & litWriter(';') & txtIntWriter() & litWriter('H')
  ).to(Type{TtyCursorPos}())

fun ttyLitCursorPosWriter(TtyCursorPos p) -> Writer{None}
  litWriter(ttyEsc() + "[" + p.row.string() + ';' + p.col.string() + 'H')

fun ttyCursorShowWriter() -> Writer{bool}
  (
    litWriter(ttyEsc() + "[?25") & charWriter()
  ).map(lambda (bool show) show ? 'h' : 'l')

fun ttyLitCursorShowWriter(bool show) -> Writer{None}
  litWriter(ttyEsc() + "[?25" + (show ? 'h' : 'l'))

fun ttyLineWrapWriter() -> Writer{bool}
  (
    litWriter(ttyEsc() + "[?7") & charWriter()
  ).map(lambda (bool wrap) wrap ? 'h' : 'l')

fun ttyLitLineWrapWriter(bool wrap) -> Writer{None}
  litWriter(ttyEsc() + "[?7" + (wrap ? 'h' : 'l'))

fun ttyCursorBlinkWriter() -> Writer{bool}
  (
    litWriter(ttyEsc() + "[?12") & charWriter()
  ).map(lambda (bool blink) blink ? 'h' : 'l')

fun ttyLitCursorBlinkWriter(bool blink) -> Writer{None}
  litWriter(ttyEsc() + "[?12" + (blink ? 'h' : 'l'))

fun ttyAltScreenWriter() -> Writer{bool}
  (
    litWriter(ttyEsc() + "[?1049") & charWriter()
  ).map(lambda (bool show) show ? 'h' : 'l')

fun ttyLitAltScreenWriter(bool altScreen) -> Writer{None}
  litWriter(ttyEsc() + "[?1049" + (altScreen ? 'h' : 'l'))

fun ttyClearWriter() -> Writer{TtyClearMode}
  (
    litWriter(ttyEsc() + "[") & txtIntWriter() & litWriter('J')
  ).map(lambda (TtyClearMode m) m.int())

fun ttyLitClearWriter(TtyClearMode m) -> Writer{None}
  litWriter(ttyEsc() + "[" + m.int().string() + 'J')

fun ttyClearLineWriter() -> Writer{TtyClearMode}
  (
    litWriter(ttyEsc() + "[") & txtIntWriter() & litWriter('K')
  ).map(lambda (TtyClearMode m) m.int())

fun ttyLitClearLineWriter(TtyClearMode m = TtyClearMode.All) -> Writer{None}
  litWriter(ttyEsc() + "[" + m.int().string() + 'K')

fun ttyResetWriter() -> Writer{None}
  litWriter(ttyEsc() + "c")

fun ttyResetLineWriter() -> Writer{None}
  ttyLitCusorLineStartWriter() & ttyLitClearLineWriter(TtyClearMode.CursorToEnd)

fun ttyLitWindowTitleWriter(string title) -> Writer{None}
  litWriter(ttyEsc() + "]0;" + title + ttyBell())

fun ttyWindowTitleWriter() -> Writer{string}
  litWriter(ttyEsc() + "]0;") & stringWriter() & litWriter(ttyBell())

// -- Compound writers

fun ttyStyledTextWriter{T}(Writer{T} w, TtyStyle s) -> Writer{T}
  ttyLitStyleWriter(s) & w & ttyLitStyleWriter(TtyStyle.Reset)

fun ttyStyledTextWriter{T}(Writer{T} w, List{TtyStyle} styleList) -> Writer{T}
  ttyLitStyleWriter(styleList) & w & ttyLitStyleWriter(TtyStyle.Reset)
