import "path.ns"
import "stream.ns"

import "std/core.ns"
import "std/diag.ns"
import "std/format.ns"
import "std/prim.ns"

// -- Types

enum FileMode =
  Create : 0,
  Open,
  Append

enum FileFlags =
  None       : 0b0,
  AutoRemove : 0b1

struct File =
  Path        path,
  FileMode    mode,
  FileFlags   flags,
  sys_stream  stream

// -- Conversions

fun string(FileFlags o)
  (o & FileFlags.AutoRemove) != 0 ? "[AutoRemove]" : ""

fun string(File f)
  "(" + f.mode.string() + f.flags.string() + " " + f.path.string() + ")"

// -- Actions

act fileOpen(Path p, FileMode m, FileFlags flags = FileFlags.None) -> Either{File, Error}
  absPath     = p.pathAbsolute();
  absPathStr  = absPath.string();
  stream      = intrinsic{file_openstream}(absPathStr, int(m) | flags << 8);
  if stream.isValid() -> File(absPath, m, flags, stream)
  else                -> platformError("Failed to open file: '" + absPathStr + "'")

act readToEnd(File f) -> Either{string, Error}
  f.stream.readToEnd()

act readToEnd{T}(File f, Parser{T} parser) -> Either{T, Error}
  f.readToEnd().map(impure lambda (string s) parser.run(s))

act write(File f, string str) -> Option{Error}
  f.stream.write(str)

act write{T}(File f, Writer{T} writer, T val) -> Option{Error}
  f.write(writer.run(val))

act fileRead(Path p) -> Either{string, Error}
  p.fileOpen(FileMode.Open).map(impure lambda (File f) f.readToEnd())

act fileRead{T}(Path p, Parser{T} parser) -> Either{T, Error}
  p.fileOpen(FileMode.Open).map(impure lambda (File f) f.readToEnd(parser))

act fileWrite(Path p, string str) -> Option{Error}
  p.fileOpen(FileMode.Create).map(impure lambda (File f) f.write(str))

act fileWrite{T}(Path p, Writer{T} writer, T val) -> Option{Error}
  p.fileOpen(FileMode.Create).map(impure lambda (File f) f.write(writer, val))

act fileAppend(Path p, string str) -> Option{Error}
  p.fileOpen(FileMode.Append).map(impure lambda (File f) f.write(str))

act fileAppend{T}(Path p, Writer{T} writer, T val) -> Option{Error}
  p.fileOpen(FileMode.Append).map(impure lambda (File f) f.write(writer, val))

act fileRemove(Path p) -> Option{Error}
  absPath     = p.pathAbsolute();
  absPathStr  = absPath.string();
  intrinsic{file_remove}(absPathStr)
    ? None()
    : platformError("Failed to remove file: '" + absPathStr + "'")

// -- Tests

assertEq(
  p = pathCurrent() / "file-test1.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write("hello world")
  );
  fileRead(p), "hello world")

assertEq(
  p = pathCurrent() / "file-test2.tmp";
  f = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write("hello world");
      f.write("hello world");
      f.write("hello world")
  );
  fileRead(p), "hello worldhello worldhello world")

assertEq(
  json  = JsonValue(JsonArray(JsonValue(true) :: JsonValue(2.0)));
  p     = pathCurrent() / "file-test3.tmp";
  f     = fileOpen(p, FileMode.Create, FileFlags.AutoRemove).map(
    impure lambda (File f)
      f.write(jsonWriter(), json)
  );
  Tuple(fileRead(p, jsonParser()), json))

assertIs(
  p = pathCurrent() / "file-test4.tmp";
  fileOpen(p, FileMode.Create, FileFlags.AutoRemove), Type{File}())

assertIs(
  p = pathCurrent() / "file-test5.tmp";
  fileOpen(p, FileMode.Open), Type{Error}())

assertIs(
  p = pathCurrent() / "file-test6.tmp";
  fileOpen(p, FileMode.Append, FileFlags.AutoRemove), Type{Error}())

assertIs(fileRemove(pathCurrent() / "non-existing-file"), Type{Error}())
