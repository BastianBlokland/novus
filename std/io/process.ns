import "std/core.ns"
import "std/diag.ns"
import "std/format.ns"
import "std/prim.ns"

// -- Types

struct ProcessId  = long id
struct ExitCode   = int code

enum ProcessFlags =
  None        : 0b0000,
  PipeStdIn   : 0b0001,
  PipeStdOut  : 0b0010,
  PipeStdErr  : 0b0100,
  PipeOut     : 0b0110,
  PipeInOut   : 0b0111,
  NewGroup    : 0b1000

enum Signal =
  Interupt  : 0,
  Kill      : 1

struct Process =
  string              cmdLine,
  sys_process         handle,
  ProcessId           id,
  Option{sys_stream}  stdInPipe,
  Option{sys_stream}  stdOutPipe,
  Option{sys_stream}  stdErrPipe

struct ProcessResult =
  Option{string}  stdOut,
  Option{string}  stdErr,
  ExitCode        exitCode

// -- Conversions

fun string(Process p)
  "(pid:" + p.id + ", " + p.cmdLine + ")"

fun string(ProcessResult r)
  "(out:'" + (r.stdOut ?? "").escapeForPrinting() +
  "' err:'" + (r.stdErr ?? "").escapeForPrinting() +
  "' code:" + r.exitCode + ")"

fun string(ProcessFlags f)
  toEnumFlagNames(f).string()

// -- Functions

fun toCmdLine(string prog, List{string} args) -> string
  processElem = (lambda (string s)
    singleQuoteEscaped = s.replace("'", "\\'");
    singleQuoteEscaped.any(isWhitespace) ? ("'" + singleQuoteEscaped + "'") : singleQuoteEscaped
  );
  (prog :: args).map(processElem).string("", " ", "")

fun isSuccess(ExitCode ec)
  ec.code == 0

fun isSuccess(ProcessResult r)
  r.exitCode.isSuccess()

// -- Actions

act run(string prog, List{string} args, ProcessFlags flags = ProcessFlags.None) -> Either{Process, Error}
  run(toCmdLine(prog, args), flags)

act run(string cmdLine, ProcessFlags flags = ProcessFlags.None) -> Either{Process, Error}
  handle  = intrinsic{process_start}(cmdLine, flags);
  pid     = ProcessId(intrinsic{process_getid}(handle));
  if pid.id < 0 -> platformError("Failed to run: '" + cmdLine + "'")
  else          ->
    Process(
      cmdLine, handle, pid,
      (flags & ProcessFlags.PipeStdIn) != 0 ? Option(intrinsic{process_openstream}(handle, 0)) : None(),
      (flags & ProcessFlags.PipeStdOut) != 0 ? Option(intrinsic{process_openstream}(handle, 1)) : None(),
      (flags & ProcessFlags.PipeStdErr) != 0 ? Option(intrinsic{process_openstream}(handle, 2)) : None())

act sendInterupt(Process p) -> Option{Error}
  p.sendSignal(Signal.Interupt)

act sendSignal(Process p, Signal s) -> Option{Error}
  intrinsic{process_sendsignal}(p.handle, int(s))
    ? None()
    : Error("Failed to send signal: '" + s + "'")

act readProcessOutPipe(Process p) -> Either{Option{string}, Error}
  if p.stdOutPipe as sys_stream s -> s.readToEnd().map(lambda (string s) Option(s))
  else                            -> Option{string}()

act readProcessErrPipe(Process p) -> Either{Option{string}, Error}
  if p.stdErrPipe as sys_stream s -> s.readToEnd().map(lambda (string s) Option(s))
  else                            -> Option{string}()

act wait(Either{Process, Error} pOrErr) -> Either{ProcessResult, Error}
  pOrErr.map(impure lambda (Process p) p.wait())

act wait(Process p) -> Either{ProcessResult, Error}
  stdOutRes = fork p.readProcessOutPipe();
  stdErrRes = fork p.readProcessErrPipe();
  exitCode  = ExitCode(intrinsic{process_block}(p.handle));
  if stdOutRes.get() as Error outErr -> outErr
  if stdErrRes.get() as Error errErr -> errErr
  else -> ProcessResult(stdOutRes.get() ?? Option{string}(), stdErrRes.get() ?? Option{string}(), exitCode)

act waitAsync(Process p) -> future{Either{ProcessResult, Error}}
  fork p.wait()

act shutdown(Process p) -> Either{ProcessResult, Error}
  result = p.waitAsync();
  if p.sendSignal(Signal.Interupt) as Error interuptErr -> interuptErr
  else ->
  if result.get(seconds(1)) as Either{ProcessResult, Error} processRes -> processRes
  else ->
  if p.sendSignal(Signal.Kill) as Error killErr -> killErr
  else -> result.get()

// -- Tests

assertEq(
  toCmdLine("git", "log" :: List{string}()),
  "git log")

assertEq(
  toCmdLine("git", "arg with spaces" :: List{string}()),
  "git 'arg with spaces'")

assertEq(
  toCmdLine("git", "arg 'with' spaces 'and 'quotes" :: List{string}()),
  "git 'arg \\'with\\' spaces \\'and \\'quotes'")

assertEq(
  toCmdLine("C:\\Program Files\\CMake\\bin\\cmake", "-E" :: "echo" :: "Hello world"),
  "'C:\\Program Files\\CMake\\bin\\cmake' -E echo 'Hello world'")

assert(
  run("cmake", "-E" :: "echo" :: "Hello world" :: List{string}(), ProcessFlags.PipeInOut),
  lambda (Either{Process, Error} e)
    e as Process p  &&
    p.id.id > 0     &&
    p.cmdLine == "cmake -E echo 'Hello world'")

assert(
  run("cmake", "-E" :: "echo" :: "Hello world", ProcessFlags.PipeInOut).wait(),
  lambda (Either{ProcessResult, Error} e)
    e as ProcessResult r                        &&
    (r.stdOut ?? "").startsWith("Hello world")  &&
    (r.stdErr ?? "").isEmpty()                  &&
    r.exitCode == ExitCode(0))

assert(
  run("cmake", "--version" :: List{string}(), ProcessFlags.PipeInOut).wait(),
  lambda (Either{ProcessResult, Error} e)
    e as ProcessResult r                          &&
    (r.stdOut ?? "").startsWith("cmake version")  &&
    (r.stdErr ?? "").isEmpty()                    &&
    r.exitCode == ExitCode(0))

assert(
  run("cmake", "invalid" :: List{string}(), ProcessFlags.PipeInOut).wait(),
  lambda (Either{ProcessResult, Error} e)
    e as ProcessResult r                        &&
    (r.stdOut ?? "").isEmpty()                  &&
    (r.stdErr ?? "").startsWith("CMake Error")  &&
    r.exitCode == ExitCode(1))
