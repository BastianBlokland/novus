import "either.ns"
import "option.ns"
import "tuple.ns"

import "std/diag.ns"
import "std/prim.ns"

// -- Types

union List{T} = LNode{T},  LEnd

struct LNode{T} = T val, List{T} next
struct LEnd

// -- Constructors

fun List{T}() -> List{T}
  LEnd()

fun List{T}(T val) -> List{T}
  LNode(val, List{T}())

fun List{T}(T val, List{T} next) -> List{T}
  LNode(val, next)

// -- Operators

fun ::{T}(T val1, T val2)
 val1 :: List{T}(val2)

fun ::{T}(List{T} l1, T val)
  List{T}(val).push(l1)

fun ::{T}(T val, List{T} l)
  l.push(val)

fun ::{T}(List{T} l1, List{T} l2)
  l2.push(l1)

fun ::{T}(Option{T} opt, List{T} l)
  if opt as T val -> l.push(val)
  if opt is None  -> l

fun ::{T}(Option{List{T}} opt, List{T} l)
  if opt as List{T} other -> l.push(other)
  if opt is None          -> l

fun []{T}(List{T} l, int idx) -> Option{T}
  l.pop(idx).front()

fun []{T}(List{T} l, int startIdx, int endIdx) -> List{T}
  l.pop(startIdx).take(endIdx - startIdx)

fun =={T}(List{T} l1, List{T} l2)
  if l1 as LNode{T} n1 && l2 as LNode{T} n2 && n1.val == n2.val   -> self(n1.next, n2.next)
  if l1 is LEnd && l2 is LEnd                                     -> true
  else                                                            -> false

// -- Conversions

fun string{T}(List{T} l, string start = "[", string sep = ",", string end = "]")
  start + l.fold(lambda (string prefix, bool last, T v)
    last ? prefix + v.string() : prefix + v.string() + sep) + end

// -- Functions

fun isEmpty{T}(List{T} l)
  l is LEnd

fun noneIfEmpty{T}(List{T} l) -> Option{List{T}}
  l.isEmpty() ? None() : l

fun front{T}(List{T} l) -> Option{T}
  l as LNode{T} n ? n.val : None()

fun back{T}(List{T} l) -> Option{T}
  if l as LNode{T} n  -> n.next is LEnd ? n.val : back(n.next)
  if l is LEnd        -> None()

fun push{T}(List{T} l, T val)
  List(val, l)

fun push{T}(List{T} l, T val, int times)
  if times <= 0 -> l
  else          -> self(l.push(val), val, --times)

fun push{T}(List{T} l, List{T} l2)
  l.pushReverse(l2.reverse())

fun pushReverse{T}(List{T} l, List{T} l2)
  l2.fold(lambda (List{T} result, T val) push(result, val) , l)

fun pushUnique{T}(List{T} l, T val)
  l.contains(val) ? l : l.push(val)

fun pushRange{T}(List{T} l, T start, T end)
  if start >= end -> l
  else            -> pushRange(--end :: l, start, --end)

fun pushRangeReverse{T}(List{T} l, T start, T end)
  if start >= end -> l
  else            -> pushRangeReverse(start :: l, ++start, end)

fun pushBack{T}(List{T} l, T val)
  if l as LNode{T} n  -> List(n.val, n.next.pushBack(val))
  if l is LEnd        -> List(val)

fun pop{T}(List{T} l, int amount = 1)
  if l as LNode{T} n  -> amount > 0 ? pop(n.next, --amount) : l
  if l is LEnd        -> l

fun pop{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) ? pop(n.next, pred) : l
  if l is LEnd        -> l

fun popBack{T}(List{T} l, int amount = 1)
  l.take(l.length() - amount)

fun take{T}(List{T} l, int amount)
  if l as LNode{T} n  -> amount > 0 ? List{T}(n.val, take(n.next, --amount)) : List{T}()
  if l is LEnd        -> l

fun take{T}(List{T} l, function{T, bool} pred)
  invoke(lambda (List{T} rem, List{T} result)
    if rem as LNode{T} n  -> pred(n.val) ? self(n.next, n.val :: result) : result
    if rem is LEnd        -> result
  , l, List{T}()).reverse()

fun insert{T}(List{T} l, int idx, T val)
  l.take(idx) :: val :: l.pop(idx)

fun insertOrdered{T}(List{T} l, T val)
  if l as LNode{T} n -> val < n.val ? List(val, l) : List(n.val, insertOrdered(n.next, val))
  if l is LEnd       -> List(val)

fun rangeList{T}(T start, T end)
  List{T}().pushRange(start, end)

fun rangeListReverse{T}(T start, T end)
  List{T}().pushRangeReverse(start, end)

fun gridList{T}(T width, T height)
  makeGrid = (lambda (T x, T y, List{Tuple{T, T}} result)
      if y < T()  -> result
      if x < T()  -> self(--width, --y, result)
      else        -> self(--x, y, Tuple(x, y) :: result)
  );
  makeGrid(--width, --height, List{Tuple{T, T}}())

fun gridListReverse{T}(T width, T height)
  makeGrid = (lambda (T x, T y, List{Tuple{T, T}} result)
      if y >= height  -> result
      if x >= width   -> self(T(), ++y, result)
      else            -> self(++x, y, Tuple(x, y) :: result)
  );
  makeGrid(T(), T(), List{Tuple{T, T}}())

fun fold{T, TResult}(List{T} l, function{TResult, T, TResult} func)
  fold(l, func, TResult())

fun fold{T, TResult}(List{T} l, function{TResult, T, TResult} func, TResult result)
  if l as LNode{T} n -> fold(n.next, func, func(result, n.val))
  if l is LEnd       -> result

fun fold{T, TResult}(List{T} l, function{TResult, bool, T, TResult} func)
  fold(l, func, TResult())

fun fold{T, TResult}(List{T} l, function{TResult, bool, T, TResult} func, TResult result)
  if l as LNode{T} n -> fold(n.next, func, func(result, n.next is LEnd, n.val))
  if l is LEnd       -> result

fun foldRight{T, TResult}(List{T} l, function{TResult, T, TResult} func)
  foldRight(l, func, TResult())

fun foldRight{T, TResult}(List{T} l, function{TResult, T, TResult} func, TResult result)
  if l as LNode{T} n -> func(foldRight(n.next, func, result), n.val)
  if l is LEnd       -> result

fun filter{T}(List{T} l, function{T, bool} pred)
  l.foldRight(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun filterReverse{T}(List{T} l, function{T, bool} pred)
  l.fold(lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

fun filterNone{T}(List{Option{T}} l)
  l.foldRight(lambda (List{T} newList, Option{T} val) val as T t ? t :: newList : newList)

fun filterNoneReverse{T}(List{Option{T}} l)
  l.fold(lambda (List{T} newList, Option{T} val) val as T t ? t :: newList : newList)

fun map{T, TResult}(List{T} l, function{T, TResult} func)
  l.foldRight(lambda (List{TResult} newList, T val) func(val) :: newList)

fun mapReverse{T, TResult}(List{T} l, function{T, TResult} func)
  l.fold(lambda (List{TResult} newList, T val) func(val) :: newList)

fun map{T, TResult}(List{T} l, function{T, Option{TResult}} a)
  l.foldRight(lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

fun mapReverse{T, TResult}(List{T} l, function{T, Option{TResult}} a)
  l.fold(lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

fun length{T}(List{T} l)
  l.fold(lambda (int c, T val) c + 1)

fun sum{T}(List{T} l)
  l.fold(lambda (T s, T val) s + val)

fun merge{T}(List{List{T}} lists)
  lists.foldRight(lambda (List{T} l, List{T} res) l :: res)

fun mergeReverse{T}(List{List{T}} lists)
  lists.fold(lambda (List{T} l, List{T} res) l :: res)

fun reverse{T}(List{T} l)
  l.fold(lambda (List{T} newList, T val) val :: newList)

fun partition{T}(List{T} l, T pivot)
  partition(l, pivot, less{T})

fun partition{T}(List{T} l, T pivot, function{T, T, bool} order)
  l.fold(lambda (Tuple{List{T}, List{T}} result, T item)
    less = order(item, pivot);
    Tuple(less ? item :: result.f1 : result.f1, less ? result.f2 : item :: result.f2)
  , Tuple(List{T}(), List{T}()))

fun sort{T}(List{T} l)
  sort(l, less{T})

fun sort{T}(List{T} l, function{T, T, bool} order)
  if l as LNode{T} n  -> part = partition(n.next, n.val, order);
                         sort(part.f1, order) :: n.val :: sort(part.f2, order)
  if l is LEnd        -> List{T}()

fun distinct{T}(List{T} l)
  l.fold(pushUnique{T}).reverse()

fun distinctReverse{T}(List{T} l)
  l.fold(pushUnique{T})

fun find{T, Y}(List{T} l, Y value) -> Option{T}
  if l as LNode{T} n  -> n.val == value ? n.val : n.next.find(value)
  if l is LEnd        -> None()

fun first{T}(List{T} l, function{T, bool} pred) -> Option{T}
  if l as LNode{T} n  -> pred(n.val) ? n.val : n.next.first(pred)
  if l is LEnd        -> None()

fun count{T}(List{T} l, function{T, bool} pred)
  l.fold(lambda (int c, T val) pred(val) ? ++c : c)

fun any{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) || n.next.any(pred)
  if l is LEnd        -> false

fun any(List{bool} l)
  if l as LNode{bool} n -> n.val || n.next.any()
  if l is LEnd          -> false

fun all{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> pred(n.val) && n.next.all(pred)
  if l is LEnd        -> true

fun all(List{bool} l)
  if l as LNode{bool} n -> n.val && n.next.all()
  if l is LEnd          -> true

fun none{T}(List{T} l, function{T, bool} pred)
  if l as LNode{T} n  -> !pred(n.val) && n.next.none(pred)
  if l is LEnd        -> true

fun contains{T}(List{T} l, T item)
  if l as LNode{T} n  -> n.val == item || n.next.contains(item)
  if l is LEnd        -> false

fun for{T, TResult}(T from, T to, function{T, TResult} func)
  rangeList(from, to).map(func)

fun for{T, TResult}(T to, function{T, TResult} func)
  rangeList(T(), to).map(func)

fun zip{T1, T2, TResult}(List{T1} a, List{T2} b, function{TResult, T1, T2, TResult} func)
  zip(a, b, func, TResult())

fun zip{T1, T2, TResult}(
  List{T1} a, List{T2} b, function{TResult, T1, T2, TResult} func, TResult result)
  if a as LNode{T1} nA && b as LNode{T2} nB ->
    zip(nA.next, nB.next, func, func(result, nA.val, nB.val))
  else -> result

fun zip{T, TResult}(List{List{T}} l, function{TResult, List{T}, TResult} func)
  l.zip(func, TResult())

fun zip{T, TResult}(List{List{T}} l, function{TResult, List{T}, TResult} func, TResult result)
  getFronts = (lambda (List{List{T}} l, List{T} result)
    if l as LNode{List{T}} n -> n.val as LNode{T} f ? self(n.next, f.val :: result) : List{T}()
    if l is LEnd             -> result
  );
  fronts = getFronts(l, List{T}());
  if fronts.isEmpty() -> result
  else                -> nexts = l.map(lambda (List{T} cur) cur.pop(1));
                         zip(nexts, func, func(result, fronts))

fun split{T1, T2}(List{Either{T1, T2}} l)
  l.reverse().splitReverse()

fun splitReverse{T1, T2}(List{Either{T1, T2}} l)
  l.fold(
    lambda (Tuple{List{T1}, List{T2}} res, Either{T1, T2} elem)
      Tuple(
        elem as T1 t1 ? (t1 :: res.f1) : res.f1,
        elem as T2 t2 ? (t2 :: res.f2) : res.f2
      )
    , Tuple(List{T1}(), List{T2}()))

// -- Impure

act fold{T, TResult}(List{T} l, action{TResult, T, TResult} a)
  fold(l, a, TResult())

act fold{T, TResult}(List{T} l, action{TResult, T, TResult} a, TResult result)
  if l as LNode{T} n -> fold(n.next, a, a(result, n.val))
  if l is LEnd       -> result

act foldRight{T, TResult}(List{T} l, action{TResult, T, TResult} a)
  foldRight(l, a, TResult())

act foldRight{T, TResult}(List{T} l, action{TResult, T, TResult} a, TResult result)
  if l as LNode{T} n -> a(foldRight(n.next, a, result), n.val)
  if l is LEnd       -> result

act filter{T}(List{T} l, action{T, bool} pred)
  l.foldRight(impure lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

act filterReverse{T}(List{T} l, action{T, bool} pred)
  l.fold(impure lambda (List{T} newList, T val) pred(val) ? val :: newList : newList)

act map{T, TResult}(List{T} l, action{T, TResult} a)
  l.foldRight(impure lambda (List{TResult} newList, T val) a(val) :: newList)

act mapReverse{T, TResult}(List{T} l, action{T, TResult} a)
  l.fold(impure lambda (List{TResult} newList, T val) a(val) :: newList)

act map{T, TResult}(List{T} l, action{T, Option{TResult}} a)
  l.foldRight(impure lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

act mapReverse{T, TResult}(List{T} l, action{T, Option{TResult}} a)
  l.fold(impure lambda (List{TResult} newList, T val)
    if a(val) as TResult res -> res :: newList
    else                     -> newList
  )

act for{T, TResult}(T from, T to, action{T, TResult} a)
  rangeList(from, to).map(a)

act for{T, TResult}(T to, action{T, TResult} a)
  rangeList(T(), to).map(a)

act first{T}(List{T} l, action{T, bool} pred) -> Option{T}
  if l as LNode{T} n  -> pred(n.val) ? n.val : n.next.first(pred)
  if l is LEnd        -> None()

// -- Tests

assertEq(List(42), List(42))
assertNotEq(List(42), List{int}())

assertEq(1 :: 2 :: 3, 1 :: 2 :: List(3))
assertNotEq(1 :: 2 :: 3, 3 :: 2 :: 1)
assertNotEq(1 :: 2 :: 3, List(42))

assertEq(Option(42) :: List{int}(), List(42))
assertEq(Option{int}() :: List{int}(), List{int}())

assertEq(
  l1 = 1 :: 2 :: 3;
  l2 = 10 :: 9 :: 8;
  l1 :: l2 :: l1,
  1 :: 2 :: 3 :: 10 :: 9 :: 8 :: 1 :: 2 :: 3)

assertEq((1 :: 2 :: 3)[-1], 1)
assertEq((1 :: 2 :: 3)[0], 1)
assertEq((1 :: 2 :: 3)[1], 2)
assertEq((1 :: 2 :: 3)[2], 3)
assertEq((1 :: 2 :: 3)[4], None())

assertEq((1 :: 2 :: 3)[0, -1], List{int}())
assertEq((1 :: 2 :: 3)[0, 0], List{int}())
assertEq((1 :: 2 :: 3)[0, 1], 1 :: List{int}())
assertEq((1 :: 2 :: 3)[0, 2], 1 :: 2)
assertEq((1 :: 2 :: 3)[0, 3], 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3)[0, 4], 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3)[1, 4], 2 :: 3)
assertEq((1 :: 2 :: 3)[3, 3], List{int}())
assertEq((1 :: 2 :: 3)[3, 4], List{int}())

assertEq((1 :: 2 :: 3).string(), "[1,2,3]")
assertEq((1 :: 2 :: 3).string("", "", ""), "123")
assertEq(("hello" :: "world").string(), "[hello,world]")
assertEq(("hello" :: "world").string("", "", ""), "helloworld")
assertEq(string(List{int}()), "[]")

assert(List{int}().isEmpty())
assertNot(List{int}(42).isEmpty())
assert(List{int}(42).pop().isEmpty())

assertEq((1 :: 2 :: 3).front() ?? -1, 1)
assertEq((1 :: 2 :: 3).back() ?? -1, 3)
assertIs(List{int}().front(), Type{None}())
assertIs(List{int}().back(), Type{None}())

assertEq(push(List{int}(), 42), List(42))
assertEq(push(2 :: 3, 1), 1 :: 2 :: 3)

assertEq((1 :: 2 :: 3).push(List(42)), 42 :: 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).push(42 :: 1337), 42 :: 1337 :: 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).push(3 :: 2 :: 1), 3 :: 2 :: 1 :: 1 :: 2 :: 3)

assertEq(List{int}().push(42, 0), List{int}())
assertEq(List{int}().push(42, -1), List{int}())
assertEq(List{int}().push(42, 1), 42 :: List{int}())
assertEq(List{int}().push(42, 3), 42 :: 42 :: 42)

assertEq(
  l = (1 :: 2 :: 3);
  Tuple(l.pushUnique(1), l))
assertEq(
  l = (1 :: 2 :: 3);
  Tuple(l.pushUnique(2), l))
assertEq(
  l = (1 :: 2 :: 3);
  Tuple(l.pushUnique(3), l))
assertEq(
  l = (1 :: 2 :: 3);
  Tuple(l.pushUnique(4), 4 :: l))
assertEq(
  l = (1 :: 2 :: 3);
  Tuple(l.pushUnique(-1).pushUnique(2).pushUnique(4), 4 :: -1 :: l))

assertEq(
  (42 :: 1337).pushRange(1, 4),
  1 :: 2 :: 3 :: 42 :: 1337)

assertEq(
  (42 :: 1337).pushRangeReverse(1, 4),
  3 :: 2 :: 1 :: 42 :: 1337)

assertEq(pushBack(List{int}(), 42), List(42))
assertEq(pushBack(1 :: 2, 3), 1 :: 2 :: 3)

assertEq((1 :: 2 :: 3 :: 4).pop(), 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(-1), 1 :: 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(0), 1 :: 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(1), 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(2), 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(3), 4 :: List{int}())
assertEq((1 :: 2 :: 3 :: 4).pop(4), List{int}())
assertEq((1 :: 2 :: 3 :: 4).pop(5), List{int}())

assertEq((1 :: 2 :: 3 :: 4).pop(lambda (int i) i == 0), 1 :: 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(lambda (int i) i > 0), List{int}())
assertEq((1 :: 2 :: 3 :: 4).pop(lambda (int i) i == 1), 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).pop(lambda (int i) i < 3), 3 :: 4)

assertEq((1 :: 2 :: 3).take(-1), List{int}())
assertEq((1 :: 2 :: 3).take(0), List{int}())
assertEq((1 :: 2 :: 3).take(1), 1 :: List{int}())
assertEq((1 :: 2 :: 3).take(2), 1 :: 2)
assertEq((1 :: 2 :: 3).take(3), 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).take(4), 1 :: 2 :: 3 )

assertEq((1 :: 2 :: 3).take(lambda (int i) i == 0), List{int}())
assertEq((1 :: 2 :: 3).take(lambda (int i) i > 0), 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).take(lambda (int i) i < 3), 1 :: 2 )

assertEq((1 :: 2 :: 3 :: 4).popBack(), 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3 :: 4).popBack(-1), 1 :: 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).popBack(0), 1 :: 2 :: 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).popBack(1), 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3 :: 4).popBack(2), 1 :: 2)
assertEq((1 :: 2 :: 3 :: 4).popBack(3), 1 :: List{int}())
assertEq((1 :: 2 :: 3 :: 4).popBack(4), List{int}())
assertEq((1 :: 2 :: 3 :: 4).popBack(5), List{int}())

assertEq((1 :: 2 :: 3).insert(-1, 42), 42 :: 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).insert(0, 42), 42 :: 1 :: 2 :: 3)
assertEq((1 :: 2 :: 3).insert(1, 42), 1 :: 42 :: 2 :: 3)
assertEq((1 :: 2 :: 3).insert(2, 42), 1 :: 2 :: 42 :: 3)
assertEq((1 :: 2 :: 3).insert(3, 42), 1 :: 2 :: 3 :: 42)
assertEq((1 :: 2 :: 3).insert(4, 42), 1 :: 2 :: 3 :: 42)

assertEq((1 :: 4 :: 5).insertOrdered(0), 0 :: 1 :: 4 :: 5)
assertEq((1 :: 4 :: 5).insertOrdered(1), 1 :: 1 :: 4 :: 5)
assertEq((1 :: 4 :: 5).insertOrdered(2), 1 :: 2 :: 4 :: 5)
assertEq((1 :: 4 :: 5).insertOrdered(6), 1 :: 4 :: 5 :: 6)
assertEq((1 :: 4 :: 5).insertOrdered(99), 1 :: 4 :: 5 :: 99)

assertEq(rangeList(1, 4), 1 :: 2 :: 3)
assertEq(rangeList('a', 'd'), 'a' :: 'b' :: 'c')

assertEq(rangeListReverse(1, 4), 3 :: 2 :: 1)
assertEq(rangeListReverse('a', 'd'), 'c' :: 'b' :: 'a')

assertEq(gridList(2, 2), Tuple(0, 0) :: Tuple(1, 0) ::
                         Tuple(0, 1) :: Tuple(1, 1))

assertEq(gridList(3, 3), Tuple(0, 0) :: Tuple(1, 0) :: Tuple(2, 0) ::
                         Tuple(0, 1) :: Tuple(1, 1) :: Tuple(2, 1) ::
                         Tuple(0, 2) :: Tuple(1, 2) :: Tuple(2, 2))

assertEq(gridList(1, 1), Tuple(0, 0) :: List{Tuple{int, int}}())
assertEq(gridList(0, 0), List{Tuple{int, int}}())

assertEq(gridListReverse(2, 2), Tuple(1, 1) :: Tuple(0, 1) ::
                                Tuple(1, 0) :: Tuple(0, 0))

assertEq(gridListReverse(3, 3), Tuple(2, 2) :: Tuple(1, 2) :: Tuple(0, 2) ::
                                Tuple(2, 1) :: Tuple(1, 1) :: Tuple(0, 1) ::
                                Tuple(2, 0) :: Tuple(1, 0) :: Tuple(0, 0))

assertEq(gridListReverse(1, 1), Tuple(0, 0) :: List{Tuple{int, int}}())
assertEq(gridListReverse(0, 0), List{Tuple{int, int}}())

assertEq((1 :: 2 :: 3 :: 4).filter(lambda (int v) v > 2), 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).filter(lambda (int v) v < 0), List{int}())

assertEq((1 :: 2 :: 3 :: 4 :: 5).filterReverse(lambda (int v) v > 2), 5 :: 4 :: 3)
assertEq((1 :: 2 :: 3 :: 4 :: 5).filterReverse(lambda (int v) v < 0), List{int}())

assertEq(
  l = Option(1) :: Option{int}() :: Option(2) :: Option{int}();
  l.filterNone(), 1 :: 2)

assertEq(
  l = Option(1) :: Option{int}() :: Option(2) :: Option{int}();
  l.filterNoneReverse(), 2 :: 1)

assertEq((1 :: 2 :: 3).map(lambda (int v) v * 2), 2 :: 4 :: 6)
assertEq((1 :: 2 :: 3).map(lambda (int v) v.string()), "1" :: "2" :: "3")

assertEq((1 :: 2 :: 3).mapReverse(lambda (int v) v * 2), 6 :: 4 :: 2)
assertEq((1 :: 2 :: 3).mapReverse(lambda (int v) v.string()), "3" :: "2" :: "1")

assertEq((1 :: 2 :: 3 :: 4).map(lambda (int v) Option(v * 2)), 2 :: 4 :: 6 :: 8)
assertEq((1 :: 2 :: 3 :: 4).map(lambda (int v) Option{int}()), List{int}())
assertEq((1 :: 2 :: 3 :: 4).map(lambda (int v) v > 2 ? Option(v * 2) : None()), 6 :: 8)

assertEq((1 :: 2 :: 3 :: 4).mapReverse(lambda (int v) Option(v * 2)), 8 :: 6 :: 4 :: 2)
assertEq((1 :: 2 :: 3 :: 4).mapReverse(lambda (int v) Option{int}()), List{int}())
assertEq((1 :: 2 :: 3 :: 4).mapReverse(lambda (int v) v > 2 ? Option(v * 2) : None()), 8 :: 6)

assertEq(
  l = 1 :: 2 :: 3;
  l.length(), 3)
assertEq(length(List{int}()), 0)

assertEq(
  l = 1 :: 2 :: 3;
  l.sum(), 6)
assertEq(
  l = 0.1 :: 1.0 :: 1.1;
  l.sum(), 2.2)
assertEq(
  l = "hello" :: " " :: "world";
  l.sum(), "hello world")
assertEq(List{int}().sum(), 0)

assertEq(
  l = 1 :: 2 :: 3;
  l.reverse(), 3 :: 2 :: 1)
assertEq(List{int}().reverse(), List{int}())

assertEq(
  l = 42 :: 1337 :: -42 :: -5;
  l.sort(), -42 :: -5 :: 42 :: 1337)
assertEq(
  l = 42 :: 1337 :: -42 :: -5;
  l.sort(greater{int}), 1337 :: 42 :: -5 :: -42)
assertEq(
  l = 1 :: 1 :: 1;
  l.sort(), 1 :: 1 :: 1)
assertEq(List{int}().sort(), List{int}())
assertEq(
  l = "January" :: "February" :: "March" :: "April" :: "May" :: "June" :: "July" :: "August" :: "September" :: "October" :: "November" :: "December";
  l.sort(), "April" :: "August" :: "December" :: "February" :: "January" :: "July" :: "June" :: "March" :: "May" :: "November" :: "October" :: "September")
assertEq(
  l = "January" :: List{string}();
  l.sort(), "January" :: List{string}())
assertEq(
  l = "January" :: "January";
  l.sort(), "January" :: "January")
assertEq(
  l = "" :: "";
  l.sort(), "" :: "")

assertEq(
  l = 1 :: 2 :: 3;
  l.distinct(), l)
assertEq(
  l = 1 :: 2 :: 2 :: 3;
  l.distinct(), 1 :: 2 :: 3)
assertEq(
  l = 3 :: 1 :: 2 :: 3 :: 2 :: 3 :: 3;
  l.distinct(), 3 :: 1 :: 2)
assertEq(List{int}().distinct(), List{int}())

assertEq(
  l = 1 :: 2 :: 3;
  l.distinctReverse(), 3 :: 2 :: 1)
assertEq(
  l = 1 :: 2 :: 2 :: 3;
  l.distinctReverse(), 3 :: 2 :: 1)
assertEq(
  l = 1 :: 1 :: 2 :: 2 :: 3 :: 3 :: 3;
  l.distinctReverse(), 3 :: 2 :: 1)
assertEq(List{int}().distinctReverse(), List{int}())

assertEq((1 :: 2 :: 3).find(2), 2)
assertEq((1 :: 2 :: 3).find(4), None())

assertEq((1 :: 2 :: 3).first(greater{int}[0]), 1)
assertEq((1 :: 2 :: 3).first(greater{int}[2]), 3)
assertEq(List{int}().first(greater{int}[0]), None())
assertEq((1 :: 2 :: 3).first(greater{int}[4]), None())

assertEq((1 :: 2 :: 3).count(lambda (int v) v > 2), 1)
assertEq((1 :: 2 :: 3).count(lambda (int v) v == 0), 0)
assertEq((1 :: 2 :: 3).count(lambda (int v) v > 0), 3)

assert((1 :: 2 :: 3).any(lambda (int v) v > 2))
assertNot((1 :: 2 :: 3).any(lambda (int v) v < 0))

assertNot((false :: false :: false).any())
assert((true :: false :: true).any())
assert((true :: true :: true).any())
assertNot(List{bool}().any())

assert((1 :: 2 :: 3).all(lambda (int v) v > 0))
assert(  !(1 :: 2 :: 3).all(lambda (int v) v > 1))

assertNot((true :: false :: true).all())
assert((true :: true :: true).all())
assert(List{bool}().all())

assert((1 :: 2 :: 3).none(lambda (int v) v < 0))
assertNot((1 :: 2 :: 3).none(lambda (int v) v > 1))

assert((1 :: 2 :: 3).contains(1))
assert((1 :: 2 :: 3).contains(2))
assert((1 :: 2 :: 3).contains(3))
assertNot((1 :: 2 :: 3).contains(0))
assertNot((1 :: 2 :: 3).contains(4))

assertEq(for(1, 4, lambda (int i) i * i), 1 :: 4 :: 9)

assertEq(for(4, lambda (int i) i * i), 0 :: 1 :: 4 :: 9)

assertEq(
  l1  = "hello" :: "good" :: "world";
  l2  = 42 :: 1337 :: 1 :: 2 :: 3;
  zip(l1, l2, lambda (List{string} result, string s, int i) (s + i.string()) :: result),
  "world1" :: "good1337" :: "hello42")

assertEq(
  l1  = List{string}();
  l2  = List{int}();
  zip(l1, l2, lambda (List{string} result, string s, int i) (s + i.string()) :: result),
  List{string}())

assertEq(
  l =
    ("a1" :: "a2" :: "a3" :: "a4") ::
    ("b1" :: "b2" :: "b3"        ) ::
    ("c1" :: "c2" :: "c3" :: "d4") :: List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()),
  " c1b1a1 c2b2a2 c3b3a3")

assertEq(
  l =
    ("a1" ::  List{string}()) ::
    (         List{string}()) ::
    ("c1" ::  List{string}()) :: List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()),
  "")

assertEq(
  l = List{List{string}}();
  l.zip(lambda (string result, List{string} cur) result + " " + cur.sum()),
  "")

assert(
  l = List{Either{int, string}}();
  r = split(l);
  r.f1.isEmpty() && r.f2.isEmpty())

assertEq(
  eS = (lambda (string s) Either{int, string}(s));
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eS("hello") :: eI(2) :: eS("world") :: eI(3) :: eI(4);
  split(l),
  Tuple(1 :: 2 :: 3 :: 4, "hello" :: "world"))

assertEq(
  eS = (lambda (string s) Either{int, string}(s));
  l = eS("hello") :: eS("good") :: eS("world");
  split(l),
  Tuple(List{int}(), "hello" :: "good" :: "world"))

assertEq(
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eI(2) :: eI(3);
  split(l),
  Tuple(1 :: 2 :: 3, List{string}()))

assert(
  l = List{Either{int, string}}();
  r = splitReverse(l);
  r.f1.isEmpty() && r.f2.isEmpty())

assertEq(
  eS = (lambda (string s) Either{int, string}(s));
  eI = (lambda (int i) Either{int, string}(i));
  l = eI(1) :: eS("hello") :: eI(2) :: eS("world") :: eI(3) :: eI(4);
  splitReverse(l),
  Tuple(4 :: 3 :: 2 :: 1, "world" :: "hello"))

assertEq(0 :: 1 :: 4 :: 9, 0 :: 1 :: 4 :: 9)
assertEq(0 :: 1 :: 4 :: 9, 0 :: 1 :: 4 :: 9)
assertNotEq(0 :: 1 :: 4 :: 9, 0 :: 1 :: 5 :: 9)
assertNotEq(0 :: 1 :: 4 :: 9, 0 :: 1)
assertNotEq(0 :: 1 :: 4 :: 9, List{int}())
assertEq(List{int}(), List{int}())

// -- Impure Tests

assertEq((1 :: 2 :: 3 :: 4).filter(impure lambda (int v) v > 2), 3 :: 4)
assertEq((1 :: 2 :: 3 :: 4).filter(impure lambda (int v) v < 0), List{int}())

assertEq((1 :: 2 :: 3 :: 4 :: 5).filterReverse(impure lambda (int v) v > 2), 5 :: 4 :: 3)
assertEq((1 :: 2 :: 3 :: 4 :: 5).filterReverse(impure lambda (int v) v < 0), List{int}())

assertEq((1 :: 2 :: 3).map(impure lambda (int v) v * 2), 2 :: 4 :: 6)
assertEq((1 :: 2 :: 3).map(impure lambda (int v) v.string()) , "1" :: "2" :: "3")

assertEq((1 :: 2 :: 3).mapReverse(impure lambda (int v) v * 2), 6 :: 4 :: 2)
assertEq((1 :: 2 :: 3).mapReverse(impure lambda (int v) v.string()) , "3" :: "2" :: "1")

assertEq((1 :: 2 :: 3 :: 4).map(impure lambda (int v) Option(v * 2)) , 2 :: 4 :: 6 :: 8)
assertEq((1 :: 2 :: 3 :: 4).map(impure lambda (int v) Option{int}()) , List{int}())
assertEq((1 :: 2 :: 3 :: 4).map(impure lambda (int v) v > 2 ? Option(v * 2) : None()) , 6 :: 8)

assertEq((1 :: 2 :: 3 :: 4).mapReverse(impure lambda (int v) Option(v * 2)), 8 :: 6 :: 4 :: 2)
assertEq((1 :: 2 :: 3 :: 4).mapReverse(impure lambda (int v) Option{int}()), List{int}())
assertEq((1 :: 2 :: 3 :: 4).mapReverse(impure lambda (int v) v > 2 ? Option(v * 2) : None()) , 8 :: 6)

assertEq(for(1, 4, impure lambda (int i) i * i), 1 :: 4 :: 9)

assertEq(for(4, impure lambda (int i) i * i), 0 :: 1 :: 4 :: 9)
