import "list.ns"
import "time.ns"

import "std/prim.ns"

// -- Type infos

enum    PrimType      = Int, Long, Float, Bool, Char, String, SysStream, SysProcess
struct  PrimInfo      = PrimType type

struct  StructField   = string name, TypeInfo value
struct  StructInfo    = List{StructField} fields

struct  UnionInfo

struct  EnumEntry     = string key, int value
struct  EnumInfo      = List{EnumEntry} entries

struct  DelegateInfo
struct  FutureInfo
struct  LazyInfo
struct  StaticIntInfo = int value

union TypeInfo =
  PrimInfo, StructInfo, UnionInfo, EnumInfo, DelegateInfo, FutureInfo, LazyInfo, StaticIntInfo

// -- Conversions

fun string(PrimInfo pi)
  reflectEnumKeyForVal(pi.type) ?? ""

fun string(StructField e)
  e.name + ":" + e.value.string()

fun string(StructInfo s)
  s.fields.string()

fun string(EnumEntry e)
  e.key + ":" + e.value.string()

fun string(EnumInfo e)
  e.entries.string()

fun string(StaticIntInfo si)
  "#" + si.value.string()

fun string(TypeInfo ti)
  if ti as PrimInfo pi        -> pi.string()
  if ti as StructInfo si      -> "Struct:" + si.string()
  if ti is UnionInfo          -> "Union"
  if ti as EnumInfo ei        -> "Enum:" + ei.string()
  if ti is DelegateInfo       -> "Delegate"
  if ti is FutureInfo         -> "Future"
  if ti is LazyInfo           -> "Lazy"
  if ti as StaticIntInfo sii  -> sii.string()

// -- Reflection

fun reflectType{T}(Type{T} t, Meta{#0}  intTypeKind)        PrimInfo(PrimType.Int)
fun reflectType{T}(Type{T} t, Meta{#1}  longTypeKind)       PrimInfo(PrimType.Long)
fun reflectType{T}(Type{T} t, Meta{#2}  floatTypeKind)      PrimInfo(PrimType.Float)
fun reflectType{T}(Type{T} t, Meta{#3}  boolTypeKind)       PrimInfo(PrimType.Bool)
fun reflectType{T}(Type{T} t, Meta{#4}  charTypeKind)       PrimInfo(PrimType.Char)
fun reflectType{T}(Type{T} t, Meta{#5}  stringTypeKind)     PrimInfo(PrimType.String)
fun reflectType{T}(Type{T} t, Meta{#6}  sysStreamTypeKind)  PrimInfo(PrimType.SysStream)
fun reflectType{T}(Type{T} t, Meta{#7}  sysProcessTypeKind) PrimInfo(PrimType.SysProcess)
fun reflectType{T}(Type{T} t, Meta{#8}  structTypeKind)     reflectStruct(t)
fun reflectType{T}(Type{T} t, Meta{#9}  unionTypeKind)      UnionInfo()
fun reflectType{T}(Type{T} t, Meta{#10} enumTypeKind)       reflectEnum(t)
fun reflectType{T}(Type{T} t, Meta{#11} delegateTypeKind)   DelegateInfo()
fun reflectType{T}(Type{T} t, Meta{#12} futureTypeKind)     FutureInfo()
fun reflectType{T}(Type{T} t, Meta{#13} lazyTypeKind)       LazyInfo()
fun reflectType{T}(Type{T} t, Meta{#14} staticIntTypeKind)  StaticIntInfo(int(Meta{T}()))

fun reflectType{T}(Type{T} t) -> TypeInfo
  reflectType(t, Meta{reflect_type_kind{T}}())

// ---- Struct

fun reflectStructFields{Struct}(Type{Struct} t, Meta{#-1} idx, List{StructField} entries)
  entries

fun reflectStructFields{Struct, Int}(Type{Struct} t, Meta{Int} idx, List{StructField} entries)
  reflectStructFields(t, --idx,
    StructField(
      reflectStructFieldName(t, idx),
      reflectType(reflectStructFieldType(t, idx))) :: entries)

fun reflectStruct{Struct}(Type{Struct} t) -> StructInfo
  StructInfo(reflectStructFields(t, --reflectStructFieldCount(t), List{StructField}()))

// ---- Enum

fun reflectEnumEntries{Enum}(Type{Enum} t, Meta{#-1} idx, List{EnumEntry} entries)
  entries

fun reflectEnumEntries{Enum, Int}(Type{Enum} t, Meta{Int} idx, List{EnumEntry} entries)
  reflectEnumEntries(t, --idx, EnumEntry(reflectEnumKey(t, idx), reflectEnumVal(t, idx)) :: entries)

fun reflectEnum{Enum}(Type{Enum} t) -> EnumInfo
  EnumInfo(reflectEnumEntries(t, --reflectEnumCount(t), List{EnumEntry}()))

// -- Struct Utilities

// ---- Lookup struct field count

fun reflectStructFieldCount{Struct}(Type{Struct} t)
  Meta{reflect_struct_field_count{Struct}}()

// ---- Lookup struct field name from index

fun reflectStructFieldName{Struct, Idx}(Type{Struct} t, Meta{Idx} idx) -> string
  intrinsic{reflect_struct_field_name}{Struct, Idx}()

// ---- Lookup struct field type from index

fun reflectStructFieldType{Struct, Idx}(Type{Struct} t, Meta{Idx} idx)
  Type{reflect_struct_field_type{Struct, Idx}}()

// -- Enum Utilities

// ---- Lookup key for value

fun reflectEnumKeyForVal{Enum}(Type{Enum} t, int val, Meta{#-1} idx) -> Option{string}
  None()

fun reflectEnumKeyForVal{Enum, Idx}(Type{Enum} t, int val, Meta{Idx} idx) -> Option{string}
  reflectEnumVal(t, idx) == val
    ? reflectEnumKey(t, idx)
    : reflectEnumKeyForVal(t, val, --idx)

fun reflectEnumKeyForVal{Enum}(Type{Enum} t, int val) -> Option{string}
  reflectEnumKeyForVal(t, val, --reflectEnumCount(t))

fun reflectEnumKeyForVal{Enum}(Enum val) -> Option{string}
  reflectEnumKeyForVal(Type{Enum}(), val)

// ---- Lookup value for key

fun reflectEnumValForKey{Enum}(Type{Enum} t, string key, StrComp comp, Meta{#-1} idx) -> Option{int}
  None()

fun reflectEnumValForKey{Enum, Idx}(Type{Enum} t, string key, StrComp comp, Meta{Idx} idx)  -> Option{int}
  equals(reflectEnumKey(t, idx), key, comp)
    ? reflectEnumVal(t, idx)
    : reflectEnumValForKey(t, key, comp, --idx)

fun reflectEnumValForKey{Enum}(Type{Enum} t, string key, StrComp comp = StrComp.Ordinal) -> Option{int}
  reflectEnumValForKey(t, key, comp, --reflectEnumCount(t))

// ---- Lookup number of enum entries

fun reflectEnumCount{Enum}(Type{Enum} t)
  Meta{reflect_enum_count{Enum}}()

// ---- Lookup enum key from index

fun reflectEnumKey{Enum, Idx}(Type{Enum} t, Meta{Idx} idx) -> string
  intrinsic{reflect_enum_key}{Enum, Idx}()

// ---- Lookup enum value from index

fun reflectEnumVal{Enum, Idx}(Type{Enum} t, Meta{Idx} idx) -> int
  intrinsic{reflect_enum_value}{Enum, Idx}()

// -- Tests

assertEq(reflectType(Type{int}()),          PrimInfo(PrimType.Int))
assertEq(reflectType(Type{long}()),         PrimInfo(PrimType.Long))
assertEq(reflectType(Type{float}()),        PrimInfo(PrimType.Float))
assertEq(reflectType(Type{bool}()),         PrimInfo(PrimType.Bool))
assertEq(reflectType(Type{char}()),         PrimInfo(PrimType.Char))
assertEq(reflectType(Type{string}()),       PrimInfo(PrimType.String))
assertEq(reflectType(Type{sys_stream}()),   PrimInfo(PrimType.SysStream))
assertEq(reflectType(Type{sys_process}()),  PrimInfo(PrimType.SysProcess))

assertEq(reflectType(Type{Date}()), StructInfo(
  StructField("year",   PrimInfo(PrimType.Int))     ::
  StructField("month",  reflectEnum(Type{Month}())) ::
  StructField("day",    PrimInfo(PrimType.Int))
))

assertIs(reflectType(Type{TypeInfo}()), Type{UnionInfo}())

assertEq(reflectType(Type{Month}()), EnumInfo(
  EnumEntry("January",    1)   ::
  EnumEntry("February",   2)   ::
  EnumEntry("March",      3)   ::
  EnumEntry("April",      4)   ::
  EnumEntry("May",        5)   ::
  EnumEntry("June",       6)   ::
  EnumEntry("July",       7)   ::
  EnumEntry("August",     8)   ::
  EnumEntry("September",  9)   ::
  EnumEntry("October",    10)  ::
  EnumEntry("November",   11)  ::
  EnumEntry("December",   12)
))

assertIs(reflectType(Type{function{int}}()),  Type{DelegateInfo}())
assertIs(reflectType(Type{action{int}}()),    Type{DelegateInfo}())
assertIs(reflectType(Type{future{int}}()),    Type{FutureInfo}())
assertIs(reflectType(Type{lazy{int}}()),      Type{LazyInfo}())
assertEq(reflectType(Type{#42}()),            StaticIntInfo(42))

// -- Struct utility tests

assertEq(reflectStructFieldCount(Type{Date}()), Meta{#3}())
assertEq(reflectStructFieldCount(Type{DateTime}()), Meta{#1}())
assertEq(reflectStructFieldCount(Type{None}()), Meta{#0}())

assertEq(reflectStructFieldName(Type{Date}(), Meta{#0}()), "year")
assertEq(reflectStructFieldName(Type{Date}(), Meta{#1}()), "month")
assertEq(reflectStructFieldName(Type{Date}(), Meta{#2}()), "day")

assertEq(reflectStructFieldType(Type{Date}(), Meta{#0}()), Type{int}())
assertEq(reflectStructFieldType(Type{Date}(), Meta{#1}()), Type{Month}())
assertEq(reflectStructFieldType(Type{EnumInfo}(), Meta{#0}()), Type{List{EnumEntry}}())

// -- Enum utility tests

assertEq(reflectEnumCount(Type{Month}()), Meta{#12}())

assertEq(reflectEnumKey(Type{Month}(), Meta{#0}()), "January")
assertEq(reflectEnumKey(Type{Month}(), Meta{#11}()), "December")

assertEq(reflectEnumVal(Type{Month}(), Meta{#0}()), 1)
assertEq(reflectEnumVal(Type{Month}(), Meta{#11}()), 12)

assertEq(reflectEnumKeyForVal(Type{Month}(), 3), "March")
assertEq(reflectEnumKeyForVal(Type{Month}(), 12), "December")
assertEq(reflectEnumKeyForVal(Type{Month}(), 0), None())
assertEq(reflectEnumKeyForVal(Type{Month}(), 13), None())

assertEq(reflectEnumValForKey(Type{Month}(), "April"), 4)
assertEq(reflectEnumValForKey(Type{Month}(), "aPrIl", StrComp.OrdinalIgnoreCase), 4)
assertEq(reflectEnumValForKey(Type{Month}(), "Hello"), None())
