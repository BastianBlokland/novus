import "future.ns"
import "list.ns"

import "std/diag.ns"
import "std/prim.ns"

// -- Functions

fun waitAll{T}(List{future{T}} l) -> List{T}
  l.foldRight(lambda (List{T} result, future{T} f) -> List{T}
    f.get() :: result)

fun waitAllReverse{T}(List{future{T}} l) -> List{T}
  l.fold(lambda (List{T} result, future{T} f) -> List{T}
    f.get() :: result)

fun parallelMap{T, TResult}(List{T} l, function{T, TResult} func) -> List{TResult}
  l.fold(lambda (List{future{TResult}} result, T val) -> List{future{TResult}}
    fork func(val) :: result).waitAllReverse()

fun parallelFor{T, TResult}(T to, function{T, TResult} func) -> List{TResult}
  rangeList(T(), to).parallelMap(func)

fun parallelFor{T, TResult}(T from, T to, function{T, TResult} func) -> List{TResult}
  rangeList(from, to).parallelMap(func)

// -- Actions

act parallelMap{T, TResult}(List{T} l, action{T, TResult} a) -> List{TResult}
  l.fold(impure lambda (List{future{TResult}} result, T val) -> List{future{TResult}}
    fork a(val) :: result).waitAllReverse()

act parallelFor{T, TResult}(T to, action{T, TResult} a) -> List{TResult}
  rangeList(T(), to).parallelMap(a)

act parallelFor{T, TResult}(T from, T to, action{T, TResult} a) -> List{TResult}
  rangeList(from, to).parallelMap(a)

// -- Tests

assertEq((1 :: 2 :: 3).parallelMap(lambda (int i) i * i), 1 :: 4 :: 9)

assertEq(parallelFor(1, 5, lambda (int i) i * i), 1 :: 4 :: 9 :: 16)

assertEq(parallelFor(5, lambda (int i) i * i), 0 :: 1 :: 4 :: 9 :: 16)

assertEq(
  op = (lambda (int i) i + i);
  parallelFor(2000, op), rangeListReverse(0, 2000).mapReverse(op))

// -- Impure tests

assertEq((1 :: 2 :: 3).parallelMap(impure lambda (int i) i * i), 1 :: 4 :: 9)

assertEq(parallelFor(1, 5, impure lambda (int i) i * i), 1 :: 4 :: 9 :: 16)

assertEq(parallelFor(5, impure lambda (int i) i * i), 0 :: 1 :: 4 :: 9 :: 16)

assertEq(
  op = (impure lambda (int i) i + i);
  parallelFor(2000, op), rangeListReverse(0, 2000).mapReverse(op))
