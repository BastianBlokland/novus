import "reflect.ns"

import "std/diag.ns"
import "std/format.ns"
import "std/prim.ns"

// Gregorian calendar assumed with no leap seconds.

// -- DateTime
// Represents a absolute moment in time.

struct DateTime =
  long      microSinceEpoch,
  Timezone  zone

fun -(DateTime dt1, DateTime dt2) microseconds(dt1.microSinceEpoch - dt2.microSinceEpoch)
fun <(DateTime dt1, DateTime dt2) dt1.microSinceEpoch < dt2.microSinceEpoch
fun >(DateTime dt1, DateTime dt2) dt1.microSinceEpoch > dt2.microSinceEpoch
fun +(DateTime dt, Duration d)    DateTime(dt.microSinceEpoch + d.microseconds(), dt.zone)
fun -(DateTime dt, Duration d)    DateTime(dt.microSinceEpoch - d.microseconds(), dt.zone)

fun ==(DateTime dt1, DateTime dt2)
  dt1.microSinceEpoch == dt2.microSinceEpoch

// Jan 1 1970 (Unix time)
fun timeEpoch() DateTime(0L, timezoneUTC())

// Construct a DateTime from a Gregorian calendar date.
fun DateTime(int year, Month month, int day)
  DateTime(Date(year, month, day))

// Construct a DateTime from a Gregorian calendar date.
fun DateTime(int year, int month, int day)
  DateTime(Date(year, month, day))

// Construct a DateTime from a Gregorian calendar date.
// Implementation based on: http://howardhinnant.github.io/date_algorithms.html#days_from_civil
fun DateTime(Date d)
  year            = d.month <= 2 ? --d.year : d.year;
  era             = (year >= 0 ? year : year - 399) / 400;
  yearOfEra       = year - era * 400;
  dayOfYear       = (153 * (d.month + (d.month > 2 ? -3 : 9)) + 2) / 5 + --d.day;
  dayOfEra        = yearOfEra * 365 + yearOfEra / 4 - yearOfEra / 100 + dayOfYear;
  daysSinceEpoch  = era * 146_097 + dayOfEra - 719_468;
  DateTime(daysSinceEpoch * day().microseconds(), timezoneUTC())

fun string(DateTime dt)
  dateTimeISO8601Writer().run(dt)

fun daysSinceEpoch(DateTime dt)
  int(dt.microSinceEpoch / day().microseconds())

// -- Date
// Represents a date in the Gregorian calendar.

struct Date =
  int year,
  Month month,
  int day

fun <(Date d1, Date d2)
  d1.year < d2.year ||
  (d1.year == d2.year && d1.month < d2.month) ||
  (d1.year == d2.year && d1.month == d2.month && d1.day < d2.day)

fun >(Date d1, Date d2)
  d1.year > d2.year ||
  (d1.year == d2.year && d1.month > d2.month) ||
  (d1.year == d2.year && d1.month == d2.month && d1.day > d2.day)

fun Date(int year, int month, int day)
  Date(year, Month(month), day)

// Construct a Gregorian calendar date from given DateTime.
// Implementation based on: http://howardhinnant.github.io/date_algorithms.html#civil_from_days
fun Date(DateTime dt)
  z          = dt.daysSinceEpoch() + 719_468;
  era        = (z >= 0 ? z : z - 146_096) / 146_097;
  dayOfEra   = z - era * 146_097;
  yearOfEra  = (dayOfEra - dayOfEra / 1_460 + dayOfEra / 36_524 - dayOfEra / 146_096) / 365;
  year       = yearOfEra + era * 400;
  dayOfYear  = dayOfEra - (365 * yearOfEra + yearOfEra / 4 - yearOfEra / 100);
  mp         = (5 * dayOfYear + 2) / 153;
  day        = dayOfYear - (153 * mp + 2) / 5 + 1;
  month      = Month(mp + (mp < 10 ? 3 : -9));
  Date(month <= 2 ? ++year : year, month, day)

fun string(Date date)
  dateISO8601Writer().run(date)

// -- Month
// Represents a single month in the Gregorian calendar.

enum Month =
  January : 1,
  February,
  March,
  April,
  May,
  June,
  July,
  August,
  September,
  October,
  November,
  December

fun noinline string(Month m, bool short = false)
  (reflectEnumKeyForVal(m) ?? "")[0, short ? 3 : 99]

// -- Weekday
// Represents a single day of the week.

enum WeekDay =
  Monday : 0,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
  Sunday

fun WeekDay(Date e)
  WeekDay(DateTime(e))

fun WeekDay(DateTime dt)
  WeekDay((dt.daysSinceEpoch() + WeekDay.Thursday) % 7)

fun noinline string(WeekDay d, bool short = false)
  (reflectEnumKeyForVal(d) ?? "")[0, short ? 3 : 99]

// -- Timezone
// Offset from UTC in minutes.

struct Timezone = Duration offset

fun string(Timezone t)
  timezoneISO8601Writer().run(t)

fun Duration(Timezone t)
  t.offset

fun timezoneUTC() Timezone(Duration(0))

fun isUTC(Timezone t) t.offset == Duration(0)

// -- Duration
// Represents elapsed time, can be negative.

struct Duration = long ns

fun Duration() Duration(0)

fun -(Duration d)  Duration(-d.ns)
fun -(Duration d1, Duration d2)   Duration(d1.ns - d2.ns)
fun +(Duration d1, Duration d2)   Duration(d1.ns + d2.ns)
fun *(Duration d, long l)         Duration(d.ns * l)
fun /(Duration d1, Duration d2)   d1.ns / d2.ns
fun /(Duration d1, long l)        Duration(d1.ns / l)
fun %(Duration d1, Duration d2)   Duration(d1.ns % d2.ns)
fun <(Duration d1, Duration d2)   d1.ns < d2.ns
fun <=(Duration d1, Duration d2)  d1.ns <= d2.ns
fun >(Duration d1, Duration d2)   d1.ns > d2.ns
fun >=(Duration d1, Duration d2)  d1.ns >= d2.ns

fun minDuration() Duration(0x8000_0000_0000_0000L)
fun maxDuration() Duration(0x7FFF_FFFF_FFFF_FFFFL)

// Convert to an absolute duration.
fun absDuration(Duration d)
  if d.ns > 0L          -> d
  if d == minDuration() -> maxDuration()
  else                  -> Duration(-d.ns)

// Conversion to float (seconds with fractions).
fun float(Duration d)
  secs = d / second();
  frac = float(d.ns - seconds(secs).ns) / float(second().ns);
  float(secs) + frac

fun min(Duration a, Duration b)
  Duration(a.ns < b.ns ? a.ns : b.ns)

fun max(Duration a, Duration b)
  Duration(a.ns > b.ns ? a.ns : b.ns)

fun nanosecond()  Duration(1L)
fun microsecond() nanosecond()  * 1_000L
fun millisecond() microsecond() * 1_000L
fun second()      millisecond() * 1_000L
fun minute()      second()      * 60L
fun hour()        minute()      * 60L
fun day()         hour()        * 24L
fun week()        day()         * 7L

fun nanoseconds(long count)   nanosecond()  * count
fun microseconds(long count)  microsecond() * count
fun milliseconds(long count)  millisecond() * count
fun seconds(long count)       second()      * count
fun minutes(long count)       minute()      * count
fun hours(long count)         hour()        * count
fun days(long count)          day()         * count
fun weeks(long count)         week()        * count

fun nanoseconds(Duration d)   d.ns
fun microseconds(Duration d)  d.ns / microsecond().ns
fun milliseconds(Duration d)  d.ns / millisecond().ns
fun seconds(Duration d)       d.ns / second().ns
fun minutes(Duration d)       d.ns / minute().ns
fun hours(Duration d)         d.ns / hour().ns
fun days(Duration d)          d.ns / day().ns
fun weeks(Duration d)         d.ns / week().ns

// Create a human readable representation.
fun noinline string(Duration d)
  if d.ns < 0L  -> "-" + absDuration(d).string()
  else          ->
    if d < microsecond()  ->  d.nanoseconds().string()    + "ns"
    if d < millisecond()  ->  d.microseconds().string()   + "µs"
    if d < second()       ->  d.milliseconds().string()   + "ms"
    if d < minute()       ->  d.seconds().string()        + "s"
    if d < hour()         ->  d.minutes().string()        + "m" +
                              (d.seconds() % 60).string() + "s"
    if d < day()          ->  d.hours().string()          + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"
    if d < week()         ->  d.days().string()           + "d" +
                              (d.hours() % 24).string()   + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"
    else                  ->  d.weeks().string()          + "w" +
                              (d.days() % 7).string()     + "d" +
                              (d.hours() % 24).string()   + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"

// -- Timestamp
// Difference between DateTime is that Timestamp is more precise (nanoseconds) and does not
// represent an absolute time so it can only be used to measure things.

struct Timestamp = long ns

fun -(Timestamp t1, Timestamp t2)   nanoseconds(t1.ns - t2.ns)
fun <(Timestamp t1, Timestamp t2)   t1.ns < t2.ns
fun <=(Timestamp t1, Timestamp t2)  t1.ns <= t2.ns
fun >(Timestamp t1, Timestamp t2)   t1.ns > t2.ns
fun >=(Timestamp t1, Timestamp t2)  t1.ns >= t2.ns

// -- Conversion

fun string(Timestamp t) t.ns.string()

// -- Parsers

// Time in unix seconds from epoch
// Example format: 1605977674
fun timeUnixParser() -> Parser{DateTime}
  txtPosLongParser().map(lambda (long l) timeEpoch() + seconds(l)) ! Error("Invalid unix timestamp")

// Duration
// Example format: 10ms
fun durationParser() -> Parser{Duration}
  sc = StrComp.IgnoreCase;
  (txtPosLongParser() & whitespaceParser() >>
    (
      matchParser("ns", sc) >> retParser(nanosecond())   |
      matchParser("us", sc) >> retParser(microsecond())  |
      matchParser("µs", sc) >> retParser(microsecond())  |
      matchParser("ms", sc) >> retParser(millisecond())  |
      matchParser("s", sc)  >> retParser(second())       |
      matchParser("m", sc)  >> retParser(minute())       |
      matchParser("h", sc)  >> retParser(hour())         |
      matchParser("d", sc)  >> retParser(day())          |
      matchParser("w", sc)  >> retParser(week())
      !! Error("Expected a time scalar (ns, us, ms, s, m, h, d, w)")
    )
  ).map(lambda (Tuple{long, Duration} t) t.f2 * t.f1)

// -- Writers

// Time in unix seconds from epoch
// Example format: 1605977674
fun timeUnixWriter() -> Writer{DateTime}
  txtLongWriter().map(lambda (DateTime dt)(dt - timeEpoch()).seconds())

// Example output: 'Sunday'
// Example short output: 'Sun'
fun weekDayWriter(bool short = false) -> Writer{WeekDay}
  Writer(lambda (WriterState s, WeekDay wd)
    s.write(wd.string(short)))

// Example output: 'January'
// Example short output: 'Jan'
fun monthWriter(bool short = false) -> Writer{Month}
  Writer(lambda (WriterState s, Month m)
    s.write(m.string(short)))

// Date in iso-8601 format (https://en.wikipedia.org/wiki/ISO_8601).
// Example output: 1920-03-19.
fun dateISO8601Writer() -> Writer{Date}
  (
    txtIntWriter(4) & litWriter('-') & txtIntWriter(2) & litWriter('-') & txtIntWriter(2)
  ).map(lambda (Date d) Tuple(d.year, int(d.month), d.day))

// Timezone in iso-8601 format (https://en.wikipedia.org/wiki/ISO_8601).
// Example output: +02:00.
fun timezoneISO8601Writer() -> Writer{Timezone}
  offsetWriter = charWriter() & txtLongWriter(2) & litWriter(':') & txtLongWriter(2);
  Writer(lambda (WriterState s, Timezone t)
    t.isUTC()
      ? s.write("Z")
      : offsetWriter(s, Tuple(
          t.offset < Duration(0) ? '-' : '+',
          absDuration(t.offset).hours(),
          absDuration(t.offset).minutes() % 60))
  )

// Local date and time in iso-8601 format (https://en.wikipedia.org/wiki/ISO_8601).
// Example output: 1920-03-19T07:11:23+02:00.
fun dateTimeISO8601Writer() -> Writer{DateTime}
  (
    dateISO8601Writer() & litWriter('T') &
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & timezoneISO8601Writer()
  ).map(lambda (DateTime dt)
    localTime = dt + Duration(dt.zone);
    sinceEpoch = absDuration(localTime - timeEpoch());
    Tuple(
      Date(localTime),
      sinceEpoch.hours()    % 24,
      sinceEpoch.minutes()  % 60,
      sinceEpoch.seconds()  % 60,
      dt.zone))

// Date in RFC1123 format (used in the http standard).
// Example output: 'Sun, 24 May 2020'
fun dateRFC1123Writer() -> Writer{Date}
  (
    weekDayWriter(true) & litWriter(", ") &
    txtIntWriter()      & litWriter(' ')  &
    monthWriter(true)   & litWriter(' ')  &
    txtIntWriter()
  ).map(lambda (Date d) Tuple(WeekDay(d), d.day, d.month, d.year))

// Time in RFC1123 format (used in the http standard).
// NOTE: Always in UTC.
// Example output: '15:08:51 GMT'
fun timeRFC1123Writer() -> Writer{DateTime}
  (
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & litWriter(" GMT")
  ).map(lambda (DateTime dt)
    sinceEpoch = absDuration(dt - timeEpoch());
    Tuple(sinceEpoch.hours() % 24, sinceEpoch.minutes() % 60, sinceEpoch.seconds() % 60))

// Date + time in RFC1123 format (used in the http standard).
// NOTE: Always in UTC.
// Example output: 'Sun, 24 May 2020 15:08:51 GMT'
fun dateTimeRFC1123Writer() -> Writer{DateTime}
  (
    dateRFC1123Writer() & litWriter(' ') & timeRFC1123Writer()
  ).map(lambda (DateTime dt) Tuple(Date(dt), dt))

// Timezone in pretty format.
// Example output: +02:00.
fun timezonePrettyWriter() -> Writer{Timezone}
  (
    charWriter() & txtLongWriter(2) & litWriter(':') & txtLongWriter(2)
  ).map(lambda (Timezone t) Tuple(
      t.offset < Duration(0) ? '-' : '+',
      absDuration(t.offset).hours(),
      absDuration(t.offset).minutes() % 60))

// Date in pretty format.
// Example output: 'Friday 24 March 2021'
fun datePrettyWriter() -> Writer{Date}
  (
    weekDayWriter() & litWriter(' ') &
    txtIntWriter()  & litWriter(' ')  &
    monthWriter()   & litWriter(' ')  &
    txtIntWriter()
  ).map(lambda (Date d) Tuple(WeekDay(d), d.day, d.month, d.year))

// Local date and time in pretty format.
// Example output: 'Friday 24 March 2021 09:41:38 +02:00'.
fun dateTimePrettyWriter(bool includeMillies = false) -> Writer{DateTime}
  (
    datePrettyWriter()  & litWriter(' ') &
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & litWriter(':') &
    txtLongWriter(2)    & ?(litWriter(':') & txtLongWriter(3)) &
    litWriter(' ')      & timezonePrettyWriter()
  ).map(lambda (DateTime dt)
    localTime = dt + Duration(dt.zone);
    sinceEpoch = absDuration(localTime - timeEpoch());
    Tuple(
      Date(localTime),
      sinceEpoch.hours()    % 24,
      sinceEpoch.minutes()  % 60,
      sinceEpoch.seconds()  % 60,
      includeMillies ? Option{long}(sinceEpoch.milliseconds() % 1000) : None(),
      dt.zone))

// -- Actions

// Get a DateTime from the current system clock.
act timeNow() DateTime(intrinsic{clock_microsinceepoch}(), timezone())

// Convert a DateTime to be based on the local timezone.
act timeToLocal(DateTime dt) DateTime(dt.microSinceEpoch, timezone())

// Get the local timezone offset.
act timezone() Timezone(minutes(intrinsic{clock_timezoneoffset}()))

// Get a timestamp based on the process steady clock, guaranteed to go forward
// (even if system clock changes) and is more precise then 'timeNow()'.
act timestamp() Timestamp(intrinsic{clock_nanosteady}())

// -- Tests

assertEq(Date(1970, Month.January, 1), Date(timeEpoch()))
assertEq(Date(1992, Month.June, 9).string(), "1992-06-09")
assertEq(timeEpoch().string(), "1970-01-01T00:00:00Z")

assertEq(DateTime(2020, Month.January, 1) + days(31), DateTime(2020, Month.February, 1))
assertEq(DateTime(2020, Month.February, 1) + days(29), DateTime(2020, Month.March, 1))
assertEq(DateTime(2020, Month.March, 1) + days(31), DateTime(2020, Month.April, 1))
assertEq(DateTime(2020, Month.April, 1) + days(30), DateTime(2020, Month.May, 1))
assertEq(DateTime(2021, Month.January, 1) - DateTime(2020, Month.January, 1), days(366))
assertEq(DateTime(2022, Month.January, 1) - DateTime(2021, Month.January, 1), days(365))

assertLe(Date(2020, 2, 1), Date(2020, 2, 2))
assertGtr(Date(2020, 2, 2), Date(2020, 2, 1))
assertGtr(Date(2020, 2, 1), Date(2020, 1, 2))
assertGtr(Date(2020, 1, 1), Date(2019, 2, 2))

assertEq(WeekDay(timeEpoch()), WeekDay.Thursday)
assertEq(WeekDay(timeEpoch() + day()), WeekDay.Friday)
assertEq(WeekDay(timeEpoch() + days(2)), WeekDay.Saturday)
assertEq(WeekDay(timeEpoch() + days(3)), WeekDay.Sunday)
assertEq(WeekDay(timeEpoch() + days(4)), WeekDay.Monday)
assertEq(WeekDay(timeEpoch() + days(5)), WeekDay.Tuesday)
assertEq(WeekDay(timeEpoch() + days(6)), WeekDay.Wednesday)
assertEq(WeekDay(timeEpoch() + days(7)), WeekDay.Thursday)

assertEq(nanosecond().nanoseconds(), 1)
assertEq(microsecond().microseconds(), 1)
assertEq(millisecond().milliseconds(), 1)
assertEq(second().seconds(), 1)
assertEq(minute().minutes(), 1)
assertEq(hour().hours(), 1)
assertEq(day().days(), 1)
assertEq(week().weeks(), 1)

assertEq(microsecond().nanoseconds(), 1_000L)
assertEq(millisecond().nanoseconds(), 1_000_000L)
assertEq(second().nanoseconds(), 1_000_000_000L)
assertEq(minute().nanoseconds(), 60_000_000_000L)
assertEq(hour().nanoseconds(), 3_600_000_000_000L)
assertEq(day().nanoseconds(), 86_400_000_000_000L)
assertEq(week().nanoseconds(), 604_800_000_000_000L)

assertEq(nanoseconds(42).string(), "42ns")
assertEq(microseconds(42).string(), "42µs")
assertEq(milliseconds(42).string(), "42ms")
assertEq(seconds(42).string(), "42s")
assertEq(minutes(42).string(), "42m0s")
assertEq(hours(4).string(), "4h0m0s")
assertEq(days(4).string(), "4d0h0m0s")
assertEq(weeks(4).string(), "4w0d0h0m0s")
assertEq((weeks(5) + days(4) + hours(3) + minutes(2) + seconds(1)).string(), "5w4d3h2m1s")

assertEq(nanoseconds(-42).string(), "-42ns")
assertEq(microseconds(-42).string(), "-42µs")
assertEq(milliseconds(-42).string(), "-42ms")
assertEq(seconds(-42).string(), "-42s")
assertEq(minutes(-42).string(), "-42m0s")
assertEq(hours(-4).string(), "-4h0m0s")
assertEq(days(-4).string(), "-4d0h0m0s")
assertEq(weeks(-4).string(), "-4w0d0h0m0s")
assertEq((weeks(-5) + days(-4) + hours(-3) + minutes(-2) + seconds(-1)).string(), "-5w4d3h2m1s")

assertEq(absDuration(weeks(-42)), weeks(42))
assertEq(absDuration(minDuration()), maxDuration())

assertEq(min(seconds(2), minutes(3)), seconds(2))
assertEq(max(seconds(2), minutes(3)), minutes(3))

assertGtr(timeNow(), timeEpoch())
assertLeOrEq(timestamp(), timestamp())

assertApprox(float(seconds(42) + milliseconds(500)), 42.5)
assertApprox(float(seconds(1337) + millisecond()), 1337.001)

// -- Parser tests

assertIs(timeUnixParser()(""), Type{ParseFailure}())
assertEq(timeUnixParser()("1606579701"), DateTime(2020, Month.November, 28) + hours(16) + minutes(8) + seconds(21))

assertEq(durationParser()("42ns"), nanoseconds(42))
assertEq(durationParser()("42us"), microseconds(42))
assertEq(durationParser()("42ms"), milliseconds(42))
assertEq(durationParser()("42s"), seconds(42))
assertEq(durationParser()("42m"), minutes(42))
assertEq(durationParser()("42h"), hours(42))
assertEq(durationParser()("42d"), days(42))
assertEq(durationParser()("42w"), weeks(42))

assertEq(durationParser()("42 ns"), nanoseconds(42))
assertEq(durationParser()("42   Ns"), nanoseconds(42))
assertEq(durationParser()("42\tNS"), nanoseconds(42))

// -- Writer tests

assertEq(
  timeUnixWriter()(DateTime(2020, Month.November, 28) + hours(16) + minutes(8) + seconds(21)),
  "1606579701")

assertEq(dateISO8601Writer()(Date(2020, Month.March, 25)), "2020-03-25")

assertEq(timezoneISO8601Writer()(timezoneUTC()), "Z")
assertEq(timezoneISO8601Writer()(Timezone(hours(0))), "Z")

assertEq(timezoneISO8601Writer()(Timezone(hours(2))), "+02:00")
assertEq(timezoneISO8601Writer()(Timezone(hours(2) + minutes(30))), "+02:30")
assertEq(timezoneISO8601Writer()(Timezone(hours(10))), "+10:00")
assertEq(timezoneISO8601Writer()(Timezone(-hours(2))), "-02:00")
assertEq(timezoneISO8601Writer()(Timezone(-hours(10))), "-10:00")
assertEq(timezoneISO8601Writer()(Timezone(-hours(2) - minutes(30))), "-02:30")

assertEq(dateTimeISO8601Writer()(timeEpoch()), "1970-01-01T00:00:00Z")
assertEq(dateTimeISO8601Writer()(timeEpoch() + hours(13)), "1970-01-01T13:00:00Z")
assertEq(dateTimeISO8601Writer()(timeEpoch() + hours(13) + seconds(42)), "1970-01-01T13:00:42Z")

assertEq(dateTimeRFC1123Writer()(timeEpoch() + hours(13) + seconds(42)), "Thu, 1 Jan 1970 13:00:42 GMT")

assertEq(dateTimePrettyWriter()(timeEpoch() + hours(13) + seconds(42)), "Thursday 1 January 1970 13:00:42 +00:00")
assertEq(dateTimePrettyWriter()(DateTime(0, Timezone(hour())) + hours(13) + seconds(42)), "Thursday 1 January 1970 14:00:42 +01:00")
assertEq(dateTimePrettyWriter()(DateTime(0, Timezone(-hour())) + hours(13) + seconds(42)), "Thursday 1 January 1970 12:00:42 -01:00")
