import "std/assert.ns"
import "std/either.ns"
import "std/error.ns"
import "std/list.ns"
import "std/option.ns"
import "std/parser.ns"
import "std/prim.ns"
import "std/text.ns"

// -- Types

struct EnvOpt = string id, List{string} args

// -- Conversions

fun string(EnvOpt eo)
  if eo.args.isEmpty()  -> eo.id
  else                  -> eo.id + eo.args.string()

// -- Functions

fun noinline findEnvOpt(List{string} args, string name) -> Option{EnvOpt}
  shortOpt  = name.length() == 1;
  longOpt   = name.length() > 1;
  if args.front() as string s ->
    if shortOpt && s.isShortOpt() && s.contains(name) -> EnvOpt(name, args.pop().takeNonOpts())
    if longOpt && s == "--" + name                    -> EnvOpt(name, args.pop().takeNonOpts())
    else                                              -> findEnvOpt(args.pop(), name)
  else -> None()

fun isShortOpt(string s)
  s[0] == '-' && s[1] != '-'

fun isLongOpt(string s)
  s[0] == '-' && s[1] == '-'

fun takeNonOpts(List{string} l) -> List{string}
  l.take(lambda (string str) str[0] != '-' || str[1].isDigit())

fun noinline findEnvOpt{T}(List{string} args, string n, Parser{T} p) -> Either{T, Error}
  if findEnvOpt(args, n) as EnvOpt o  ->
    if o.args.front() as string str   -> p(str) ?? Error("Failed to parse argument")
    else                              -> Error("Option '" + n + "' has no arguments")
  else                                -> Error("Option '" + n + "' not found")

// -- Actions

act hasEnvOpt(string name)
  findEnvOpt(getEnvArgs(), name) is EnvOpt

act getEnvOpt{T}(string name, Parser{T} p)
  findEnvOpt(getEnvArgs(), name, p)

act getEnvOpt(string name)
  findEnvOpt(getEnvArgs(), name)

act getEnvVar(string name) -> Option{string}
  raw = intrinsic{env_variable}(name);
  raw.isEmpty() ? None() : raw

act getEnvArgs() -> List{string}
  invoke(
    impure lambda (int idx, List{string} result)
      if idx < 0  -> result
      else        -> self(--idx, intrinsic{env_argument}(idx) :: result)
    , --intrinsic{env_argument_count}(), List{string}())

// -- Tests

assertIs(findEnvOpt("-f" :: List{string}(), "f"), Type{EnvOpt}())
assertIs(findEnvOpt("-d" :: List{string}(), "f"), Type{None}())
assertIs(findEnvOpt("-df" :: List{string}(), "d"), Type{EnvOpt}())
assertIs(findEnvOpt("-df" :: List{string}(), "f"), Type{EnvOpt}())
assertIs(findEnvOpt("a" :: "-b" :: "-df" :: "-c", "f"), Type{EnvOpt}())
assertIs(findEnvOpt("-f" :: List{string}(), ""), Type{None}())

assert(
  args = "b" :: "-1" :: "c" :: "d";
  in = "a" :: "-dfz" :: args :: "-t";
  findEnvOpt(in, "f") as EnvOpt o && o.args == args)

assertIs(findEnvOpt("--file" :: List{string}(), "file"), Type{EnvOpt}())
assertIs(findEnvOpt("--files" :: List{string}(), "file"), Type{None}())
assertIs(findEnvOpt("--hello" ::  "a" :: "--file" :: "--world", "file"), Type{EnvOpt}())

assert(
  args = "b" :: "c" :: "d";
  in = "a" :: "--file" :: args :: "-t";
  findEnvOpt(in, "file") as EnvOpt o && o.args == args)

assertEq(findEnvOpt("--test" :: "42", "test", txtIntParser()), 42)
assertIs(findEnvOpt("--test" :: List{string}(), "test", txtIntParser()), Type{Error}())
assertIs(findEnvOpt("--test" :: "hello", "test", txtIntParser()), Type{Error}())
assertIs(findEnvOpt(List{string}(), "test", txtIntParser()), Type{Error}())
