import "std/assert.ns"
import "std/prim.ns"

// -- Type tag

struct Type{T}

// -- Utilities

fun getType{T}(T val)
  Type{T}()

fun typeName{T}(Type{T} t)
  typeName{T}()

fun typeName{T}() -> string
  intrinsic{type_name}{T}()

// -- Conversions

fun string{T}(Type{T} t)
  t.typeName()

// -- Traits

fun isIntegral{T}(Type{T} t)  false
fun isIntegral{T}()           isIntegral(Type{T}())

fun byteSize{T}()             byteSize(Type{T}())
fun bitSize{T}(Type{T} t)     byteSize(t) * 8
fun bitSize{T}()              bitSize(Type{T}())
fun nibbleSize{T}(Type{T} t)  byteSize(t) * 2
fun nibbleSize{T}()           nibbleSize(Type{T}())

fun lowBit{T}()               T(1)
fun highBit{T}()              lowBit{T}() << (bitSize{T}() - 1)
fun minVal{T}()               minVal(Type{T}())
fun maxVal{T}()               maxVal(Type{T}())


// -- Tests

assert(isIntegral{int}())
assertNot(isIntegral{string}())

assertEq(bitSize{char}(), 8)
assertEq(bitSize{int}(), 32)
assertEq(bitSize{long}(), 64)

assertEq(lowBit{int}(), 1)
assertEq(highBit{int}(), 1 << 31)

assertEq(getType(42).string(), "int")
assertEq(getType(42L).string(), "long")
assertEq(getType('a').string(), "char")
assertEq(getType(42.0).string(), "float")
assertEq(getType(42).getType().string(), "Type{int}")
assertEq(getType(42).getType().getType().string(), "Type{Type{int}}")
