import "type.ns"

import "std/core.ns"
import "std/diag.ns"

// -- Types

enum FloatToStringFlags =
  Normal            : 0b00,
  NeverScientific   : 0b01,
  AlwaysScientific  : 0b10

// -- Constructors

fun string() ""

fun string(string s) s

fun string(int i)
  intrinsic{int_to_string}(i)

fun string(long l)
  intrinsic{long_to_string}(l)

fun string(float f, int precision = 6, FloatToStringFlags flags = FloatToStringFlags.Normal)
  intrinsic{float_to_string}(f, int(flags) | precision << 8)

fun string(bool b)
  b ? "true" : "false"

fun string(char c) intrinsic{char_to_string}(c)
fun string(char a, char b) string(a) + b
fun string(char a, char b, char c) string(a, b) + c
fun string(char a, char b, char c, char d) string(a, b, c) + d
fun string(char a, char b, char c, char d, char e) string(a, b, c, d) + e
fun string(char a, char b, char c, char d, char e, char f)  string(a, b, c, d, e) + f
fun string(char a, char b, char c, char d, char e, char f, char g)  string(a, b, c, d, e, f) + g
fun string(char a, char b, char c, char d, char e, char f, char g, char h)  string(a, b, c, d, e, f, g) + h

fun string(char c, int amount)
  repeat = (lambda (string result, int cnt)
    if cnt <= 0 -> result
    else        -> self(result + c, --cnt)
  );
  repeat("", amount)

fun string(string str, int amount)
  repeat = (lambda (string result, int cnt)
    if cnt <= 0 -> result
    else        -> self(result + str, --cnt)
  );
  repeat("", amount)

fun string(int i, int minDigits)
  i.string().padLeft(minDigits, '0')

fun string(long i, int minDigits)
  i.string().padLeft(minDigits, '0')

// -- Reflection based string conversions as fallback for all other types.

fun string{T}(T val,         Meta{#9}     structTypeKind)     reflectStructToString(val)
fun string{T}(T val,         Meta{#10}    unionTypeKind)      reflectUnionToString(val)
fun string{T}(T val,         Meta{#11}    enumTypeKind)       stringForEnum(val)
fun string{T, TypeId}(T val, Meta{TypeId} fallbackTypeKind)   typeName{T}()

fun string{T}(T val)
  val.string(Meta{reflect_type_kind{T}}())

fun stringForEnum{T}(T val)
  reflectEnumKeyForVal(val) ?? ""

// -- Operators

fun +{T}(string s, T v)
  s + v.string()

fun +(string x, string y) -> string
  intrinsic{string_add_string}(x, y)

fun +(string x, char y) -> string
  intrinsic{string_add_char}(x, y)

fun [](string s, int index) -> char
  intrinsic{string_index}(s, index)

fun [](string s, int start, int end) -> string
  intrinsic{string_slice}(s, start, end)

fun ==(string x, string y) -> bool
  intrinsic{string_eq_string}(x, y)

fun <(string x, string y) -> bool
  invoke(lambda (int idx)
    xC = x[idx].toLower();
    yC = y[idx].toLower();
    if idx == x.length()  -> false
    if xC < yC  -> true
    if xC > yC  -> false
    else        -> self(++idx)
  , 0)

fun >(string x, string y) -> bool
  invoke(lambda (int idx)
    xC = x[idx].toLower();
    yC = y[idx].toLower();
    if idx == x.length()  -> false
    if xC > yC  -> true
    if xC < yC  -> false
    else        -> self(++idx)
  , 0)

// -- Utilities

fun isEmpty(string str)
  str == ""

fun noneIfEmpty(string str) -> Option{string}
  str.isEmpty() ? None() : str

fun last(string str)
  str[str.length() - 1]

fun length(string str) -> int
  intrinsic{string_length}(str)

fun padLeft(string str, int length, char c)
  if str.length() < length  -> padLeft(c.string() + str, length, c)
  else                      -> str

// -- Tests

assertEq(string(1, 2), "01")
assertEq(string(42L, 5), "00042")

assertEq(string('0', 1), "0")
assertEq(string('0', 2), "00")
assertEq(string('0', 3), "000")
assertEq(string('0', 0), "")
assertEq(string('0', -1), "")

assertEq(string("hello", 1), "hello")
assertEq(string("hello", 2), "hellohello")
assertEq(string("hello", 3), "hellohellohello")
assertEq(string("hello", 0), "")
assertEq(string("hello", -1), "")

assertEq(string(nan()), "nan")
assertEq(string(42.0, 6, FloatToStringFlags.Normal), "42")
assertEq(string(42.1337, 6, FloatToStringFlags.Normal), "42.1337")
assertEq(string(420000000.0, 6, FloatToStringFlags.Normal), "4.2e+08")
assertEq(string(.0000042, 6, FloatToStringFlags.Normal), "4.2e-06")
assertEq(string(.000004242, 6, FloatToStringFlags.Normal), "4.242e-06")
assertEq(string(.000004242, 7, FloatToStringFlags.Normal), "4.242e-06")
assertEq(string(.000004242, 5, FloatToStringFlags.Normal), "4.242e-06")

assertEq(string(42.0, 7, FloatToStringFlags.NeverScientific), "42.0000000")
assertEq(string(42.1337, 7, FloatToStringFlags.NeverScientific), "42.1337013")
assertEq(string(42.1337, 6, FloatToStringFlags.NeverScientific), "42.133701")
assertEq(string(42.1337, 5, FloatToStringFlags.NeverScientific), "42.13370")
assertEq(string(42.1337, 4, FloatToStringFlags.NeverScientific), "42.1337")
assertEq(string(42.1337, 3, FloatToStringFlags.NeverScientific), "42.134")
assertEq(string(42.1337, 2, FloatToStringFlags.NeverScientific), "42.13")
assertEq(string(42.1337, 1, FloatToStringFlags.NeverScientific), "42.1")
assertEq(string(42.1337, 0, FloatToStringFlags.NeverScientific), "42")
assertEq(string(-42.1337, 7, FloatToStringFlags.NeverScientific), "-42.1337013")
assertEq(string(-42.1337, 6, FloatToStringFlags.NeverScientific), "-42.133701")
assertEq(string(-42.1337, 5, FloatToStringFlags.NeverScientific), "-42.13370")
assertEq(string(-42.1337, 4, FloatToStringFlags.NeverScientific), "-42.1337")
assertEq(string(-42.1337, 3, FloatToStringFlags.NeverScientific), "-42.134")
assertEq(string(-42.1337, 2, FloatToStringFlags.NeverScientific), "-42.13")
assertEq(string(-42.1337, 1, FloatToStringFlags.NeverScientific), "-42.1")
assertEq(string(-42.1337, 0, FloatToStringFlags.NeverScientific), "-42")

assertEq(string(42.0, 7, FloatToStringFlags.AlwaysScientific), "4.2000000e+01")
assertEq(string(42.1337, 7, FloatToStringFlags.AlwaysScientific), "4.2133701e+01")
assertEq(string(42.1337, 6, FloatToStringFlags.AlwaysScientific), "4.213370e+01")
assertEq(string(42.1337, 5, FloatToStringFlags.AlwaysScientific), "4.21337e+01")
assertEq(string(42.1337, 4, FloatToStringFlags.AlwaysScientific), "4.2134e+01")
assertEq(string(42.1337, 3, FloatToStringFlags.AlwaysScientific), "4.213e+01")
assertEq(string(42.1337, 2, FloatToStringFlags.AlwaysScientific), "4.21e+01")
assertEq(string(42.1337, 1, FloatToStringFlags.AlwaysScientific), "4.2e+01")
assertEq(string(42.1337, 0, FloatToStringFlags.AlwaysScientific), "4e+01")
assertEq(string(-42.1337, 7, FloatToStringFlags.AlwaysScientific), "-4.2133701e+01")
assertEq(string(-42.1337, 6, FloatToStringFlags.AlwaysScientific), "-4.213370e+01")
assertEq(string(-42.1337, 5, FloatToStringFlags.AlwaysScientific), "-4.21337e+01")
assertEq(string(-42.1337, 4, FloatToStringFlags.AlwaysScientific), "-4.2134e+01")
assertEq(string(-42.1337, 3, FloatToStringFlags.AlwaysScientific), "-4.213e+01")
assertEq(string(-42.1337, 2, FloatToStringFlags.AlwaysScientific), "-4.21e+01")
assertEq(string(-42.1337, 1, FloatToStringFlags.AlwaysScientific), "-4.2e+01")
assertEq(string(-42.1337, 0, FloatToStringFlags.AlwaysScientific), "-4e+01")

assertLe("a", "b")
assertLe("aa", "ab")
assertGtrOrEq("aa", "aa")

assertGtr("b", "a")
assertGtr("ab", "aa")
assertLeOrEq("aa", "aa")

assert("".isEmpty())
assertNot(" ".isEmpty())

assertEq("".last(), '\0')
assertEq("o".last(), 'o')
assertEq("hello".last(), 'o')

assertEq("1".padLeft(-1, '0'), "1")
assertEq("1".padLeft(0, '0'), "1")
assertEq("1".padLeft(1, '0'), "1")
assertEq("1".padLeft(2, '0'), "01")
assertEq("1".padLeft(3, '0'), "001")
