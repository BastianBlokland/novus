import "type.ns"

import "std/diag.ns"

// -- Constructors

fun string() ""

fun string(string s) s

fun string(int i)
  intrinsic{int_to_string}(i)

fun string(long l)
  intrinsic{long_to_string}(l)

fun string(float f)
  intrinsic{float_to_string}(f)

fun string(bool b)
  b ? "true" : "false"

fun string(char c) intrinsic{char_to_string}(c)
fun string(char a, char b) string(a) + b
fun string(char a, char b, char c) string(a, b) + c
fun string(char a, char b, char c, char d) string(a, b, c) + d
fun string(char a, char b, char c, char d, char e) string(a, b, c, d) + e
fun string(char a, char b, char c, char d, char e, char f)  string(a, b, c, d, e) + f
fun string(char a, char b, char c, char d, char e, char f, char g)  string(a, b, c, d, e, f) + g
fun string(char a, char b, char c, char d, char e, char f, char g, char h)  string(a, b, c, d, e, f, g) + h

fun string(char c, int amount)
  repeat = (lambda (string result, int cnt)
    if cnt <= 0 -> result
    else        -> self(result + c, --cnt)
  );
  repeat("", amount)

fun string(string str, int amount)
  repeat = (lambda (string result, int cnt)
    if cnt <= 0 -> result
    else        -> self(result + str, --cnt)
  );
  repeat("", amount)

fun string(int i, int minDigits)
  i.string().padLeft(minDigits, '0')

fun string(long i, int minDigits)
  i.string().padLeft(minDigits, '0')

// -- Operators

fun +{T}(string s, T v)
  s + v.string()

fun +(string x, string y) -> string
  intrinsic{string_add_string}(x, y)

fun +(string x, char y) -> string
  intrinsic{string_add_char}(x, y)

fun ==(string x, string y) -> bool
  intrinsic{string_eq_string}(x, y)

// -- Utilities

fun isEmpty(string str)
  str == ""

fun last(string str)
  str[str.length() - 1]

fun length(string str) -> int
  intrinsic{string_length}(str)

fun padLeft(string str, int length, char c)
  if str.length() < length  -> padLeft(c.string() + str, length, c)
  else                      -> str

// -- Tests

assertEq(string(1, 2), "01")
assertEq(string(42L, 5), "00042")

assertEq(string('0', 1), "0")
assertEq(string('0', 2), "00")
assertEq(string('0', 3), "000")
assertEq(string('0', 0), "")
assertEq(string('0', -1), "")

assertEq(string("hello", 1), "hello")
assertEq(string("hello", 2), "hellohello")
assertEq(string("hello", 3), "hellohellohello")
assertEq(string("hello", 0), "")
assertEq(string("hello", -1), "")

assert("".isEmpty())
assertNot(" ".isEmpty())

assertEq("".last(), '\0')
assertEq("o".last(), 'o')
assertEq("hello".last(), 'o')

assertEq("1".padLeft(-1, '0'), "1")
assertEq("1".padLeft(0, '0'), "1")
assertEq("1".padLeft(1, '0'), "1")
assertEq("1".padLeft(2, '0'), "01")
assertEq("1".padLeft(3, '0'), "001")
