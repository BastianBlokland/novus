import "type.ns"

import "std/diag.ns"

// -- Traits

fun byteSize(Type{float} t)   4
fun minVal(Type{float} t)     asFloat(0xFF7F_FFFF)
fun maxVal(Type{float} t)     asFloat(0x7F7F_FFFF)

// -- Constructors

fun float() 0.0

fun float(float f) f

fun float(long l)
  intrinsic{long_to_float}(l)

fun implicit float(int i)
  intrinsic{int_to_float}(i)

fun asFloat(int i) -> float
  intrinsic{int_as_float}(i)

// -- Operators

fun +(float f) f

fun +(float x, float y) -> float
  intrinsic{float_add_float}(x, y)

fun ++(float f) f + 1.0

fun -(float x) -> float
  intrinsic{float_neg}(x)

fun -(float x, float y) -> float
  intrinsic{float_sub_float}(x, y)

fun --(float f) f - 1.0

fun ==(float x, float y) -> bool
  intrinsic{float_eq_float}(x, y)

fun <(float x, float y) -> bool
  intrinsic{float_le_float}(x, y)

fun >(float x, float y) -> bool
  intrinsic{float_gt_float}(x, y)

// -- Utilities

fun nan()
  asFloat(0xFFA0_0000)

fun isNan(float v)
  v != v

fun epsilon()
  asFloat(0x1)

fun posInfinity()
  asFloat(0x7F80_0000)

fun negInfinity()
  asFloat(0xFF80_0000)

// -- Tests

assertEq((1.0 / 0.0), posInfinity())
assertEq((-1.0 / 0.0), negInfinity())
assertEq(-posInfinity(), negInfinity())

assert(nan().isNan())
assert(isNan(0.0 / 0.0))
assertNot(isNan(0.0))
assertNot(isNan(1.0))
assertNot(isNan(1.0 / 0.0))
