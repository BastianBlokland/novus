import "std/assert.ns"
import "std/list.ns"
import "std/text.ns"

// -- Functions

fun isAscii(char c)
  (c & 0b1000_0000) == 0

fun isDigit(char c)
  c >= '0' && c <= '9'

fun isHexDigit(char c)
  c.isDigit() || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')

fun isLetter(char c)
  isLower(c) || isUpper(c)

fun isLower(char c)
  c >= 'a' && c <= 'z'

fun isUpper(char c)
  c >= 'A' && c <= 'Z'

fun isControl(char c)
  (c >= 0x00 && c <= 0x1f) || c == 0x7f

fun isWhitespace(char c)
  c == ' ' || c == '\t' || (c >= 0x0A && c <= 0x0D)

fun isNewline(char c)
  c == '\n' || c == '\r'

fun toUpper(char c)
  c.isLower() ? char(c ^ 0x20) : c

fun toLower(char c)
  c.isUpper() ? char(c ^ 0x20) : c

fun isPrintable(char c)
  !c.isControl() && c < 127

fun escapeForPrinting(char c)
  if c == '\n'        -> "\\n"
  if c == '\r'        -> "\\r"
  if c == '\t'        -> "\\t"
  if c.isPrintable()  -> c.string()
  else                -> "\\" + int(c).string()

fun escapeForPrinting(string str)
  invoke(lambda (int idx, string str)
    if idx >= str.length()      -> str
    if !str[idx].isPrintable()  -> replace = str[idx].escapeForPrinting();
                                   self(idx + replace.length(), str.remove(idx).insert(replace, idx))
    else                        -> self(++idx, str)
  , 0, str)

// -- Tests

assertAll(rangeList(char(0), char(127)), isAscii)
assertNone(rangeList(char(128), char(255)), isAscii)

assertAll(rangeList('0', '9'), isDigit)
assertNone(rangeList('a', 'z'), isDigit)

assertAll(rangeList('0', '9'), isHexDigit)
assertAll(rangeList('a', 'f'), isHexDigit)
assertAll(rangeList('A', 'F'), isHexDigit)
assertNone(rangeList('g', 'z'), isHexDigit)

assertAll(rangeList('a', 'z'), isLetter)
assertAll(rangeList('A', 'Z'), isLetter)
assertNone(rangeList('0', '9'), isLetter)

assertAll(rangeList('a', 'z'), isLower)
assertNone(rangeList('A', 'Z'), isLower)
assertNone(rangeList('0', '9'), isLower)

assertAll(rangeList('A', 'Z'), isUpper)
assertNone(rangeList('a', 'z'), isUpper)
assertNone(rangeList('0', '9'), isUpper)

assert(' '.isWhitespace())
assert('\t'.isWhitespace())
assert('\n'.isWhitespace())
assert('\r'.isWhitespace())
assertNone(rangeList('a', 'z'), isWhitespace)
assertNone(rangeList('A', 'Z'), isWhitespace)
assertNone(rangeList('0', '9'), isWhitespace)

assert('\n'.isNewline())
assert('\r'.isNewline())
assertNot('\t'.isNewline())

assert('\0'.isControl())
assert('\t'.isControl())
assert('\f'.isControl())
assert('\v'.isControl())
assert('\n'.isControl())
assert('\r'.isControl())

assertEq(rangeList('a', 'z').map(toUpper), rangeList('A', 'Z'))
assertEq(rangeList('A', 'Z').map(toLower), rangeList('a', 'z'))

assertEq('\0'.escapeForPrinting(), "\\0")
assertEq('\n'.escapeForPrinting(), "\\n")
assertEq('\r'.escapeForPrinting(), "\\r")
assertEq('\t'.escapeForPrinting(), "\\t")
assertEq('\a'.escapeForPrinting(), "\\7")
assertEq('\b'.escapeForPrinting(), "\\8")
assertEq(' '.escapeForPrinting(), " ")
assertEq('a'.escapeForPrinting(), "a")
assertEq('+'.escapeForPrinting(), "+")
assertEq(char(127).escapeForPrinting(), "\\127")
assertEq(char(189).escapeForPrinting(), "\\189")

assertEq("".escapeForPrinting(), "")
assertEq("hello world".escapeForPrinting(), "hello world")
assertEq("hello\nworld".escapeForPrinting(), "hello\\nworld")
assertEq("\thello\nworld\r".escapeForPrinting(), "\\thello\\nworld\\r")
assertEq("\0".escapeForPrinting(), "\\0")
assertEq("\0\0\0".escapeForPrinting(), "\\0\\0\\0")
assertEq("\a\n\t\b".escapeForPrinting(), "\\7\\n\\t\\8")
