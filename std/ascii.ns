import "std/assert.ns"
import "std/list.ns"
import "std/text.ns"

// -- Functions

fun isAscii(char c)
  (c & 0b1000_0000) == 0

fun isDigit(char c)
  c >= '0' && c <= '9'

fun isHexDigit(char c)
  c.isDigit() || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')

fun isLetter(char c)
  isLower(c) || isUpper(c)

fun isLower(char c)
  c >= 'a' && c <= 'z'

fun isUpper(char c)
  c >= 'A' && c <= 'Z'

fun isControl(char c)
  (c >= 0x00 && c <= 0x1f) || c == 0x7f

fun isWhitespace(char c)
  c == ' ' || c == '\t' || (c >= 0x0A && c <= 0x0D)

fun isNewline(char c)
  c == '\n' || c == '\r'

fun toUpper(char c)
  c.isLower() ? char(c ^ 0x20) : c

fun toLower(char c)
  c.isUpper() ? char(c ^ 0x20) : c

fun isPrintable(char c)
  !c.isControl() && c < 127

fun escapeForPrinting(char c)
  if c == '\n'        -> "\\n"
  if c == '\r'        -> "\\r"
  if c == '\t'        -> "\\t"
  if c.isPrintable()  -> c.string()
  else                -> "\\" + int(c).string()

fun escapeForPrinting(string str)
  invoke(lambda (int idx, string str)
    if idx >= str.length()      -> str
    if !str[idx].isPrintable()  -> replace = str[idx].escapeForPrinting();
                                   self(idx + replace.length(), str.remove(idx).insert(replace, idx))
    else                        -> self(++idx, str)
  , 0, str)

// -- Tests

assert(
  rangeList(char(0),    char(127)).all(isAscii) &&
  rangeList(char(128),  char(255)).none(isAscii))

assert(
  rangeList('0', '9').all(isDigit) &&
  rangeList('a', 'z').none(isDigit))

assert(
  rangeList('0', '9').all(isHexDigit) &&
  rangeList('a', 'f').all(isHexDigit) &&
  rangeList('A', 'F').all(isHexDigit) &&
  rangeList('g', 'z').none(isHexDigit))

assert(
  rangeList('a', 'z').all(isLetter) &&
  rangeList('A', 'Z').all(isLetter) &&
  rangeList('0', '9').none(isLetter))

assert(
  rangeList('a', 'z').all(isLower) &&
  rangeList('A', 'Z').none(isLower) &&
  rangeList('0', '9').none(isLower))

assert(
  rangeList('A', 'Z').all(isUpper) &&
  rangeList('a', 'z').none(isUpper) &&
  rangeList('0', '9').none(isUpper))

assert(
  ' '.isWhitespace() && '\t'.isWhitespace() && '\n'.isWhitespace() && '\r'.isWhitespace() &&
  rangeList('a', 'z').none(isWhitespace) &&
  rangeList('A', 'Z').none(isWhitespace) &&
  rangeList('0', '9').none(isWhitespace))

assert('\n'.isNewline() && '\r'.isNewline() && !'\t'.isNewline())

assert(
  '\0'.isControl() &&
  '\t'.isControl() &&
  '\f'.isControl() &&
  '\v'.isControl() &&
  '\n'.isControl() &&
  '\r'.isControl())

assert(
  rangeList('a', 'z').map(toUpper) == rangeList('A', 'Z') &&
  rangeList('A', 'Z').map(toLower) == rangeList('a', 'z'))

assert(
  '\0'.escapeForPrinting()      == "\\0"    &&
  '\n'.escapeForPrinting()      == "\\n"    &&
  '\r'.escapeForPrinting()      == "\\r"    &&
  '\t'.escapeForPrinting()      == "\\t"    &&
  '\a'.escapeForPrinting()      == "\\7"    &&
  '\b'.escapeForPrinting()      == "\\8"    &&
  ' '.escapeForPrinting()       == " "      &&
  'a'.escapeForPrinting()       == "a"      &&
  '+'.escapeForPrinting()       == "+"      &&
  char(127).escapeForPrinting() == "\\127"  &&
  char(189).escapeForPrinting() == "\\189")

assert(
  "".escapeForPrinting()                  == ""                     &&
  "hello world".escapeForPrinting()       == "hello world"          &&
  "hello\nworld".escapeForPrinting()      == "hello\\nworld"        &&
  "\thello\nworld\r".escapeForPrinting()  == "\\thello\\nworld\\r"  &&
  "\0".escapeForPrinting()                == "\\0"                  &&
  "\0\0\0".escapeForPrinting()            == "\\0\\0\\0"            &&
  "\a\n\t\b".escapeForPrinting()          == "\\7\\n\\t\\8")
