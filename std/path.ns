import "std/assert.ns"
import "std/parser.ns"
import "std/rt.ns"
import "std/writer.ns"

// -- Types

struct PathRelative =
  List{string} segments

struct PathAbsolute =
  string        root,
  PathRelative  path

union Path = PathRelative, PathAbsolute

// -- Operators

fun /(PathRelative l, PathRelative r)
  PathRelative(l.segments :: r.segments)

fun /(PathRelative l, string segment)
  PathRelative(l.segments :: segment)

fun /(PathAbsolute l, PathRelative r)
  PathAbsolute(l.root, l.path / r)

fun /(PathAbsolute l, string r)
  PathAbsolute(l.root, l.path / r)

fun /(Path p, string r)
  p / PathRelative(r :: List{string}())

fun /(Path p, PathRelative r)
  if p as PathAbsolute abs -> abs / r
  if p as PathRelative rel -> rel / r

// -- Conversions

fun string(Path p)
  pathWriter().run(p)

fun string(PathRelative p)
  pathRelWriter().run(p)

fun string(PathAbsolute p)
  pathAbsWriter().run(p)

// -- Utilities

fun pathAbs(string root)
  PathAbsolute(root, pathRel())

fun pathAbs(string root, List{string} segments)
  PathAbsolute(root, pathRel(segments))

fun pathRel(List{string} segments)
  PathRelative(segments)

fun pathRel()
  PathRelative(List{string}())

fun pathDefaultRootUnix()
  pathAbs("/")

fun pathDefaultRootWindows()
  pathAbs("c:/")

fun filename(PathAbsolute abs) -> Option{string}
  abs.path.filename()

fun filename(PathRelative rel) -> Option{string}
  rel.segments.back()

fun filename(Path p)
  if p as PathAbsolute abs -> abs.filename()
  if p as PathRelative rel -> rel.filename()

fun stem(PathAbsolute abs) -> Option{string}
  abs.path.stem()

fun stem(PathRelative rel) -> Option{string}
  rel.segments.back().map(lambda (string filename)
    idx = filename.indexOfLast(".");
    idx > 0 && idx != (filename.length() - 1) ? filename[0, idx] : filename
  )

fun stem(Path p)
  if p as PathAbsolute abs -> abs.stem()
  if p as PathRelative rel -> rel.stem()

fun extension(PathAbsolute abs) -> Option{string}
  abs.path.extension()

fun extension(PathRelative rel) -> Option{string}
  rel.segments.back().map(lambda (string filename)
    idx = filename.indexOfLast(".");
    idx > 0 && idx != (filename.length() - 1) ? filename[idx + 1, filename.length()] : None()
  )

fun extension(Path p)
  if p as PathAbsolute abs -> abs.extension()
  if p as PathRelative rel -> rel.extension()

fun parent(PathAbsolute abs) -> PathAbsolute
  PathAbsolute(abs.root, abs.path.parent())

fun parent(PathRelative rel) -> PathRelative
  PathRelative(rel.segments.popBack())

fun parent(Path p)
  if p as PathAbsolute abs -> abs.parent()
  if p as PathRelative rel -> rel.parent()

// -- Parsers

fun pathRelParser{UntilT}(Parser{UntilT} until = endParser()) -> Parser{PathRelative}
  sepParser     = matchParser('/') | matchParser('\\');
  validateSeg   = (
    lambda (string s) !s.startsWith(" ") && !s.endsWith(" ") && !s.any(isControl)
  );
  segParser     = untilParser(sepParser | until).map(
    lambda (string s) -> Either{string, Error}
      if validateSeg(s) -> s
      else              -> Error("Invalid path segment")
  );
  flags         = ParseFlags.AllowTrailingSeperator;
  manyUntilParser(segParser, sepParser, until, flags).map(construct{List{string}, PathRelative})

fun pathAbsParser{UntilT}(Parser{UntilT} until = endParser()) -> Parser{PathAbsolute}
  unixRoot    = matchParser("/");
  windowsRoot = (charParser() << (matchParser(":\\") | matchParser(":/")))
    .map(lambda (char drive) drive.toLower().string() + ":/");
  (
    (unixRoot | windowsRoot) & pathRelParser(until)
  ).map(construct{string, PathRelative, PathAbsolute})

fun pathParser{UntilT}(Parser{UntilT} until = endParser()) -> Parser{Path}
  pathAbsParser(until).map(construct{PathAbsolute, Path}) |
  pathRelParser(until).map(construct{PathRelative, Path}) ! Error("Invalid path")

// -- Writers

fun pathRelWriter() -> Writer{PathRelative}
  listWriter(stringWriter(), litWriter('/')).map(lambda (PathRelative p) p.segments)

fun pathAbsWriter() -> Writer{PathAbsolute}
  (
    stringWriter() & pathRelWriter()
  ).map(lambda (PathAbsolute p) makePair(p.root, p.path))

fun pathWriter() -> Writer{Path}
  absWriter = pathAbsWriter();
  relWriter = pathRelWriter();
  Writer(lambda (WriterState s, Path p)
    if p as PathAbsolute a -> absWriter(s, a)
    if p as PathRelative r -> relWriter(s, r)
  )

// -- Actions

act getPathDefaultRoot()
  if getPlatform() == Platform.Windows  -> pathDefaultRootWindows()
  else                                  -> pathDefaultRootUnix()

act getPathAbsolute(PathRelative rel)
  getPathCurrent() / rel

act getPathAbsolute(Path p)
  if p as PathAbsolute a -> a
  if p as PathRelative r -> r.getPathAbsolute()

// -- Tests

assertEq((pathRel() / "hello.txt").filename(), "hello.txt")
assertEq((pathRel() / "hello" / "world").filename(), "world")
assertEq((pathRel() / "hello" / "world.ns").filename(), "world.ns")
assertEq((pathDefaultRootWindows() / "world.ns").filename(), "world.ns")
assertIs(pathRel().filename(), Type{None}())
assertIs(pathDefaultRootUnix().filename(), Type{None}())
assertIs(pathDefaultRootWindows().filename(), Type{None}())

assertEq((pathRel() / "hello.txt").stem(), "hello")
assertEq((pathRel() / "hello.c").stem(), "hello")
assertEq((pathRel() / "hello.world").stem(), "hello")
assertEq((pathRel() / "hello.world.ns").stem(), "hello.world")
assertEq((pathRel() / ".profile").stem(), ".profile")
assertEq((pathRel() / "hello" / "world" / ".profile").stem(), ".profile")
assertEq((pathRel() / "hello").stem(), "hello")
assertEq((pathRel() / "hello.").stem(), "hello." )
assertEq((pathRel() / "hello" / "world").stem(), "world")
assertIs(pathDefaultRootUnix().stem(), Type{None}())
assertIs(pathDefaultRootWindows().stem(), Type{None}())

assertEq((pathRel() / "hello.txt").extension(), "txt")
assertEq((pathRel() / "hello.c").extension(), "c")
assertEq((pathRel() / "hello.world").extension(), "world")
assertEq((pathRel() / "hello.world.ns").extension(), "ns")
assertIs((pathRel() / ".profile").extension(), Type{None}())
assertIs((pathRel() / "hello" / "world" / ".profile").extension(), Type{None}())
assertIs((pathRel() / "hello").extension(), Type{None}())
assertIs((pathRel() / "hello.").extension(), Type{None}())
assertIs((pathRel() / "hello" / "world").extension(), Type{None}())
assertIs(pathDefaultRootUnix().extension(), Type{None}())
assertIs(pathDefaultRootWindows().extension(), Type{None}())

assertEq((pathRel() / "hello.txt").parent(), pathRel())
assertEq((pathRel() / "hello" / "world.txt").parent(), pathRel() / "hello")
assertEq((pathDefaultRootUnix() / "hello.txt").parent(), pathDefaultRootUnix())
assertEq(pathRel().parent(), pathRel())
assertEq(pathDefaultRootUnix().parent(), pathDefaultRootUnix() )
assertEq(pathDefaultRootWindows().parent(), pathDefaultRootWindows())

assertEq(pathAbsParser().run("/"), pathAbs("/"))
assertEq(pathAbsParser().run("c:\\"), pathAbs("c:/"))
assertEq(pathAbsParser().run("c:/"), pathAbs("c:/"))
assertEq(pathAbsParser().run("C:/"), pathAbs("c:/"))
assertEq(pathAbsParser().run("z:\\"), pathAbs("z:/"))
assertIs(pathAbsParser().run("\\"), Type{Error}())
assertIs(pathAbsParser().run("hello"), Type{Error}())
assertIs(pathAbsParser().run("c:hello"), Type{Error}())

assertEq(pathRelParser().run("test.txt"), pathRel("test.txt" :: List{string}()))
assertEq(pathRelParser().run("hello/test.txt"), pathRel("hello" :: "test.txt"))
assertEq(pathRelParser().run("hello"), pathRel("hello" :: List{string}()))
assertEq(pathRelParser().run("你好，世界"), pathRel("你好，世界" :: List{string}()))
assertEq(pathRelParser().run("hello/world"), pathRel("hello" :: "world"))
assertEq(pathRelParser().run("hello/world/"), pathRel("hello" :: "world"))
assertEq(pathRelParser().run("hello world"), pathRel("hello world" :: List{string}()))
assertEq(pathRelParser().run("h/e/l/l/o/w/"), pathRel("h" :: "e" :: "l" :: "l" :: "o" :: "w"))
assertEq(pathRelParser().run("hello/../world"), pathRel("hello" :: ".." :: "world"))
assertEq(pathRelParser().run("hello/.."), pathRel("hello" :: ".."))
assertEq(pathRelParser().run("hello/../"), pathRel("hello" :: ".."))
assertEq(pathRelParser().run("hello/./world"), pathRel("hello" :: "." :: "world"))
assertEq(pathRelParser().run("hello/."), pathRel("hello" :: "."))
assertEq(pathRelParser().run("hello/./"), pathRel("hello" :: "."))
assertEq(pathRelParser().run("hello\\test.txt"), pathRel("hello" :: "test.txt"))
assertEq(pathRelParser().run("hello\\world"), pathRel("hello" :: "world"))
assertEq(pathRelParser().run("hello\\world\\"), pathRel("hello" :: "world"))
assertEq(pathRelParser().run("hello\\..\\world"), pathRel("hello" :: ".." :: "world"))
assertEq(pathRelParser().run("hello\\.."), pathRel("hello" :: ".."))
assertEq(pathRelParser().run("hello/..\\"), pathRel("hello" :: ".."))
assertEq(pathRelParser().run("hello\\./world"), pathRel("hello" :: "." :: "world"))
assertEq(pathRelParser().run("."), pathRel("." :: List{string}()))
assertIs(pathRelParser().run("/"), Type{Error}())
assertIs(pathRelParser().run("\\"), Type{Error}())
assertIs(pathRelParser().run("/hello"), Type{Error}())
assertIs(pathRelParser().run("hello//"), Type{Error}())
assertIs(pathRelParser().run(" "), Type{Error}())
assertIs(pathRelParser().run(" hello"), Type{Error}())
assertIs(pathRelParser().run("hello  "), Type{Error}())
assertIs(pathRelParser().run("hello\tworld"), Type{Error}())
assertIs(pathRelParser().run("hello/ world"), Type{Error}())
assertIs(pathRelParser().run("hello\\\\"), Type{Error}())
assertIs(pathRelParser().run("hello//world"), Type{Error}())

assertEq(pathParser().run("test.txt"), Path(pathRel("test.txt" :: List{string}())))
assertEq(pathParser().run("hello/test.txt"), Path(pathRel("hello" :: "test.txt")))
assertEq(pathParser().run("/hello"), Path(pathAbs("/", "hello" :: List{string}())))
assertEq(pathParser().run("c:\\hello"), Path(pathAbs("c:/", "hello" :: List{string}())))
assertEq(pathParser().run("c:/hello"), Path(pathAbs("c:/", "hello" :: List{string}())))
assertIs(pathParser().run("\\"), Type{Error}())
assertIs(pathParser().run("//"), Type{Error}())

assertEq(pathParser(newlineParser()).run("hello\nworld"), Path(pathRel("hello" :: List{string}())))
assertEq(pathParser(newlineParser()).run("hello.txt\nworld"), Path(pathRel("hello.txt" :: List{string}())))
assertEq(pathParser(newlineParser()).run("hello/world.txt\nworld"), Path(pathRel("hello" :: "world.txt")))
assertEq(pathParser(newlineParser()).run("c:\\win\\dows\r\nhello"), Path(pathAbs("c:/", "win" :: "dows")))
assertEq(pathParser(newlineParser()).run("你好，世界.txt\nworld"), Path(pathRel("你好，世界.txt" :: List{string}())))

assertEq(pathWriter()(pathDefaultRootUnix()), "/" )
assertEq(pathWriter()(pathDefaultRootWindows()), "c:/" )
assertEq(pathWriter()(pathDefaultRootWindows()), "c:/" )
assertEq(pathWriter()(pathAbs("z:/")), "z:/" )
assertEq(pathWriter()(pathDefaultRootWindows() / "hello"), "c:/hello")
assertEq(pathWriter()(pathDefaultRootUnix() / "hello"), "/hello")
assertEq(pathWriter()(pathDefaultRootUnix() / "hello" / "world"), "/hello/world")
assertEq(pathWriter()(pathDefaultRootUnix() / "hello world"), "/hello world")
assertEq(pathWriter()(pathDefaultRootUnix() / "hello world" / "e l i t e"), "/hello world/e l i t e")

assertEq(pathWriter()(pathRel() / "hello"), "hello")
assertEq(pathWriter()(pathRel() / "hello" / "world"), "hello/world")
assertEq(pathWriter()(pathRel() / "你好，世界" / "world"), "你好，世界/world")
assertEq(pathWriter()(pathRel() / "hello world"), "hello world")
assertEq(pathWriter()(pathRel() / "hello world" / "e l i t e"), "hello world/e l i t e")

assertEq(pathWriter()(pathRel() / "elite"), "elite")
assertEq(pathWriter()(pathRel() / "elite" / pathRel() / "hello world"), "elite/hello world")
assertEq(pathWriter()(pathRel() / "elite" / pathRel() / "elite" / pathRel() / "hello world"), "elite/elite/hello world")
assertEq(pathWriter()(pathRel() / "hello world" / pathRel() / "hello world"), "hello world/hello world")
assertEq(pathWriter()(pathRel() / "hello world" / pathRel() / "hello world" / pathRel() / "elite"), "hello world/hello world/elite")

assertEq(getPathAbsolute(pathRel() / "hello.txt").parent(), getPathCurrent())
assertEq(getPathAbsolute(pathRel() / "hello.txt").extension(), "txt")
