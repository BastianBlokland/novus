import "std/assert.ns"
import "std/list.ns"
import "std/parser.ns"
import "std/writer.ns"

// Utilities for sem-ver versions.
// https://semver.org/
//
// Non-standard extensions:
// * Omitting the patch number (assumed to be zero), example: '1.42-alpha', will equal: '1.42.0-alpha'.
// * Using a dot to start the meta tags, example: '1.2.3.42', will equal: '1.2.3+42'.
//

// -- Types

struct Version =
  int           major,
  int           minor,
  int           patch,
  List{string}  prereleaseTags,
  List{string}  metaTags

// -- Operators

fun >(Version x, Version y)
  x.major > y.major ||
  (x.major == y.major && x.minor > y.minor) ||
  (x.major == y.major && x.minor == y.minor && x.patch > y.patch) ||
  (x.major == y.major && x.minor == y.minor && x.patch == y.patch && y.isPrerelease())

fun >=(Version x, Version y)
  !(x < y)

fun <(Version x, Version y)
  x.major < y.major ||
  (x.major == y.major && x.minor < y.minor) ||
  (x.major == y.major && x.minor == y.minor && x.patch < y.patch) ||
  (x.major == y.major && x.minor == y.minor && x.patch == y.patch && x.isPrerelease())

fun <=(Version x, Version y)
  !(x > y)

// -- Utilities

fun bumpMajor(Version v)
  Version(++v.major, 0, 0, v.prereleaseTags, v.metaTags)

fun bumpMinor(Version v)
  Version(v.major, ++v.minor, 0, v.prereleaseTags, v.metaTags)

fun bumpPatch(Version v)
  Version(v.major, v.minor, ++v.patch, v.prereleaseTags, v.metaTags)

fun isPrerelease(Version v)
  !v.prereleaseTags.isEmpty()

// -- Conversions

fun Version(int major, int minor, int patch = 0, List{string} prereleaseTags = List{string}())
  Version(major, minor, patch, prereleaseTags, List{string}())

fun string(Version v)
  versionWriter().run(v)

// -- Parsers

fun versionParser() -> Parser{Version}
  tagParser = whileParser(lambda (char c) c.isLetter() || c.isDigit() || c == '-');
  (
    txtPosIntParser() & matchParser('.') >> txtPosIntParser() & ?(matchParser('.') >> txtPosIntParser()) &
    ?(matchParser('-') >> manyParser(tagParser, matchParser('.'))) &
    ?((matchParser('+') | matchParser('.')) >> manyParser(tagParser, matchParser('.')))
  ).map( lambda ( int major,
                  int minor,
                  Option{int} patch,
                  Option{List{string}} prereleaseTags,
                  Option{List{string}} meta)
      Version(major, minor, patch ?? 0, prereleaseTags ?? List{string}(), meta ?? List{string}())
    ) ! Error("Invalid sem-ver version")

// -- Writers

fun versionWriter()
  (
    txtIntWriter() & litWriter('.') & txtIntWriter() & litWriter('.') & txtIntWriter() &
    ?(litWriter("-") & listWriter(stringWriter(), litWriter("."))) &
    ?(litWriter("+") & listWriter(stringWriter(), litWriter(".")))
  ).map(lambda (Version v)
      makePair(
        v.major,
        v.minor,
        v.patch,
        v.prereleaseTags.isEmpty()  ? None() : Option(v.prereleaseTags),
        v.metaTags.isEmpty()        ? None() : Option(v.metaTags))
    )

// -- Tests

assert(isPrerelease(Version(1, 0, 0, "alpha" :: List{string}())))
assertNot(isPrerelease(Version(1, 0, 0)))

assertGtr(Version(1, 0, 0), Version(0, 1, 0))
assertGtr(Version(1, 1, 0), Version(1, 0, 0))
assertGtr(Version(1, 1, 2), Version(1, 1, 1))
assertGtr(Version(1, 1, 1), Version(1, 1, 1, "alpha" :: List{string}()))
assertGtr(Version(2, 0, 0), Version(1, 99, 0))
assertGtrOrEq(Version(2, 0, 0), Version(1, 99, 0))
assertGtrOrEq(Version(2, 0, 0), Version(2, 00, 0))
assertLe(Version(1, 0, 0), Version(2, 1, 0))
assertLe(Version(1, 1, 0), Version(1, 2, 0))
assertLe(Version(1, 1, 2), Version(1, 1, 3))
assertLeOrEq(Version(1, 1, 2), Version(1, 1, 3))
assertLeOrEq(Version(1, 1, 2), Version(1, 1, 2))
assertLe(Version(1, 1, 1), Version(1, 1, 2, "alpha" :: List{string}()))

assertIs(versionParser()(""), Type{ParseFailure}())
assertIs(versionParser()("0"), Type{ParseFailure}())
assertIs(versionParser()("0."), Type{ParseFailure}())
assertIs(versionParser()("0.a"), Type{ParseFailure}())
assertIs(versionParser()("-1.1"), Type{ParseFailure}())
assertIs(versionParser()("1.-1"), Type{ParseFailure}())
assertEq(versionParser()("0.0"), Version(0, 0))
assertEq(versionParser()("42.1337"), Version(42, 1337))
assertEq(versionParser()("42.1337.123"), Version(42, 1337, 123))
assertEq(versionParser()("42.1337.123-"), Version(42, 1337, 123))
assertEq(versionParser()("42.1337.123+"), Version(42, 1337, 123))

assertEq(
  versionParser()("42.1337.123-alpha.fullmoon.wip"),
  Version(42, 1337, 123, "alpha" :: "fullmoon" :: "wip")
)

assertEq(
  versionParser()("42.1337-alpha.fullmoon.wip"),
  Version(42, 1337, 0, "alpha" :: "fullmoon" :: "wip")
)

assertEq(
  versionParser()("1.0.0-x.7.z.92"),
  Version(1, 0, 0, "x" :: "7" :: "z" :: "92")
)

assertEq(
  versionParser()("42.1337+local-machine.europe"),
  Version(42, 1337, 0, List{string}(), "local-machine" :: "europe")
)

assertEq(
  versionParser()("1.0.0-beta+exp.sha.5114f85"),
  Version(1, 0, 0, "beta" :: List{string}(), "exp" :: "sha" :: "5114f85")
)

assertEq(
  versionParser()("42.1337.123-alpha.fullmoon.wip+local-machine.europe"),
  Version(42, 1337, 123,
    "alpha" :: "fullmoon" :: "wip",
    "local-machine" :: "europe")
)

assertEq(
  versionParser()("42.1337.123+alpha.fullmoon.wip-local-machine.europe"),
  Version(42, 1337, 123,
    List{string}(),
    "alpha" :: "fullmoon" :: "wip-local-machine" :: "europe")
)

assertEq(
  versionParser()("1.2.3.42"),
  Version(1, 2, 3, List{string}(), "42" :: List{string}())
)

assertEq(
  versionParser()("2.29.2.windows.2"),
  Version(2, 29, 2, List{string}(), "windows" :: "2")
)

assertEq(versionWriter()(Version(0, 0)), "0.0.0")
assertEq(versionWriter()(Version(42, 1337, 123)), "42.1337.123")

assertEq(
  versionWriter()(
    Version(42, 1337, 123,
      List{string}(),
      "local-machine" :: "europe")),
  "42.1337.123+local-machine.europe"
)

assertEq(
  versionWriter()(
    Version(42, 1337, 123,
      "alpha" :: "fullmoon" :: "wip")),
  "42.1337.123-alpha.fullmoon.wip"
)

assertEq(
  versionWriter()(
    Version(42, 1337, 123,
      "alpha" :: "fullmoon" :: "wip",
      "local-machine" :: "europe")),
  "42.1337.123-alpha.fullmoon.wip+local-machine.europe"
)
