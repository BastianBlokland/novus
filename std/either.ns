import "std/assert.ns"
import "std/func.ns"
import "std/option.ns"
import "std/type.ns"

// -- Types

union Either{T1, T2} = T1, T2

// -- Conversions

fun string{T1, T2}(Either{T1, T2} e)
  if e as T1 t1  -> t1.string()
  if e as T2 t2  -> t2.string()

// -- Functions

fun map{T1, T2, TResult}(Either{T1, T2} e, function{T1, TResult} func) -> Either{TResult, T2}
  if e as T1 t1 -> Either{TResult, T2}(func(t1))
  if e as T2 t2 -> Either{TResult, T2}(t2)

fun map{T1, T2, TResult}(Either{T1, T2} e, function{T2, TResult} func) -> Either{T1, TResult}
  if e as T1 t1 -> Either{T1, TResult}(t1)
  if e as T2 t2 -> Either{T1, TResult}(func(t2))

fun map{T1, T2}(Either{T1, T2} e, function{T1, Either{T1, T2}} func) -> Either{T1, T2}
  e as T1 t1 ? func(t1) : e

fun map{T1, T2}(Either{T1, T2} e, function{T2, Either{T1, T2}} func) -> Either{T1, T2}
  e as T2 t2 ? func(t2) : e

fun toOption{T1, T2}(Either{T1, T2} e, Type{T1} t) -> Option{T1}
  e as T1 t1 ? t1 : None()

fun toOption{T1, T2}(Either{T1, T2} e, Type{T2} t) -> Option{T2}
  e as T2 t2 ? t2 : None()

// -- Tests

assertEq(Either{int, string}(42), 42)
assertEq(Either{int, string}("hello world"), "hello world")
assertNotEq(Either{int, string}(42), Either{int, string}("hello world"))

assertEq(Either{int, string}(42).string(), "42")
assertEq(Either{int, string}("hello world").string(), "hello world")

assertEq(Either{int, string}("hello").map(equals{string}["hello"]), true)
assertEq(Either{int, string}("hello").map(lambda (string str) str + " world"), "hello world")
assertEq(Either{int, string}(42).map(equals{string}["hello"]), 42)

assertEq(Either{int, string}("hello").map(lambda (int i) i * i), "hello")
assertEq(Either{int, string}(42).map(equals{int}[42]), true)
assertEq(Either{int, string}(42).map(lambda (int i) i * i), 42 * 42)

assertEq(
  func = ( lambda (int i) -> Either{int, bool}
    i == 42 ? true : i
  );
  Either{int, bool}(42).map(func), true)

assertEq(
  func = ( lambda (int i) -> Either{int, bool}
    i == 42 ? true : i
  );
  Either{int, bool}(41).map(func), 41)

assertEq(
  func = ( lambda (int i) -> Either{int, bool}
    i == 42 ? true : i
  );
  Either{int, bool}(false).map(func), false)

assertEq(
  func = ( lambda (int i) -> Either{bool, int}
    i == 42 ? true : i
  );
  Either{bool, int}(42).map(func), true)

assertEq(Either{bool, int}(42).toOption(Type{int}()), 42)
assertEq(Either{bool, int}(42).toOption(Type{bool}()), None())

assertEq(Either{bool, int}(true).toOption(Type{bool}()), true)
assertEq(Either{bool, int}(true).toOption(Type{int}()), None())
