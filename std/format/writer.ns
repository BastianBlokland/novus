import "std/core.ns"
import "std/diag.ns"
import "std/prim.ns"

// -- Types

enum WriterNewlineMode = Lf, CrLf, None

struct WriterState =
  string            curResult,
  int               curLineStart,
  int               curIndent,
  string            indentStr,
  WriterNewlineMode newlineMode

struct Writer{T} = function{WriterState, T, WriterState} func

// -- Constructors

fun WriterState(string indentStr = "  ")
  WriterState(indentStr, WriterNewlineMode.Lf)

fun WriterState(WriterNewlineMode newlineMode)
  WriterState("  ", newlineMode)

fun WriterState(string indentStr, WriterNewlineMode newlineMode)
  WriterState("", 0, 0, indentStr, newlineMode)

// -- Operators

fun (){T}(Writer{T} w, WriterState s, T val) -> WriterState
  w.func(s, val)

fun (){T}(Writer{T} w, T val, string indentStr) -> WriterState
  w.func(WriterState(indentStr), val)

fun (){T}(Writer{T} w, T val, WriterNewlineMode newlineMode) -> WriterState
  w.func(WriterState("  ", newlineMode), val)

fun (){T}(Writer{T} w, T val, string indentStr, WriterNewlineMode newlineMode) -> WriterState
  w.func(WriterState(indentStr, newlineMode), val)

fun (){T}(Writer{T} w, T val) -> WriterState
  w.func(WriterState(), val)

fun ==(WriterState s, string str)
  s.curResult == str

fun ?{T}(Writer{T} w) -> Writer{Option{T}}
  optionWriter(w)

fun ?(Writer{None} w) -> Writer{bool}
  Writer(lambda (WriterState s, bool b)
    b ? w(s, None()) : s
  )

fun &(Writer{None} w1, Writer{None} w2) -> Writer{None}
  Writer(lambda (WriterState s, None n)
    w2(w1(s, None()), None())
  )

fun &{T}(Writer{T} w1, Writer{None} w2) -> Writer{T}
  Writer(lambda (WriterState s, T val)
    w2(w1(s, val), None())
  )

fun &{T}(Writer{None} w1, Writer{T} w2) -> Writer{T}
  Writer(lambda (WriterState s, T val)
    w2(w1(s, None()), val)
  )

fun &{T1, T2}(Writer{T1} w1, Writer{T2} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2} val)
    w2(w1(s, val.f1), val.f2)
  )

fun &{T1, T2, T3}(Writer{Tuple{T1, T2}} w1, Writer{T3} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3} val)
    w2(w1(s, Tuple(val.f1, val.f2)), val.f3)
  )

fun &{T1, T2, T3, T4}(Writer{Tuple{T1, T2, T3}} w1, Writer{T4} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3)), val.f4)
  )

fun &{T1, T2, T3, T4, T5}(Writer{Tuple{T1, T2, T3, T4}} w1, Writer{T5} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4)), val.f5)
  )

fun &{T1, T2, T3, T4, T5, T6}(Writer{Tuple{T1, T2, T3, T4, T5}} w1, Writer{T6} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5, T6} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4, val.f5)), val.f6)
  )

fun &{T1, T2, T3, T4, T5, T6, T7}(Writer{Tuple{T1, T2, T3, T4, T5, T6}} w1, Writer{T7} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5, T6, T7} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4, val.f5, val.f6)), val.f7)
  )

fun &{T1, T2, T3, T4, T5, T6, T7, T8}(Writer{Tuple{T1, T2, T3, T4, T5, T6, T7}} w1, Writer{T8} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5, T6, T7, T8} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4, val.f5, val.f6, val.f7)), val.f8)
  )

fun &{T1, T2, T3, T4, T5, T6, T7, T8, T9}(Writer{Tuple{T1, T2, T3, T4, T5, T6, T7, T8}} w1, Writer{T9} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5, T6, T7, T8, T9} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4, val.f5, val.f6, val.f7, val.f8)), val.f9)
  )

fun &{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}(Writer{Tuple{T1, T2, T3, T4, T5, T6, T7, T8, T9}} w1, Writer{T10} w2)
  Writer(lambda (WriterState s, Tuple{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10} val)
    w2(w1(s, Tuple(val.f1, val.f2, val.f3, val.f4, val.f5, val.f6, val.f7, val.f8, val.f9)), val.f10)
  )

fun >>{T}(Writer{T} w1, Writer{T} w2) -> Writer{T}
  Writer(lambda (WriterState s, T val)
    w2(w1(s, val), val)
  )

// -- Conversions

fun string(WriterState s)
  s.curResult

// -- Utilities

fun run{T}(Writer{T} w, T val, string indent, WriterNewlineMode newlineMode) -> string
  w(val, indent, newlineMode).string()

fun run{T}(Writer{T} w, T val, WriterNewlineMode newlineMode) -> string
  w(val, newlineMode).string()

fun run{T}(Writer{T} w, T val) -> string
  w(val).string()

fun write(WriterState s, string txt)
  WriterState(
    s.curResult + txt,
    s.curLineStart,
    s.curIndent,
    s.indentStr,
    s.newlineMode)

fun write(WriterState s, char c)
  WriterState(
    s.curResult + c,
    s.curLineStart,
    s.curIndent,
    s.indentStr,
    s.newlineMode)

fun map{T, TResult}(Writer{TResult} w, function{T, TResult} func)
  Writer(lambda (WriterState s, T v)
    w(s, func(v))
  )

fun to{Target, WriterT}(Writer{WriterT} w, Type{Target} t)
  Writer(lambda (WriterState s, Target v)
    w(s, reflectCoerceToType(v, Type{WriterT}()))
  )

// -- Writers

fun noneWriter()
  Writer(lambda (WriterState s, None n) s)

fun nopWriter{T}() -> Writer{T}
  Writer(lambda (WriterState s, T t) s)

fun injectWriter{T}(Writer{T} w, T val) -> Writer{None}
  Writer(lambda (WriterState s, None n)
    w(s, val)
  )

fun litWriter(string lit)
  Writer(lambda (WriterState s, None n)
    s.write(lit)
  )

fun litWriter(char lit)
  Writer(lambda (WriterState s, None n)
    s.write(lit)
  )

fun newlineWriter()
  Writer(lambda (WriterState s, None n)
    if s.newlineMode == WriterNewlineMode.None -> s
    else ->
      newResult = s.curResult + (s.newlineMode == WriterNewlineMode.CrLf ? "\r\n" : "\n");
      WriterState(
        newResult,
        newResult.length(),
        s.curIndent,
        s.indentStr,
        s.newlineMode)
      )

fun indentWriter()
  Writer(lambda (WriterState s, None n)
    s.write(string(s.indentStr, s.curIndent))
  )

fun indent(int amount)
  Writer(lambda (WriterState s, None n)
    WriterState(
      s.curResult,
      s.curLineStart,
      max(0, s.curIndent + amount),
      s.indentStr,
      s.newlineMode)
  )

fun indent{T}(Writer{T} w)
  indent(1) & w & indent(-1)

fun padUntilWriter(int column, char c = ' ')
  Writer(lambda (WriterState s, None n)
    s.write(string(c, column - (s.curResult.length() - s.curLineStart)))
  )

fun padLeftWriter{T}(Writer{T} w, int column, char c = ' ')
  Writer(lambda (WriterState s, T v)
    begin = s.curResult.length();
    newState = w(s, v);
    padding = column - (newState.curResult.length() - s.curLineStart);
    WriterState(
        s.curResult + string(c, padding) + newState.curResult[begin, newState.curResult.length()],
        s.curLineStart,
        s.curIndent,
        s.indentStr,
        s.newlineMode)
  )

fun wrapWriter{T}(Writer{T} w, int maxColumn, Writer{None} wrapWriter = newlineWriter())
  Writer(lambda (WriterState s, T v)
    newState = w(s, v);
    if (newState.curResult.length() - newState.curLineStart) > maxColumn  -> w(wrapWriter(s, None()), v)
    else                                                                  -> newState
  )

fun splitWriter{T}(Writer{T} w, Writer{string} partWriter = stringWriter(), List{char} seperators = ' ' :: '_' :: '/')
  partsWriter = listWriter(partWriter);
  Writer(lambda (WriterState s, T v)
    begin     = s.curResult.length();
    newState  = w(s, v);
    newText   = newState.curResult[begin, newState.curResult.length()];
    newParts  = newText.splitWithSep(lambda (char c) seperators.contains(c));
    partsWriter(s, newParts)
  )

fun stringWriter()
  Writer(lambda (WriterState s, string str)
    s.write(str)
  )

fun charWriter()
  Writer(lambda (WriterState s, char c)
    s.write(c)
  )

fun txtIntWriter(int minDigits = 0)
  Writer(lambda (WriterState s, int i)
    s.write((i < 0 ? "-" : "") + string(abs(i), minDigits))
  )

fun txtLongWriter(int minDigits = 0)
  Writer(lambda (WriterState s, long l)
    s.write((l < 0 ? "-" : "") + string(abs(l), minDigits))
  )

fun txtHexWriter(int minDigits = 0)
  Writer(lambda (WriterState s, int i)
    str = i.toHexString();
    s.write(string('0', minDigits - str.length()) + str)
  )

fun txtFloatWriter(int precision = 6, FloatToStringFlags flags = FloatToStringFlags.Normal)
  Writer(lambda (WriterState s, float f)
    s.write(f.string(precision, flags))
  )

fun txtBoolWriter(string trueTxt = "true", string falseTxt = "false")
  Writer(lambda (WriterState s, bool b)
    s.write(b ? trueTxt : falseTxt)
  )

fun optionWriter{T}(Writer{T} w, Writer{None} elseWriter = noneWriter()) -> Writer{Option{T}}
  Writer(lambda (WriterState s, Option{T} optVal)
    if optVal as T val  -> w(s, val)
    else                -> elseWriter(s, None())
  )

fun listWriter{T}(Writer{T} elemWriter)
  Writer(lambda (WriterState s, List{T} l)
    l.fold(elemWriter.func, s)
  )

fun listWriter{T}(Writer{T} elemWriter, Writer{None} sepWriter)
  listWriter(elemWriter & sepWriter, elemWriter)

fun listWriter{T}(Writer{T} elemWriter, Writer{T} lastElemWriter)
  Writer(lambda (WriterState s, List{T} l)
    l.fold((lambda (WriterState s, bool last, T v)
      if last -> lastElemWriter(s, v)
      else    -> elemWriter(s, v)
    ), s)
  )

fun indentedListWriter{T}(Writer{T} elemWriter)
  indent(listWriter(indentWriter() & elemWriter & newlineWriter()))

fun indentedListWriter{T}(Writer{T} elemWriter, Writer{None} sepWriter)
  elem      = indentWriter() & elemWriter & sepWriter & newlineWriter();
  lastElem  = indentWriter() & elemWriter & newlineWriter();
  indent(listWriter(elem, lastElem))

fun basicListWriter{T}(Writer{T} elemWriter) -> Writer{List{T}}
  w = (
    litWriter('[') & newlineWriter() &
    indentedListWriter(elemWriter, litWriter(',')) &
    indentWriter() & litWriter(']')
  );
  Writer(lambda (WriterState s, List{T} l)
    if l.isEmpty()  -> s.write("[]")
    else            -> w(s, l)
  )

fun lazyWriter{T}(lazy{Writer{T}} lw)
  Writer(lambda (WriterState s, T v)
    get(lw)(s, v)
  )

fun enumKeyWriter{Enum}(Type{Enum} t)
  Writer(lambda (WriterState s, Enum e)
    s.write(reflectEnumKeyForVal(t, e) ?? "")
  )

fun enumValWriter{Enum}(Type{Enum} t)
  Writer(lambda (WriterState s, Enum e)
    s.write(int(e).string())
  )

fun unionWriter{Union, T1, T2}(Type{Union} t, Writer{T1} w1, Writer{T2} w2) -> Writer{Union}
  Writer(lambda (WriterState s, Union u)
    if u as T1 v1 -> w1(s, v1)
    if u as T2 v2 -> w2(s, v2)
  )

fun unionWriter{Union, T1, T2, T3}(Type{Union} t, Writer{T1} w1, Writer{T2} w2, Writer{T3} w3) -> Writer{Union}
  Writer(lambda (WriterState s, Union u)
    if u as T1 v1 -> w1(s, v1)
    if u as T2 v2 -> w2(s, v2)
    if u as T3 v3 -> w3(s, v3)
  )

// -- Tests

assertEq(
  w = noneWriter();
  w(None()), "")

assertEq(
  w = litWriter("hello world");
  w(None()), "hello world")

assertEq(
  w = stringWriter();
  w("hello world"), "hello world")

assertEq(
  w = stringWriter().injectWriter("hello world");
  w(None()), "hello world")

assertEq(
  w = charWriter();
  w('w'), "w")

assertEq(
  w = txtIntWriter();
  w(42), "42")

assertEq(
  w = txtIntWriter().injectWriter(42);
  w(None()), "42")

assertEq(
  w = txtIntWriter(4);
  w(42), "0042")

assertEq(
  w = txtIntWriter(4);
  w(-42), "-0042")

assertEq(
  w = txtLongWriter();
  w(42L), "42")

assertEq(
  w = txtLongWriter(4);
  w(-42L), "-0042")

assertEq(
  w = txtLongWriter(4);
  w(-42L), "-0042")

assertEq(txtHexWriter()(0), "0")
assertEq(txtHexWriter()(1), "1")
assertEq(txtHexWriter()(-1), "FFFFFFFF")
assertEq(txtHexWriter()(42), "2A")
assertEq(txtHexWriter()(1337), "539")
assertEq(txtHexWriter()(13371337), "CC07C9")

assertEq(txtHexWriter(4)(0), "0000")
assertEq(txtHexWriter(4)(1), "0001")
assertEq(txtHexWriter(4)(1), "0001")
assertEq(txtHexWriter(4)(-1), "FFFFFFFF")
assertEq(txtHexWriter(4)(42), "002A")
assertEq(txtHexWriter(4)(1337), "0539")

assertEq(txtFloatWriter()(42.1337), "42.1337")

assertEq(txtBoolWriter()(true), "true")
assertEq(txtBoolWriter()(false), "false")

assertEq((txtBoolWriter() >> txtBoolWriter())(true), "truetrue")

assertEq((?txtBoolWriter())(Option{bool}(true)), "true")
assertEq((?txtBoolWriter())(Option{bool}()), "")

assertEq((?(litWriter("hello: ") & stringWriter()))(Option{string}("world")), "hello: world")
assertEq((?(litWriter("hello: ") & stringWriter()))(Option{string}()), "")

assertEq(
  w = litWriter("name: ") & stringWriter() & ?(litWriter(", age: ") & txtIntWriter());
  w(Tuple("John", Option{int}()))  , "name: John")

assertEq(
  w = litWriter("name: ") & stringWriter() & ?(litWriter(", age: ") & txtIntWriter());
  w(Tuple("Jane", Option{int}(42))), "name: Jane, age: 42")

assertEq(listWriter(txtIntWriter())(List{int}()), "")
assertEq(listWriter(txtIntWriter())(42 :: List{int}()), "42")
assertEq(listWriter(txtIntWriter())(1 :: 2 :: 3), "123")

assertEq((listWriter(txtIntWriter(), litWriter(',')))(List{int}()), "")
assertEq((listWriter(txtIntWriter(), litWriter(',')))(42 :: List{int}()), "42")
assertEq((listWriter(txtIntWriter(), litWriter(',')))(1 :: 2 :: 3), "1,2,3")

assertEq(listWriter(stringWriter(), litWriter(',') & litWriter(" "))(List{string}()), "")
assertEq(listWriter(stringWriter(), litWriter(',') & litWriter(" "))("hello" :: List{string}()), "hello")
assertEq(listWriter(stringWriter(), litWriter(',') & litWriter(" "))("hello" :: "good" :: "world"), "hello, good, world")

assertEq(listWriter(stringWriter(), newlineWriter())(List{string}()), "")
assertEq(listWriter(stringWriter(), newlineWriter())("hello" :: List{string}()), "hello")
assertEq(listWriter(stringWriter(), newlineWriter())("hello" :: "world"), "hello\nworld")
assertEq(listWriter(stringWriter(), newlineWriter())("hello" :: "world", WriterNewlineMode.CrLf), "hello\r\nworld")

assertEq(
  w = litWriter('[') & listWriter(stringWriter(), litWriter(',')) & litWriter(']');
  w(List{string}()), "[]")

assertEq(
  w = litWriter('[') & listWriter(stringWriter(), litWriter(',')) & litWriter(']');
  w("hello" :: List{string}()), "[hello]")

assertEq(
  w = litWriter('[') & listWriter(stringWriter(), litWriter(',')) & litWriter(']');
  w("hello" :: "good" :: "world"), "[hello,good,world]")

assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(List{int}()), "")
assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(1 :: List{int}()), "  1\n")
assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(1 :: 2 :: 3), "  1,\n  2,\n  3\n")
assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(List{int}(), "", WriterNewlineMode.None), "")
assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(1 :: List{int}(), "", WriterNewlineMode.None), "1")
assertEq(indentedListWriter(txtIntWriter(), litWriter(','))(1 :: 2 :: 3, "", WriterNewlineMode.None), "1,2,3")

assertEq(indentedListWriter(txtIntWriter())(List{int}()), "")
assertEq(indentedListWriter(txtIntWriter())(1 :: List{int}()), "  1\n")
assertEq(indentedListWriter(txtIntWriter())(1 :: 2 :: 3), "  1\n  2\n  3\n")
assertEq(indentedListWriter(txtIntWriter())(List{int}(), "", WriterNewlineMode.None), "")
assertEq(indentedListWriter(txtIntWriter())(1 :: List{int}(), "", WriterNewlineMode.None), "1")
assertEq(indentedListWriter(txtIntWriter())(1 :: 2 :: 3, "", WriterNewlineMode.None), "123")

assertEq(
  w = basicListWriter(txtIntWriter());
  l = 1 :: 2 :: 3;
  w(l), "[\n  1,\n  2,\n  3\n]")

assertEq(
  w = basicListWriter(txtIntWriter());
  l = List{int}();
  w(l), "[]")

assertEq(
  w = basicListWriter(txtIntWriter());
  l = 1 :: 2 :: 3;
  w(l, "", WriterNewlineMode.None), "[1,2,3]")

assertEq(
  w = basicListWriter(txtIntWriter());
  l = List{int}();
  w(l, "", WriterNewlineMode.None), "[]")

assertEq(enumKeyWriter(Type{Month}())(Month.January), "January")
assertEq(enumKeyWriter(Type{Month}())(Month.April), "April")
assertEq(enumKeyWriter(Type{Month}())(Month(42)), "")

assertEq(enumValWriter(Type{Month}())(Month.April), "4")
assertEq(enumValWriter(Type{Month}())(Month(42)), "42")

assertEq(
  w = stringWriter() & txtIntWriter();
  w(Tuple("hello", 42)), "hello42")

assertEq(
  w = stringWriter() & litWriter(' ') & txtIntWriter();
  w(Tuple("hello", 42)), "hello 42")

assertEq(
  w = litWriter("Hi!") & splitWriter(stringWriter(), litWriter('\'') & stringWriter() & litWriter('\''));
  w("Hello/how_is/it / going?"), "Hi!'Hello''/how''_is''/it'' ''/'' going?'")
