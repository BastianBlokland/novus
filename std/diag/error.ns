import "assert.ns"

import "std/core.ns"
import "std/format.ns"
import "std/prim.ns"

// -- Types

struct Error = int code, string msg, Option{Error} next

enum ErrorWriteFlags =
  None          : 0b0,
  IncludeCodes  : 0b1

// -- Constructors

fun Error()
  Error(-1, "Unknown error")

fun Error(string msg)
  Error(-1, msg)

fun Error(int code)
  Error(code, code.string())

fun Error(int code, string msg)
  Error(code, msg, None())

// -- Operators

fun ::(Error a, Error b) -> Error
  Error(a.code, a.msg, a.next as Error n ? n :: b : b)

fun ??{T}(Either{T, Error} e, T def) -> T
  e as T val ? val : def

fun ??{T}(Either{T, Error} e, lazy{T} def) -> T
  e as T val ? val : def.get()

fun !{T}(Either{T, Error} e, Error newError) -> Either{T, Error}
  e.map(lambda (Error oldError) newError :: oldError)

fun !(Option{Error} e, Error newError) -> Option{Error}
  e.map(lambda (Error oldError) newError :: oldError)

fun !{T}(Either{T, Error} e, lazy{Error} newError) -> Either{T, Error}
  e.map(lambda (Error oldError) newError.get() :: oldError)

fun !(Option{Error} e, lazy{Error} newError) -> Option{Error}
  e.map(lambda (Error oldError) newError.get() :: oldError)

fun !!{T}(Either{T, Error} e, Error newError) -> Either{T, Error}
  e.map(lambda (Error oldError) newError)

fun !!(Option{Error} e, Error newError) -> Option{Error}
  e.map(lambda (Error oldError) newError)

// -- Conversions

fun string(Error err)
  err.allErrors().map(lambda (Error err) "'" + err.msg + "'").string()

fun string(ErrorWriteFlags f) toEnumFlagNames(f).string()

// -- Functions

fun count(Error err) -> int
  err.next as Error n ? 1 + n.count() : 1

fun distinct(Error err) -> Error
  err.allErrors().distinct().combine() ?? err

fun allErrors(Error err) -> List{Error}
  err.next as Error n ? List(Error(err.code, err.msg)) :: allErrors(n) : List(err)

fun combine(List{Error} err) -> Option{Error}
  err.fold(lambda (Option{Error} result, Error err)
    result as Error e ? Option(e :: err) : Option(err)
  )

fun combine(List{Option{Error}} maybeErrs) -> Option{Error}
  maybeErrs.filterNone().combine()

fun combine{T}(Either{List{T}, Error} e1, Either{List{T}, Error} e2)
  if e1 as Error err1 && e2 as Error err2 -> err1 :: err2
  if e1 as Error onlyErr1 -> onlyErr1
  if e1 as List{T} l1 && e2 as List{T} l2 -> l1.push(l2)
  else -> e2

fun valueOrError{T}(Tuple{T, Option{Error}} p) -> Either{T, Error}
  valueOrError(p.f1, p.f2)

fun valueOrError{T}(Tuple{T, List{Error}} p) -> Either{T, Error}
  valueOrError(p.f1, p.f2)

fun valueOrError{T}(T val, Option{Error} err) -> Either{T, Error}
  err as Error e ? e : val

fun valueOrError{T}(T val, List{Error} err) -> Either{T, Error}
  valueOrError(val, combine(err))

fun valueOrError{T}(Option{T} val, Error err) -> Either{T, Error}
  val as T v ? v : err

fun error{T}(Either{T, Error} eitherOrError) -> Option{Error}
  eitherOrError.eitherGet(Type{Error}())

fun map{T, TResult}(Either{T, Error} v, function{T, Either{TResult, Error}} f) -> Either{TResult, Error}
  if v as T      val -> f(val)
  if v as Error  err -> err

fun map{T, TResult}(Either{T, Error} v, function{T, TResult} f) -> Either{TResult, Error}
  if v as T      val -> f(val)
  if v as Error  err -> err

// -- Writers

fun errorWriter(ErrorWriteFlags flags)
  errorWriter(noneWriter(), newlineWriter(), flags)

fun errorWriter(
    Writer{None}    prefixWriter  = noneWriter(),
    Writer{None}    sepWriter     = newlineWriter(),
    ErrorWriteFlags flags         = ErrorWriteFlags.None
  )
  includeCodes  = (flags & ErrorWriteFlags.IncludeCodes) != 0;
  codeWriter    = litWriter('[') & txtIntWriter() & litWriter("] ");
  writer        = includeCodes  ? (codeWriter & stringWriter()) .map(lambda (Error err) Tuple(err.code, err.msg))
                                : stringWriter()                .map(lambda (Error err) err.msg);
  listWriter(prefixWriter & writer, sepWriter).map(lambda (Error err) err.allErrors())

// -- Actions

act map{T, TResult}(Either{T, Error} v, action{T, Either{TResult, Error}} f) -> Either{TResult, Error}
  if v as T      val -> f(val)
  if v as Error  err -> err

act map{T}(Either{T, Error} v, action{T, Option{Error}} f) -> Option{Error}
  if v as T      val -> f(val)
  if v as Error  err -> err

act map{T, TResult}(Either{T, Error} v, action{T, TResult} f) -> Either{TResult, Error}
  if v as T      val -> f(val)
  if v as Error  err -> err

// -- Tests

assertEq(Error("Hello").string(), "['Hello']")

assertEq((Error("Hello") :: Error("World")).string(), "['Hello','World']")

assertEq((Error("Hello") :: Error("Good") :: Error("World")).string(), "['Hello','Good','World']")

assertEq(
  errorWriter().run(Error()).string(), "Unknown error")

assertEq(
  errorWriter().run(Error(1337, "Hello") :: Error(42, "World")).string(), "Hello\nWorld")

assertEq(
  errorWriter(indentWriter(), litWriter(",")).indent().run(Error()).string(),
  "  Unknown error")

assertEq(
  errorWriter(indentWriter(), litWriter(",")).indent().run(Error(1337, "Hello") :: Error(42, "World")).string(),
  "  Hello,  World")

assertEq(
  errorWriter(ErrorWriteFlags.IncludeCodes).run(Error(1337, "Hello") :: Error(42, "World")).string(),
  "[1337] Hello\n[42] World")

assertEq(
  w = errorWriter(indentWriter(), litWriter(","), ErrorWriteFlags.IncludeCodes).indent();
  w.run(Error(1337, "Hello") :: Error(42, "World")),
  "  [1337] Hello,  [42] World")

assertEq(Error("Hello").count(), 1)
assertEq((Error("Hello") :: Error("World")).count(), 2)
assertEq((Error("Good") :: Error("Hello") :: Error("World")).count(), 3)

assertEq(
  (Error("Hello") :: Error("Good") :: Error("World")).allErrors(),
  Error("Hello") :: Error("Good") :: Error("World") :: List{Error}())

assertEq(
  (Error("Hello") :: Error("Good") :: Error("World") :: List{Error}()).combine(),
  Error("Hello") :: Error("Good") :: Error("World"))

assertEq(Error("Hello").distinct(), Error("Hello"))
assertEq((Error() :: Error()).distinct(), Error())
assertEq((Error("Hello") :: Error("World")).distinct(), Error("Hello") :: Error("World"))
assertEq((Error("Hello") :: Error("World")).distinct(), Error("Hello") :: Error("World"))

assertEq(
  v = Either{int, Error}(42);
  v.map(lambda (int val) val * 2), 84)

assertEq(
  v = Either{int, Error}(Error());
  v.map(lambda (int val) 42), Error())

assertEq(
  v = Either{int, Error}(42);
  v.map(lambda (int val) val > 100 ? val : Error("Test")), Error("Test"))

assertEq(
  v = Either{int, Error}(Error());
  v.map(lambda (int val) val > 100 ? val : Error("Test")), Error())

assertEq(
  v = Either{int, Error}(Error("Low level error"));
  (v ! Error("Better error")), Error("Better error") :: Error("Low level error"))

assertEq(
  v = Either{int, Error}(42);
  (v ! Error("Better error")), 42)

assertEq(
  v = Option(Error("Low level error"));
  (v ! Error("Better error")), Error("Better error") :: Error("Low level error"))

assertIs(
  v = Option{Error}();
  (v ! Error("Better error")), Type{None}())

assertEq(
  v = Either{int, Error}(Error("Low level error"));
  (v !! Error("Better error")), Error("Better error"))

assertEq(
  v = Either{int, Error}(42);
  (v !! Error("Better error")), 42)

assertEq(
  v = Option(Error("Low level error"));
  (v !! Error("Better error")), Error("Better error"))

assertIs(
  v = Option{Error}();
  (v !! Error("Better error")), Type{None}())

assertEq(valueOrError(42, None()), 42)
assertEq(valueOrError(42, Error("Test")), Error("Test"))

assertEq(valueOrError(42, List{Error}()), 42)
assertEq(valueOrError(42, Error("Test") :: List{Error}()), Error("Test"))
assertEq(valueOrError(42, Error("Test") :: Error("Test2") :: List{Error}()), Error("Test") :: Error("Test2"))

// -- Impure Tests

assertEq(
  v = Either{int, Error}(42);
  v.map(impure lambda (int val) val * 2), 84)

assertEq(
  v = Either{int, Error}(Error("Test"));
  v.map(impure lambda (int val) val), Error("Test"))

assertEq(
  v = Either{int, Error}(42);
  v.map(impure lambda (int val) val > 100 ? val : Error("Test")), Error("Test"))

assertIs(
  v = Either{int, Error}(42);
  v.map(impure lambda (int val) val > 100 ? Option(Error("Test")) : None()), Type{None}())

assertEq(
  v = Either{int, Error}(42);
  v.map(impure lambda (int val) val > 30 ? Option(Error("Test")) : None()), Error("Test"))

assertEq(
  v = Either{int, Error}(Error());
  v.map(impure lambda (int val) val > 100 ? val : Error("Test")), Error())
