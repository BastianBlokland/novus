import "assert.ns"

import "std/core.ns"
import "std/io.ns"
import "std/prim.ns"

// -- Types

struct BenchResult{T} =
  T         value,
  Duration  dur

struct BenchResultAverage{T} =
  T         value,
  Duration  avgDur,
  Duration  wallTime,
  int       iters

// -- Actions

act bench{T}(action{T} invokable) -> BenchResult{T}
  start  = timestamp();
  result = invokable();
  end    = timestamp();
  BenchResult(result, end - start)

act benchAverage{T}(action{T} invokable) -> BenchResultAverage{T}
  runItrs = ( impure lambda (int itrsRem, Duration elapsed)
    if itrsRem <= 0 -> elapsed
    else            -> self(--itrsRem, elapsed + bench(invokable).dur)
  );
  minIters  = 100;
  minTime   = milliseconds(100);
  warmup    = bench(invokable);
  ballpark  = bench(invokable);
  iters     = max(minIters, int(minTime / max(ballpark.dur, nanoseconds(5))));
  wallTime  = runItrs(iters, Duration(0));
  avgDur    = wallTime / iters;
  BenchResultAverage(ballpark.value, avgDur, wallTime, iters)

act printBench{T}(action{T} invokable) -> T
  b = bench(invokable);
  print("[Elapsed: " + b.dur + "]");
  b.value

act printBenchAverage{T}(action{T} invokable) -> T
  b = benchAverage(invokable);
  print("[Elapsed: " + b.avgDur + " (" + b.wallTime + " / " + b.iters + " itrs)]");
  b.value

// -- Tests

assert(
  res = benchAverage(impure lambda () 1 + 1);
  res.avgDur < res.wallTime)
