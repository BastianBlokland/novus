import "std/math.ns"
import "std/parser.ns"
import "std/text.ns"

// Gregorian calendar assumed with no leap seconds.

// -- DateTime
// Represents a absolute moment in time.

struct DateTime = long microSinceEpoch

fun -(DateTime dt1, DateTime dt2) microseconds(dt1.microSinceEpoch - dt2.microSinceEpoch)
fun <(DateTime dt1, DateTime dt2) dt1.microSinceEpoch < dt2.microSinceEpoch
fun >(DateTime dt1, DateTime dt2) dt1.microSinceEpoch > dt2.microSinceEpoch
fun +(DateTime dt, Duration d)    DateTime(dt.microSinceEpoch + d.microseconds())
fun -(DateTime dt, Duration d)    DateTime(dt.microSinceEpoch - d.microseconds())

// Jan 1 1970 (Unix time)
fun timeEpoch() DateTime(0L)

// Construct a DateTime from a Gregorian calendar date.
fun DateTime(int year, Month month, int day)
  DateTime(Date(year, month, day))

// Construct a DateTime from a Gregorian calendar date.
fun DateTime(int year, int month, int day)
  DateTime(Date(year, month, day))

// Construct a DateTime from a Gregorian calendar date.
// Implementation based on: http://howardhinnant.github.io/date_algorithms.html#days_from_civil
fun DateTime(Date d)
  year            = d.month <= 2 ? --d.year : d.year;
  era             = (year >= 0 ? year : year - 399) / 400;
  yearOfEra       = year - era * 400;
  dayOfYear       = (153 * (d.month + (d.month > 2 ? -3 : 9)) + 2) / 5 + --d.day;
  dayOfEra        = yearOfEra * 365 + yearOfEra / 4 - yearOfEra / 100 + dayOfYear;
  daysSinceEpoch  = era * 146_097 + dayOfEra - 719_468;
  DateTime(daysSinceEpoch * day().microseconds())

// Date + time in iso-8601 format (https://en.wikipedia.org/wiki/ISO_8601).
// Example output: 1920-03-19T07:11:23Z.
fun string(DateTime dt)
  sinceEpoch = absDuration(dt - timeEpoch());
  Date(dt).string() + "T" +
    (sinceEpoch.hours() % 24).string(2) + ":" +
    (sinceEpoch.minutes() % 60).string(2) + ":" +
    (sinceEpoch.seconds() % 60).string(2) + "Z"

fun daysSinceEpoch(DateTime dt)
  int(dt.microSinceEpoch / day().microseconds())

// -- Date
// Represents a date in the Gregorian calendar.

struct Date =
  int year,
  Month month,
  int day

fun <(Date d1, Date d2)
  d1.year < d2.year ||
  (d1.year == d2.year && d1.month < d2.month) ||
  (d1.year == d2.year && d1.month == d2.month && d1.day < d2.day)

fun >(Date d1, Date d2)
  d1.year > d2.year ||
  (d1.year == d2.year && d1.month > d2.month) ||
  (d1.year == d2.year && d1.month == d2.month && d1.day > d2.day)

fun Date(int year, int month, int day)
  Date(year, Month(month), day)

// Construct a Gregorian calendar date from given DateTime.
// Implementation based on: http://howardhinnant.github.io/date_algorithms.html#civil_from_days
fun Date(DateTime dt)
  z          = dt.daysSinceEpoch() + 719_468;
  era        = (z >= 0 ? z : z - 146_096) / 146_097;
  dayOfEra   = z - era * 146_097;
  yearOfEra  = (dayOfEra - dayOfEra / 1_460 + dayOfEra / 36_524 - dayOfEra / 146_096) / 365;
  year       = yearOfEra + era * 400;
  dayOfYear  = dayOfEra - (365 * yearOfEra + yearOfEra / 4 - yearOfEra / 100);
  mp         = (5 * dayOfYear + 2) / 153;
  day        = dayOfYear - (153 * mp + 2) / 5 + 1;
  month      = Month(mp + (mp < 10 ? 3 : -9));
  Date(month <= 2 ? ++year : year, month, day)

// Date in iso-8601 format (https://en.wikipedia.org/wiki/ISO_8601).
// Example output: 1920-03-19.
fun string(Date date)
  date.year.string(4) + "-" + int(date.month).string(2) + "-" + date.day.string(2)

// -- Month
// Represents a single month in the Gregorian calendar.

enum Month =
  January : 1,
  February,
  March,
  April,
  May,
  June,
  July,
  August,
  September,
  October,
  November,
  December

fun noinline string(Month m, bool short = false)
  if m == Month.January   -> short ? "Jan" : "January"
  if m == Month.February  -> short ? "Feb" : "February"
  if m == Month.March     -> short ? "Mar" : "March"
  if m == Month.April     -> short ? "Apr" : "April"
  if m == Month.May       -> short ? "May" : "May"
  if m == Month.June      -> short ? "Jun" : "June"
  if m == Month.July      -> short ? "Jul" : "July"
  if m == Month.August    -> short ? "Aug" : "August"
  if m == Month.September -> short ? "Sep" : "September"
  if m == Month.October   -> short ? "Oct" : "October"
  if m == Month.November  -> short ? "Nov" : "November"
  if m == Month.December  -> short ? "Dec" : "December"
  else                    -> ""

// -- Weekday
// Represents a single day of the week.

enum WeekDay =
  Monday : 0,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
  Sunday

fun WeekDay(Date e)
  WeekDay(DateTime(e))

fun WeekDay(DateTime dt)
  WeekDay((dt.daysSinceEpoch() + WeekDay.Thursday) % 7)

fun noinline string(WeekDay d, bool short = false)
  if d ==  WeekDay.Sunday     -> short ? "Sun"  : "Sunday"
  if d ==  WeekDay.Monday     -> short ? "Mon"  : "Monday"
  if d ==  WeekDay.Tuesday    -> short ? "Tue"  : "Tuesday"
  if d ==  WeekDay.Wednesday  -> short ? "Wed"  : "Wednesday"
  if d ==  WeekDay.Thursday   -> short ? "Thu"  : "Thursday"
  if d ==  WeekDay.Friday     -> short ? "Fri"  : "Friday"
  if d ==  WeekDay.Saturday   -> short ? "Sat"  : "Saturday"
  else                        -> ""

// -- Duration
// Represents elapsed time, can be negative.

struct Duration = long ns

fun Duration() Duration(0)

fun -(Duration d1, Duration d2)   Duration(d1.ns - d2.ns)
fun +(Duration d1, Duration d2)   Duration(d1.ns + d2.ns)
fun *(Duration d, long l)         Duration(d.ns * l)
fun /(Duration d1, Duration d2)   d1.ns / d2.ns
fun /(Duration d1, long l)        Duration(d1.ns / l)
fun %(Duration d1, Duration d2)   Duration(d1.ns % d2.ns)
fun <(Duration d1, Duration d2)   d1.ns < d2.ns
fun <=(Duration d1, Duration d2)  d1.ns <= d2.ns
fun >(Duration d1, Duration d2)   d1.ns > d2.ns
fun >=(Duration d1, Duration d2)  d1.ns >= d2.ns

fun minDuration() Duration(0x8000_0000_0000_0000L)
fun maxDuration() Duration(0x7FFF_FFFF_FFFF_FFFFL)

// Convert to an absolute duration.
fun absDuration(Duration d)
  if d.ns > 0L          -> d
  if d == minDuration() -> maxDuration()
  else                  -> Duration(-d.ns)

// Conversion to float (seconds with fractions).
fun float(Duration d)
  secs = d / second();
  frac = float(d.ns - seconds(secs).ns) / float(second().ns);
  float(secs) + frac

fun min(Duration a, Duration b)
  Duration(a.ns < b.ns ? a.ns : b.ns)

fun max(Duration a, Duration b)
  Duration(a.ns > b.ns ? a.ns : b.ns)

fun nanosecond()  Duration(1L)
fun microsecond() nanosecond()  * 1_000L
fun millisecond() microsecond() * 1_000L
fun second()      millisecond() * 1_000L
fun minute()      second()      * 60L
fun hour()        minute()      * 60L
fun day()         hour()        * 24L
fun week()        day()         * 7L

fun nanoseconds(long count)   nanosecond()  * count
fun microseconds(long count)  microsecond() * count
fun milliseconds(long count)  millisecond() * count
fun seconds(long count)       second()      * count
fun minutes(long count)       minute()      * count
fun hours(long count)         hour()        * count
fun days(long count)          day()         * count
fun weeks(long count)         week()        * count

fun nanoseconds(Duration d)   d.ns
fun microseconds(Duration d)  d.ns / microsecond().ns
fun milliseconds(Duration d)  d.ns / millisecond().ns
fun seconds(Duration d)       d.ns / second().ns
fun minutes(Duration d)       d.ns / minute().ns
fun hours(Duration d)         d.ns / hour().ns
fun days(Duration d)          d.ns / day().ns
fun weeks(Duration d)         d.ns / week().ns

// Create a human readable representation.
fun noinline string(Duration d)
  if d.ns < 0L  -> "-" + absDuration(d).string()
  else          ->
    if d < microsecond()  ->  d.nanoseconds().string()    + "ns"
    if d < millisecond()  ->  d.microseconds().string()   + "Âµs"
    if d < second()       ->  d.milliseconds().string()   + "ms"
    if d < minute()       ->  d.seconds().string()        + "s"
    if d < hour()         ->  d.minutes().string()        + "m" +
                              (d.seconds() % 60).string() + "s"
    if d < day()          ->  d.hours().string()          + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"
    if d < week()         ->  d.days().string()           + "d" +
                              (d.hours() % 24).string()   + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"
    else                  ->  d.weeks().string()          + "w" +
                              (d.days() % 7).string()     + "d" +
                              (d.hours() % 24).string()   + "h" +
                              (d.minutes() % 60).string() + "m" +
                              (d.seconds() % 60).string() + "s"

// -- Timestamp
// Difference between DateTime is that Timestamp is more precise (nanoseconds) and does not
// represent an absolute time so it can only be used to measure things.

struct Timestamp = long ns

fun -(Timestamp t1, Timestamp t2)   nanoseconds(t1.ns - t2.ns)
fun <(Timestamp t1, Timestamp t2)   t1.ns < t2.ns
fun <=(Timestamp t1, Timestamp t2)  t1.ns <= t2.ns
fun >(Timestamp t1, Timestamp t2)   t1.ns > t2.ns
fun >=(Timestamp t1, Timestamp t2)  t1.ns >= t2.ns

// -- Parsers

fun unixTimeParser()
  txtPosLongParser().map(lambda (long l) timeEpoch() + seconds(l)) ! Error("Invalid unix timestamp")

// -- Actions

// Get a DateTime from the current system clock.
act timeNow() DateTime(intrinsic{clock_microsinceepoch}())

// Get a timestamp based on the process steady clock, guaranteed to go forward
// (even if system clock changes) and is more precise then 'timeNow()'.
act timestamp() Timestamp(intrinsic{clock_nanosteady}())

// -- Tests

assert(Date(1970, Month.January, 1) == Date(timeEpoch()))
assert(Date(1992, Month.June, 9).string() == "1992-06-09")
assert(timeEpoch().string() == "1970-01-01T00:00:00Z")

assert(DateTime(2020, Month.January, 1) + days(31) == DateTime(2020, Month.February, 1))
assert(DateTime(2020, Month.February, 1) + days(29) == DateTime(2020, Month.March, 1))
assert(DateTime(2020, Month.March, 1) + days(31) == DateTime(2020, Month.April, 1))
assert(DateTime(2020, Month.April, 1) + days(30) == DateTime(2020, Month.May, 1))
assert(DateTime(2021, Month.January, 1) - DateTime(2020, Month.January, 1) == days(366))
assert(DateTime(2022, Month.January, 1) - DateTime(2021, Month.January, 1) == days(365))

assert(Date(2020, 2, 1) < Date(2020, 2, 2))
assert(Date(2020, 2, 2) > Date(2020, 2, 1))
assert(Date(2020, 2, 1) > Date(2020, 1, 2))
assert(Date(2020, 1, 1) > Date(2019, 2, 2))

assert(WeekDay(timeEpoch()) == WeekDay.Thursday)
assert(WeekDay(timeEpoch() + day()) == WeekDay.Friday)
assert(WeekDay(timeEpoch() + days(2)) == WeekDay.Saturday)
assert(WeekDay(timeEpoch() + days(3)) == WeekDay.Sunday)
assert(WeekDay(timeEpoch() + days(4)) == WeekDay.Monday)
assert(WeekDay(timeEpoch() + days(5)) == WeekDay.Tuesday)
assert(WeekDay(timeEpoch() + days(6)) == WeekDay.Wednesday)
assert(WeekDay(timeEpoch() + days(7)) == WeekDay.Thursday)

assert(nanosecond().nanoseconds() == 1)
assert(microsecond().microseconds() == 1)
assert(millisecond().milliseconds() == 1)
assert(second().seconds() == 1)
assert(minute().minutes() == 1)
assert(hour().hours() == 1)
assert(day().days() == 1)
assert(week().weeks() == 1)

assert(microsecond().nanoseconds() == 1_000L)
assert(millisecond().nanoseconds() == 1_000_000L)
assert(second().nanoseconds() == 1_000_000_000L)
assert(minute().nanoseconds() == 60_000_000_000L)
assert(hour().nanoseconds() == 3_600_000_000_000L)
assert(day().nanoseconds() == 86_400_000_000_000L)
assert(week().nanoseconds() == 604_800_000_000_000L)

assert(nanoseconds(42).string() == "42ns")
assert(microseconds(42).string() == "42Âµs")
assert(milliseconds(42).string() == "42ms")
assert(seconds(42).string() == "42s")
assert(minutes(42).string() == "42m0s")
assert(hours(4).string() == "4h0m0s")
assert(days(4).string() == "4d0h0m0s")
assert(weeks(4).string() == "4w0d0h0m0s")
assert((weeks(5) + days(4) + hours(3) + minutes(2) + seconds(1)).string() == "5w4d3h2m1s")

assert(nanoseconds(-42).string() == "-42ns")
assert(microseconds(-42).string() == "-42Âµs")
assert(milliseconds(-42).string() == "-42ms")
assert(seconds(-42).string() == "-42s")
assert(minutes(-42).string() == "-42m0s")
assert(hours(-4).string() == "-4h0m0s")
assert(days(-4).string() == "-4d0h0m0s")
assert(weeks(-4).string() == "-4w0d0h0m0s")
assert((weeks(-5) + days(-4) + hours(-3) + minutes(-2) + seconds(-1)).string() == "-5w4d3h2m1s")

assert(absDuration(weeks(-42)) == weeks(42))
assert(absDuration(minDuration()) == maxDuration())

assert(min(seconds(2), minutes(3)) == seconds(2))
assert(max(seconds(2), minutes(3)) == minutes(3))

assert(timeNow() > timeEpoch())
assert(timestamp() <= timestamp())

assert(approx(float(seconds(42) + milliseconds(500)), 42.5))
assert(approx(float(seconds(1337) + millisecond()), 1337.001))

// -- Parser tests

assert(
  p = unixTimeParser();
  p("")           is ParseFailure &&
  p("1606579701") == (DateTime(2020, Month.November, 28) + hours(16) + minutes(8) + seconds(21)))
