import "std/assert.ns"
import "std/option.ns"
import "std/time.ns"

// -- Functions

fun get{T}(future{T} f) -> T
  intrinsic{future_get}(f)

// -- Actions

act poll{T}(future{T} f) -> Option{T}
  intrinsic{future_waitnano}(f, 0) ? Option(f.get()) : None()

act wait{T}(future{T} f, Duration d) -> bool
  intrinsic{future_waitnano}(f, d.ns)

act get{T}(future{T} f, Duration d) -> Option{T}
  f.wait(d) ? Option(f.get()) : None()

act get{T}(future{T} f, action{bool} predicate, Duration checkInternal = milliseconds(100)) -> Option{T}
  if predicate() -> f.get(checkInternal) as T value ? Option(value) : self(f, predicate, checkInternal)
  else           -> None()

act getUntilInterupt{T}(future{T} f) -> Option{T}
  f.get(impure lambda() !interuptIsRequested())

// -- Tests

assertEq(get(fork invoke(lambda () 42), second()), 42)
assertEq(get(fork invoke(lambda () 42), lambda () true), 42)
assertIs(get(fork invoke(lambda () 42), lambda () false), Type{None}())
