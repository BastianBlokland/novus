import "std/assert.ns"
import "std/list.ns"
import "std/pair.ns"
import "std/parser.ns"
import "std/prim.ns"
import "std/utf8.ns"
import "std/writer.ns"

// -- Json (JavaScript Object Notation) parser and writer
// https://www.json.org/json-en.html

// -- Types

union JsonValue =
  JsonNull,
  float,
  bool,
  string,
  JsonObject,
  JsonArray

struct JsonObject =
  List{Pair{string, JsonValue}} fields

struct JsonArray =
  List{JsonValue} entries

struct JsonNull

// -- Utilities

fun jsonStringEscape(string str)
  str.transform(lambda (char c)
    if c == '"'   -> "\\\""
    if c == '\\'  -> "\\\\"
    if c == '\b'  -> "\\b"
    if c == '\f'  -> "\\f"
    if c == '\n'  -> "\\n"
    if c == '\r'  -> "\\r"
    if c == '\t'  -> "\\t"
    else          -> string(c)
  )

// -- Conversions

fun string(JsonObject o, string indent = "", WriterNewlineMode newlineMode = WriterNewlineMode.None)
  w = jsonObjectWriter(jsonValueWriter());
  w(o, indent, newlineMode).string()

fun string(JsonArray a, string indent = "", WriterNewlineMode newlineMode = WriterNewlineMode.None)
  w = jsonArrayWriter(jsonValueWriter());
  w(a, indent, newlineMode).string()

fun string(JsonValue v, string indent = "", WriterNewlineMode newlineMode = WriterNewlineMode.None)
  w = jsonValueWriter();
  w(v, indent, newlineMode).string()

fun string(JsonNull n)
  "null"

// -- Parsers

fun jsonNullParser() -> Parser{JsonNull}
  matchParser("null") >> retParser(JsonNull())

fun jsonNumberParser() -> Parser{float}
  txtFloatParser()

fun jsonBoolParser() -> Parser{bool}
  (matchParser("true")  >> retParser(true))  |
  (matchParser("false") >> retParser(false)) !! Error("Invalid json boolean")

fun jsonUtf8EscapedCharParser() -> Parser{string}
  hexParser = txtHexParser(4);
  Parser(lambda (ParseState s) -> ParseResult{string}
    if s[0] == '"'  -> (s + 1).success("\"")
    if s[0] == '\\' -> (s + 1).success("\\")
    if s[0] == '/'  -> (s + 1).success("/")
    if s[0] == 'b'  -> (s + 1).success("\b")
    if s[0] == 'f'  -> (s + 1).success("\f")
    if s[0] == 'n'  -> (s + 1).success("\n")
    if s[0] == 'r'  -> (s + 1).success("\r")
    if s[0] == 't'  -> (s + 1).success("\t")
    if s[0] == 'u'  -> hexParser(s + 1).map(lambda (int unicode) toUtf8(UnicodePoint(unicode)))
    else            -> s.failure(Error("Invalid json character escape sequence"))
  )

fun jsonUtf8CharParser() -> Parser{string}
  escapedChar = jsonUtf8EscapedCharParser();
  Parser(lambda (ParseState s)
    if s[0].isControl()                   -> s.failure(Error("Unexpected character: '" + s[0].escapeForPrinting() + "'"))
    if s[0] == '"'                        -> s.failure(Error("Unexpected end of string"))
    if s[0] == '\\'                       -> escapedChar(s + 1)
    if utf8Validate(s.str, s.pos, false)  -> cc = s[0].utf8GetCharCount();
                                             (s + cc).success(s.str[s.pos, s.pos + cc])
    else                                  -> s.failure(Error("Invalid utf8 character"))
  )

fun jsonStringParser() -> Parser{string}
  quote = matchParser('"');
  (
    quote >> manyUntilParser(jsonUtf8CharParser(), quote).map(sum{string}) << quote
  ) ! Error("Invalid json string")

fun jsonObjectParser(Parser{JsonValue} valParser = lazyParser(lazy jsonValueParser()))
  open      = matchParser('{')    << whitespaceParser();
  key       = jsonStringParser()  << whitespaceParser() ! Error("Invalid object key");
  colon     = matchParser(':')    << whitespaceParser();
  value     = valParser           << whitespaceParser();
  comma     = matchParser(',')    << whitespaceParser() !! Error("Expected comma or end of object");
  close     = matchParser('}')    << whitespaceParser();
  keyValue  = (key << colon) & value;
  (open >> manyUntilParser(keyValue, comma, close) << close).map(construct{List{Pair{string, JsonValue}}, JsonObject})

fun jsonArrayParser(Parser{JsonValue} valParser = lazyParser(lazy jsonValueParser()))
  open  = matchParser('[')    << whitespaceParser();
  value = valParser           << whitespaceParser();
  comma = matchParser(',')    << whitespaceParser() !! Error("Expected comma or end of array");
  close = matchParser(']')    << whitespaceParser();
  (open >> manyUntilParser(value, comma, close) << close).map(construct{List{JsonValue}, JsonArray})

fun jsonValueParser()
  objectP = jsonObjectParser();
  arrayP  = jsonArrayParser();
  stringP = jsonStringParser();
  nullP   = jsonNullParser();
  boolP   = jsonBoolParser();
  numberP = jsonNumberParser();
  Parser(lambda (ParseState s)
    if s[0] == '{'    -> objectP(s) .map(construct{JsonObject, JsonValue})
    if s[0] == '['    -> arrayP(s)  .map(construct{JsonArray, JsonValue})
    if s[0] == '"'    -> stringP(s) .map(construct{string, JsonValue})
    if s[0] == 'n'    -> nullP(s)   .map(construct{JsonNull, JsonValue})
    if s[0] == 't'    -> boolP(s)   .map(construct{bool, JsonValue})
    if s[0] == 'f'    -> boolP(s)   .map(construct{bool, JsonValue})
    if s[0].isDigit() -> numberP(s) .map(construct{float, JsonValue})
    if s[0] == '-'    -> numberP(s) .map(construct{float, JsonValue})
    if s[0] == '\0'   -> s.failure(Error("Missing json value"))
    else              -> s.failure(
      Error("Invalid start of json value: '" + s[0].escapeForPrinting() + "'"))
  )

fun jsonParser()
  jsonValueParser()

// -- Writers

fun jsonStringWriter()
  litWriter('"') & stringWriter().map(jsonStringEscape) & litWriter('"')

fun jsonObjectWriter(Writer{JsonValue} valWriter = jsonValueWriter())
  keyValue = jsonStringWriter() & litWriter(": ") & valWriter;
  (
    litWriter('{')                                &
    newlineWriter()                               &
    indentedListWriter(keyValue, litWriter(','))  &
    indentWriter() & litWriter('}')
  ).map(lambda (JsonObject v) v.fields)

fun jsonArrayWriter(Writer{JsonValue} valWriter = jsonValueWriter())
  (
    litWriter('[')                                &
    newlineWriter()                               &
    indentedListWriter(valWriter, litWriter(',')) &
    indentWriter() & litWriter(']')
  ).map(lambda (JsonArray a) a.entries)

fun jsonValueWriter()
  numWriter   = txtFloatWriter();
  boolWriter  = txtBoolWriter();
  strWriter   = jsonStringWriter();
  objWriter   = jsonObjectWriter(lazyWriter(lazy jsonValueWriter()));
  arrayWriter = jsonArrayWriter(lazyWriter(lazy jsonValueWriter()));
  Writer(lambda (WriterState s, JsonValue v)
    if v is JsonNull      -> s.write("null")
    if v as float f       -> numWriter(s, f)
    if v as bool b        -> boolWriter(s, b)
    if v as string str    -> strWriter(s, str)
    if v as JsonObject o  -> objWriter(s, o)
    if v as JsonArray a   -> arrayWriter(s, a)
  )

fun jsonWriter()
  jsonValueWriter()

// -- Parser Tests

assertEq(jsonStringEscape("\"Hello\nWorld\""), "\\\"Hello\\nWorld\\\"")
assertEq(jsonStringEscape("\"\\\b\f\n\r\t"), "\\\"\\\\\\b\\f\\n\\r\\t")
assertEq(jsonStringEscape("·öª·õñ ·ö≥·öπ·ö´·ö¶ ·ö¶·ö´·õè"), "·öª·õñ ·ö≥·öπ·ö´·ö¶ ·ö¶·ö´·õè")

assertIs(jsonNullParser()(""), Type{ParseFailure}())
assertIs(jsonNullParser()("NULL"), Type{ParseFailure}())
assertEq(jsonNullParser()("null"), JsonNull())

assertIs(jsonNumberParser()(""), Type{ParseFailure}())
assertEq(jsonNumberParser()("123"), 123.0)
assertEq(jsonNumberParser()("123.123"), 123.123)
assertEq(jsonNumberParser()("-1"), -1.0)
assertEq(jsonNumberParser()("-123.123"), -123.123)
assertEq(jsonNumberParser()("0.123"), .123)
assertEq(jsonNumberParser()("0E1"), 0.0)
assertEq(jsonNumberParser()("0e1"), 0.0)
assertEq(jsonNumberParser()("1E1"), 10.0)
assertEq(jsonNumberParser()("1e1"), 10.0)
assertEq(jsonNumberParser()("1E-3"), .001)
assertEq(jsonNumberParser()("1e-3"), .001)
assertEq(jsonNumberParser()("-123.123e-2"), -1.23123)
assertEq(jsonNumberParser()("-123.123e+2"), -12312.3)
assertEq(jsonNumberParser()("-123.123e2"), -12312.3)

assertIs(jsonBoolParser()(""), Type{ParseFailure}())
assertIs(jsonBoolParser()("TRUE"), Type{ParseFailure}())
assertIs(jsonBoolParser()("FALSE"), Type{ParseFailure}())
assertEq(jsonBoolParser()("true"), true)
assertEq(jsonBoolParser()("false"), false)

assertEq(jsonUtf8EscapedCharParser()("\""), "\"")
assertEq(jsonUtf8EscapedCharParser()("\\"), "\\")
assertEq(jsonUtf8EscapedCharParser()("/"), "/")
assertEq(jsonUtf8EscapedCharParser()("b"), "\b")
assertEq(jsonUtf8EscapedCharParser()("f"), "\f")
assertEq(jsonUtf8EscapedCharParser()("n"), "\n")
assertEq(jsonUtf8EscapedCharParser()("r"), "\r")
assertEq(jsonUtf8EscapedCharParser()("t"), "\t")
assertEq(jsonUtf8EscapedCharParser()("u0026"), "&")
assertEq(jsonUtf8EscapedCharParser()("u039B"), "Œõ")
assertEq(jsonUtf8EscapedCharParser()("u0E3F"), "‡∏ø")
assertEq(jsonUtf8EscapedCharParser()("u1D459"), "ùëô")

assertIs(jsonUtf8EscapedCharParser()("a"), Type{ParseFailure}())
assertIs(jsonUtf8EscapedCharParser()("ug"), Type{ParseFailure}())
assertIs(jsonUtf8EscapedCharParser()("u123"), Type{ParseFailure}())
assertIs(jsonUtf8EscapedCharParser()("u123G"), Type{ParseFailure}())
assertIs(jsonUtf8EscapedCharParser()("u"), Type{ParseFailure}())

assertEq(jsonUtf8CharParser()("a"), "a")
assertEq(jsonUtf8CharParser()("\\\""), "\"")
assertEq(jsonUtf8CharParser()("\\u039B"), "Œõ")
assertEq(jsonUtf8CharParser()("\\u039b"), "Œõ")
assertEq(jsonUtf8CharParser()("‡∏ø"), "‡∏ø")
assertEq(jsonUtf8CharParser()("ùëô"), "ùëô")

assertIs(jsonUtf8CharParser()("\n"), Type{ParseFailure}())
assertIs(jsonUtf8CharParser()("\0"), Type{ParseFailure}())
assertIs(jsonUtf8CharParser()(""), Type{ParseFailure}())
assertIs(jsonUtf8CharParser()("\\u123G"), Type{ParseFailure}())
assertIs(jsonUtf8CharParser()(string(char(0b1000_0000))), Type{ParseFailure}())

assertEq(jsonStringParser()("\"\""), "")
assertEq(jsonStringParser()("\"hello world\""), "hello world")
assertEq(jsonStringParser()("\"hello\\nworld\""), "hello\nworld")
assertEq(jsonStringParser()("\"hello\\u000Aworld\""), "hello\nworld")

assertEq(
  p = jsonStringParser();
  testStr = "STARGŒõÃäTE,Hello world,ŒöŒ±ŒªŒ∑Œº·Ω≥œÅŒ± Œ∫·ΩπœÉŒºŒµ,„Ç≥„É≥„Éã„ÉÅ„Éè,‚°å‚†Å‚†ß‚†ë ‚†º‚†Å‚†í,·öª·õñ ·ö≥·öπ·ö´·ö¶ ·ö¶·ö´·õè,·à∞·àõ·ã≠ ·ä†·ã≠·â≥·à®·àµ ·äï·åâ·à• ·ä†·ã≠·ä®·à∞·àµ·ç¢,‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡∏Æ‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏ó‡∏£‡∏°‡πÅ‡∏™‡∏ô‡∏™‡∏±‡∏á‡πÄ‡∏ß‡∏ä,–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å,·Éí·Éó·ÉÆ·Éù·Éï·Éó ·Éê·ÉÆ·Éö·Éê·Éï·Éî ·Éí·Éê·Éò·Éê·É†·Éù·Éó‚é™‚é¢‚éú ‚é≥a‚Å±-b‚Å±‚éü‚é•‚é™‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚àÄ‚àÇ‚àà‚Ñù‚àß‚à™‚â°‚àû";
  makePair(p("\"" + testStr + "\""), testStr))

assertIs(jsonStringParser()(""), Type{ParseFailure}())
assertIs(jsonStringParser()("\""), Type{ParseFailure}())
assertIs(jsonStringParser()("\"\n\""), Type{ParseFailure}())
assertIs(jsonStringParser()("hello\\a"), Type{ParseFailure}())

assertEq(jsonArrayParser()("[]"), JsonArray(List{JsonValue}()))
assertEq(jsonArrayParser()("[    ]"), JsonArray(List{JsonValue}()))
assertEq(jsonArrayParser()("[1]"), JsonArray(JsonValue(1.0) :: List{JsonValue}()))
assertEq(jsonArrayParser()("[ 1]"), JsonArray(JsonValue(1.0) :: List{JsonValue}()))
assertEq(jsonArrayParser()("[ 1 ]"), JsonArray(JsonValue(1.0) :: List{JsonValue}()))
assertEq(jsonArrayParser()("[1,2]"), JsonArray(JsonValue(1.0) :: JsonValue(2.0)))
assertEq(jsonArrayParser()("[ 1 , 2 ]"), JsonArray(JsonValue(1.0) :: JsonValue(2.0)))
assertEq(jsonArrayParser()("[ true, 2 ]"), JsonArray(JsonValue(true) :: JsonValue(2.0)))

assertEq(
  jsonArrayParser()("[ \"true\" , false, 2 ]"),
  JsonArray(
      JsonValue("true") ::
      JsonValue(false)  ::
      JsonValue(2.0)    :: List{JsonValue}()))

assertEq(
  jsonArrayParser()("[ [1, 2], 2 ]"),
  JsonArray(
      JsonValue(JsonArray(JsonValue(1.0) :: JsonValue(2.0))) ::
      JsonValue(2.0) :: List{JsonValue}()))

assertIs(jsonArrayParser()(""), Type{ParseFailure}())
assertIs(jsonArrayParser()("["), Type{ParseFailure}())
assertIs(jsonArrayParser()("[,"), Type{ParseFailure}())
assertIs(jsonArrayParser()("[,]"), Type{ParseFailure}())
assertIs(jsonArrayParser()("[233 123]"), Type{ParseFailure}())
assertIs(jsonArrayParser()("[233,]"), Type{ParseFailure}())
assertIs(jsonArrayParser()("[233 ,  ]"), Type{ParseFailure}())
assertIs(jsonArrayParser()("[233, 123 ,]"), Type{ParseFailure}())

assertEq(
  jsonObjectParser()("{ \"key\" : 32 }"),
  JsonObject(Pair("key", JsonValue(32.0)) :: List{Pair{string, JsonValue}}()))

assertEq(
  jsonObjectParser()("{\"key1\":32,\"key2\":true}"),
  JsonObject(
    Pair("key1", JsonValue(32.0)) ::
    Pair("key2", JsonValue(true)) :: List{Pair{string, JsonValue}}()))

assertEq(
  jsonObjectParser()("{\n\"key1\"\n:\n32\n,\n\"key2\"\n:\ntrue\n}"),
  JsonObject(
    Pair("key1", JsonValue(32.0)) ::
    Pair("key2", JsonValue(true)) :: List{Pair{string, JsonValue}}()))

assertEq(
  jsonObjectParser()("{\"obj\":{\"k\":true}}"),
  JsonObject(
    Pair("obj", JsonValue(JsonObject(Pair("k", JsonValue(true)) :: List{Pair{string, JsonValue}}()))) ::
    List{Pair{string, JsonValue}}()))

assertIs(jsonArrayParser()(""), Type{ParseFailure}())
assertIs(jsonArrayParser()("{"), Type{ParseFailure}())
assertIs(jsonArrayParser()("{,"), Type{ParseFailure}())
assertIs(jsonArrayParser()("{,}"), Type{ParseFailure}())
assertIs(jsonArrayParser()("{\"key\" 123}"), Type{ParseFailure}())
assertIs(jsonArrayParser()("{\"key\":}"), Type{ParseFailure}())
assertIs(jsonArrayParser()("{\"key\":123,}"), Type{ParseFailure}())

// -- Writer Tests

assertEq(jsonStringWriter()("hello world"), "\"hello world\"")
assertEq(jsonStringWriter()("hello\nworld"), "\"hello\\nworld\"")

assertEq(
  jsonObjectWriter()(JsonObject(
    Pair("key1", JsonValue(32.0)) ::
    Pair("key2", JsonValue(true)) :: List{Pair{string, JsonValue}}())),
  "{\n  \"key1\": 32,\n  \"key2\": true\n}")

assertEq(
  jsonObjectWriter()(JsonObject(
    Pair("obj", JsonValue(JsonObject(Pair("k", JsonValue(true)) :: List{Pair{string, JsonValue}}()))) ::
    List{Pair{string, JsonValue}}())),
  "{\n  \"obj\": {\n    \"k\": true\n  }\n}")

assertEq(jsonArrayWriter()(JsonArray(List{JsonValue}())), "[\n]")
assertEq(jsonArrayWriter()(JsonArray(JsonValue(1.0) :: List{JsonValue}())), "[\n  1\n]")
assertEq(jsonArrayWriter()(JsonArray(JsonValue(1.0) :: JsonValue(true))), "[\n  1,\n  true\n]")

assertEq(jsonValueWriter()(JsonValue(JsonNull())), "null")
assertEq(jsonValueWriter()(JsonValue(1.0)), "1")
assertEq(jsonValueWriter()(JsonValue(1.1337)), "1.1337")
assertEq(jsonValueWriter()(JsonValue(true)), "true")
assertEq(jsonValueWriter()(JsonValue("hello world")), "\"hello world\"")

// -- Combination Tests

assert(
  str       = "{\n  \"files.encoding\": \"utf8\",\n  \"files.autoGuessEncoding\": false,\n  \"files.trimTrailingWhitespace\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.renderWhitespace\": \"all\",\n  \"editor.detectIndentation\": false,\n  \"editor.tabSize\": 2,\n  \"editor.rulers\": [\n    100\n  ],\n  \"clangd.semanticHighlighting\": true\n}";
  jParser   = jsonParser();
  jWriter   = jsonWriter();
  parseRes  = jParser(str);
  parseRes as ParseSuccess{JsonValue} suc &&
    ( writtenStr = jWriter(suc.val).string();
      writtenStr == str &&
      jParser(writtenStr) == suc.val))
