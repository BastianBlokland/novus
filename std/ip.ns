import "std/assert.ns"
import "std/error.ns"
import "std/parser.ns"
import "std/rt.ns"
import "std/writer.ns"

// -- Types

struct IpV4Address = char a, char b, char c, char d

struct IpV6Address = int a, int b, int c, int d, int e, int f, int g, int h

enum IpFamily =
  V4 : 0,
  V6 : 1

union IpAddress = IpV4Address, IpV6Address

// -- Conversions

fun IpFamily(IpAddress addr)
  if addr is IpV4Address ->  IpFamily.V4
  if addr is IpV6Address ->  IpFamily.V6

fun string(IpAddress addr)
  ipTxtWriter().run(addr)

fun string(IpV4Address addr)
  ipV4TxtWriter().run(addr)

fun string(IpV6Address addr)
  ipV6TxtWriter().run(addr)

fun string(IpFamily v)
  if v == IpFamily.V4  -> "IpV4"
  if v == IpFamily.V6  -> "IpV6"
  else                 -> "Unknown"

// -- Utilities

fun ipV4Loopback() IpV4Address(char(127), char(0), char(0), char(1))

fun ipV6Loopback() IpV6Address(0, 0, 0, 0, 0, 0, 0, 1)

fun ipLoopback() IpAddress(ipV6Loopback())

fun ipV4Unspecified() IpV4Address(char(0), char(0), char(0), char(0))

fun ipV6Unspecified() IpV6Address(0, 0, 0, 0, 0, 0, 0, 0)

fun ipUnspecified() IpAddress(ipV6Unspecified())

// -- Parsers

fun ipV4TxtParser() -> Parser{IpV4Address}
  (
    txtPosIntParser() << matchParser('.') &
    txtPosIntParser() << matchParser('.') &
    txtPosIntParser() << matchParser('.') &
    txtPosIntParser()
  ).map(lambda (int a, int b, int c, int d) -> Either{IpV4Address, Error}
      if a < 256 && b < 256 && c < 256 && d < 256 -> IpV4Address(char(a), char(b), char(c), char(d))
      else                                        -> Error("IpV4 segment is outside of the valid range")
    )

fun ipV6TxtParser() -> Parser{IpV6Address}
  seg = matchParser("::") >> retParser(-1) | matchParser(':') >> txtHexParser() | txtHexParser();
  manyParser(seg).map(lambda (List{int} l) -> Either{IpV6Address, Error}
    canonical = l.foldRight(lambda (List{int} res, int v)
      if v >= 0 -> v :: res
      else      -> res.push(0, 9 - l.length())
  );
  if canonical.length() == 0                  -> Error("Invalid IpV6 address")
  if canonical.length() > 8                   -> Error("IpV6 address only consists of 8 segments")
  if canonical.any(lambda (int i) i > 0xFFFF) -> Error("IpV6 segment is only 16 bit")
  else                                        -> IpV6Address( canonical[0] ?? 0,
                                                              canonical[1] ?? 0,
                                                              canonical[2] ?? 0,
                                                              canonical[3] ?? 0,
                                                              canonical[4] ?? 0,
                                                              canonical[5] ?? 0,
                                                              canonical[6] ?? 0,
                                                              canonical[7] ?? 0)
  )

fun ipTxtParser() -> Parser{IpAddress}
  ipV4TxtParser().map(construct{IpV4Address, IpAddress}) |
  ipV6TxtParser().map(construct{IpV6Address, IpAddress}) ! Error("Invalid ip-address")

fun ipV4BinParser() -> Parser{IpV4Address}
  takeParser(4).map(lambda (string s) IpV4Address(s[0], s[1], s[2], s[3]))

fun ipV6BinParser() -> Parser{IpV6Address}
  takeParser(16).map(lambda (string s)
    IpV6Address(  parseInt16(Endianness.Big, s[0],  s[1]),
                  parseInt16(Endianness.Big, s[2],  s[3]),
                  parseInt16(Endianness.Big, s[4],  s[5]),
                  parseInt16(Endianness.Big, s[6],  s[7]),
                  parseInt16(Endianness.Big, s[8],  s[9]),
                  parseInt16(Endianness.Big, s[10], s[11]),
                  parseInt16(Endianness.Big, s[12], s[13]),
                  parseInt16(Endianness.Big, s[14], s[15]))
  )

fun ipBinParser() -> Parser{IpAddress}
  ipV6BinParser().map(construct{IpV6Address, IpAddress}) |
  ipV4BinParser().map(construct{IpV4Address, IpAddress}) ! Error("Invalid ip-address")

// -- Writers

fun ipV4TxtWriter() -> Writer{IpV4Address}
  listWriter(txtIntWriter(), litWriter('.')).map(lambda (IpV4Address addr)
     int(addr.a) :: int(addr.b) :: int(addr.c) :: int(addr.d))

fun ipV6TxtWriter() -> Writer{IpV6Address}
  listWriter(txtHexWriter(4), litWriter(':')).map(lambda (IpV6Address addr)
     addr.a :: addr.b :: addr.c :: addr.d :: addr.e :: addr.f :: addr.g :: addr.h)

fun ipTxtWriter() -> Writer{IpAddress}
  v4TxtWriter = ipV4TxtWriter();
  v6TxtWriter = ipV6TxtWriter();
  Writer(lambda (WriterState s, IpAddress addr)
    if addr as IpV4Address v4 -> v4TxtWriter(s, v4)
    if addr as IpV6Address v6 -> v6TxtWriter(s, v6)
  )

fun ipV4BinWriter() -> Writer{IpV4Address}
  Writer(lambda (WriterState s, IpV4Address addr)
    s.write(string(addr.a, addr.b, addr.c, addr.d))
  )

fun ipV6BinWriter() -> Writer{IpV6Address}
  listWriter(bitInt16Writer(Endianness.Big)).map(lambda (IpV6Address addr)
    addr.a :: addr.b :: addr.c :: addr.d :: addr.e :: addr.f :: addr.g :: addr.h)

fun ipBinWriter() -> Writer{IpAddress}
  v4BinWriter = ipV4BinWriter();
  v6BinWriter = ipV6BinWriter();
  Writer(lambda (WriterState s, IpAddress addr)
    if addr as IpV4Address v4 -> v4BinWriter(s, v4)
    if addr as IpV6Address v6 -> v6BinWriter(s, v6)
  )

// -- Actions

act ipLookupV4Address(string hostname) -> Either{IpV4Address, Error}
  ipV4BinParser().run(intrinsic{ip_lookupaddress}(hostname, IpFamily.V4.int()))
  !! Error("Failed to lookup ipv4 address for hostname: '" + hostname + "'")

act ipLookupV6Address(string hostname) -> Either{IpV6Address, Error}
  ipV6BinParser().run(intrinsic{ip_lookupaddress}(hostname, IpFamily.V6.int()))
  !! Error("Failed to lookup ipv6 address for hostname: '" + hostname + "'")

act ipLookupAddress(string hostname) -> Either{IpAddress, Error}
  v4 = ipLookupV4Address(hostname);
  if v4 as IpV4Address v4Addr -> IpAddress(v4Addr)
  else                        ->
    v6 = ipLookupV4Address(hostname);
    if v6 as IpV4Address v6Addr -> IpAddress(v6Addr)
    else                        -> getPlatformError("Failed to lookup ip address for hostname: '" + hostname + "'")

// -- Tests

assertIs(ipV4TxtParser()(""), Type{ParseFailure}())
assertIs(ipV4TxtParser()("0"), Type{ParseFailure}())
assertIs(ipV4TxtParser()("0."), Type{ParseFailure}())
assertIs(ipV4TxtParser()("0.a"), Type{ParseFailure}())
assertIs(ipV4TxtParser()("0.0.256.0"), Type{ParseFailure}())
assertIs(ipV4TxtParser()("0.0.-128.0"), Type{ParseFailure}())
assertIs(ipV4TxtParser()("1,2,3,4"), Type{ParseFailure}())

assertEq(ipV4TxtParser()("0.0.0.0"), IpV4Address(char(0), char(0), char(0), char(0)))
assertEq(ipV4TxtParser()("127.0.0.1"), IpV4Address(char(127), char(0), char(0), char(1)))
assertEq(ipV4TxtParser()("1.2.3.4"), IpV4Address(char(1), char(2), char(3), char(4)))
assertEq(ipV4TxtParser()("255.255.255.255"), IpV4Address(char(255), char(255), char(255), char(255)))

assertEq(ipV6TxtParser()("1ee7:0db8:0000:0000:0000:ff00:0042:8329"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0xff00, 0x42, 0x8329))
assertEq(ipV6TxtParser()("1ee7:db8:0:0:0:ff00:42:8329"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0xff00, 0x42, 0x8329))
assertEq(ipV6TxtParser()("1ee7:db8::ff00:42:8329"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0xff00, 0x42, 0x8329))
assertEq(ipV6TxtParser()("1ee7:0db8:85a3:0000:0000:8a2e:0370:7334"), IpV6Address(0x1ee7, 0xdb8, 0x85a3, 0, 0, 0x8a2e, 0x370, 0x7334))
assertEq(ipV6TxtParser()("1EE7:0DB8:85A3:0000:0000:8A2e:0370:7334"), IpV6Address(0x1ee7, 0xdb8, 0x85a3, 0, 0, 0x8a2e, 0x370, 0x7334))
assertEq(ipV6TxtParser()("1ee7:ffff:FFFF:ffff:FFFF::"), IpV6Address(0x1ee7, 0xffff, 0xffff, 0xffff, 0xffff, 0, 0, 0))
assertEq(ipV6TxtParser()("::ffff:FFFF:ffff:FFFF"), IpV6Address(0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff))
assertEq(ipV6TxtParser()("1ee7:0db8::0001:0000"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0, 1, 0))
assertEq(ipV6TxtParser()("1ee7:0db8::1:0"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0, 1, 0))
assertEq(ipV6TxtParser()("1ee7:db8::1:0:0:1"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 1, 0, 0, 1))
assertEq(ipV6TxtParser()("1ee7:db8::2:1"), IpV6Address(0x1ee7, 0xdb8, 0, 0, 0, 0, 2, 1))
assertEq(ipV6TxtParser()("1ee7:db8:0:1:1:1:1:1"), IpV6Address(0x1ee7, 0xdb8, 0, 1, 1, 1, 1, 1))
assertEq(ipV6TxtParser()("1::1"), IpV6Address(1, 0, 0, 0, 0, 0, 0, 1))
assertEq(ipV6TxtParser()("::1"), IpV6Address(0, 0, 0, 0, 0, 0, 0, 1))
assertEq(ipV6TxtParser()("::"), IpV6Address(0, 0, 0, 0, 0, 0, 0, 0))

assertIs(ipV6TxtParser()("::::"), Type{ParseFailure}())
assertIs(ipV6TxtParser()("0:0:0:0:0:0:0:0:0"), Type{ParseFailure}())
assertIs(ipV6TxtParser()("1::1::1"), Type{ParseFailure}())
assertIs(ipV6TxtParser()("1::FFFF1::1"), Type{ParseFailure}())
assertIs(ipV6TxtParser()("q1::0"), Type{ParseFailure}())

assertEq(
  p = ipTxtParser() & newlineParser() >> ipTxtParser();
  p("::\n::"), makePair(IpAddress(ipV6Unspecified()), IpAddress(ipV6Unspecified())))

assertEq(
  p = ipTxtParser() & newlineParser() >> ipTxtParser();
  p("127.0.0.1\n::1"), makePair(IpAddress(ipV4Loopback()), IpAddress(ipV6Loopback())))

assertEq(ipV4TxtWriter()(IpV4Address(char(1), char(2), char(3), char(4))), "1.2.3.4")
assertEq(ipV4TxtWriter()(IpV4Address(char(127), char(0), char(0), char(1))), "127.0.0.1")
assertEq(ipV4TxtWriter()(IpV4Address(char(255), char(255), char(255), char(255))), "255.255.255.255")

assertEq(
  w = ipV4BinWriter();
  w(IpV4Address(char(1), char(2), char(3), char(4))), string(char(1), char(2), char(3), char(4)))

assertEq(
  w = ipV4BinWriter();
  w(IpV4Address(char(127), char(0), char(0), char(1))), string(char(127), char(0), char(0), char(1)))

assertEq(
  w = ipV4BinWriter();
  w(IpV4Address(char(255), char(255), char(255), char(255))), string(char(255), char(255), char(255), char(255)))

assertEq(
  w = ipTxtWriter();
  w(ipV4Loopback()), "127.0.0.1")

assertEq(
  w = ipTxtWriter();
  w(ipV6Loopback()), "0000:0000:0000:0000:0000:0000:0000:0001")

assertEq(
  ipBinWriter()(ipV4Loopback()), string(char(127), char(0), char(0), char(1)))

assertEq(
  ipBinWriter()(ipV6Loopback()),
  string(char(0), char(0), char(0), char(0), char(0), char(0), char(0), char(0)) +
  string(char(0), char(0), char(0), char(0), char(0), char(0), char(0), char(1)))

assertEq(ipLookupV4Address("localhost"), ipV4Loopback())

assertEq(ipLookupV6Address("localhost"), ipV6Loopback())

assertEq(ipLookupAddress("localhost"), IpAddress(ipV4Loopback()))
