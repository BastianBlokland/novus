import "runner.ns"

import "std/core.ns"
import "std/prim.ns"

// -- Commands

act cliBuildinCmds() -> List{CliCmdCfg}
  cliBuildinCmd("help",     "Display help information",     cliHelpCmd) ::
  cliBuildinCmd("version",  "Display version information",  cliVersionCmd)

act cliBuildinCmd{T}(string name, string desc, action{T, CliResult, Option{Error}} routine)
  CliCmdCfg(
    name,
    desc,
    cliOptSetFromStruct(Type{T}()).failOnError(),
    false,
    seconds(0),
    cliCreateInvoker(routine),
    cliNopCleanupAction())

// -- Version

struct CliVersionConfig =
  bool verbose

act cliVersionCmd(CliVersionConfig cfg, CliResult res)
  consoleOpen().map(impure lambda (Console c)
    if cfg.verbose ->
      c.writeOut(
        stringWriter() & litWriter(' ') & versionWriter() & newlineWriter() &
        litWriter("Runtime ")           & versionWriter() & newlineWriter() &
        litWriter("Compiler ")          & versionWriter() & newlineWriter(),
        Tuple(res.app.appName, res.app.appVer, runtimeVersion(), compilerVersion()))
    else ->
      c.writeOut(
        stringWriter() & litWriter(' ') & versionWriter() & newlineWriter(),
        Tuple(res.app.appName, res.app.appVer))
  )

// -- Help

struct CliHelpConfig =
  CliPositional{Option{string}} command,
  bool                          color,
  bool                          noColor

fun cliGetHelpCmd(CliResult res, string name) -> Option{CliHelpCmd}
  if res.app.cmds.first(lambda (CliCmdCfg c) name == c.name) as CliCmdCfg cmd -> CliHelpCmd(res.app, cmd)
  else                                                                        -> None()

act cliHelpCmd(CliHelpConfig cfg, CliResult res)
  consoleOpen().map(impure lambda (Console c)
    helpWriterCfg = CliHelpCfg((cfg.color || c.allowColor()) && !cfg.noColor);
    if cfg.command.val as string cmdName ->
    (
      if cliGetHelpCmd(res, cmdName) as CliHelpCmd cmd -> c.writeOut(cliHelpCmdWriter(helpWriterCfg), cmd)
      else                                             -> cliReportUnknownCommand(res.app, cmdName)
    )
    else ->
    (
      c.writeOut(cliHelpWriter(helpWriterCfg), res.app)
    )
  )
